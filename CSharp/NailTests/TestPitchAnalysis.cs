using Concentus.Common.CPlusPlus;
using Concentus.Silk;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NailTests
{
    [TestClass]
    public class TestPitchAnalysis
    {
        [TestMethod]
        public void Test_silk_pitch_analysis_core_stage3()
        {
            Pointer<float> in_frame = Helpers.WrapWithArrayPointer<float>(
            Helpers.ConvertBytesToFloatArray(new uint[] {
                0x0U, 0x0U, 0x0U, 0x0U, 0x0U, 0x0U, 0x0U,
                0x0U, 0xc17f17b8U, 0xc1a1c094U, 0xc2575ee8U, 0x42acbb43U, 0xc2cc1226U, 0x41c148e4U,
                0x4225ff66U, 0xc2a42e14U, 0x42941ed4U, 0xc246668aU, 0x41e9965eU, 0xc18aee52U, 0x422fb3c2U,
                0xc0a91490U, 0xc09bdfc4U, 0xc256964eU, 0x40924ce0U, 0x421bf12eU, 0x4226fa7aU, 0x4193ecb6U,
                0xc1a774acU, 0x40e99d80U, 0x41d37bccU, 0xc28d009dU, 0x4252f2bcU, 0xc0a54968U, 0xc1f60d20U,
                0xc24c46acU, 0x427609d2U, 0xc1ac4b8aU, 0xc2052db9U, 0x42402f95U, 0x41e15a0bU, 0xc30d87ebU,
                0x433dd6a0U, 0xc29a120dU, 0x4383a9c6U, 0xc46e1cf1U, 0x45e7099cU, 0x46856ad7U, 0xc5cd2c80U,
                0x44de7ce8U, 0xc513a828U, 0xc30d6010U, 0xc494e394U, 0xc44e80f9U, 0xc46639f0U, 0xc449ffd4U,
                0xc3f6d2d8U, 0xc490b0e8U, 0xc429dec0U, 0xc4928034U, 0xc44590c8U, 0xc463bff0U, 0xc45a90e0U,
                0xc46d0d00U, 0xc41ad270U, 0xc47e26c0U, 0xc41986d8U, 0xc4553b88U, 0xc40c4c58U, 0xc44c8230U,
                0xc3ddfe58U, 0xc43e6620U, 0xc3e8b700U, 0xc4037572U, 0xc3fed274U, 0xc3d07430U, 0xc3e7cc60U,
                0xc3bd5134U, 0xc3957cbcU, 0xc3afb72cU, 0xc38b4a64U, 0xc3ac892cU, 0xc35cea78U, 0xc3204e3cU,
                0xc36f8960U, 0xc34d18a8U, 0xc284fe48U, 0xc34b17ceU, 0xc31538ccU, 0xc2478d40U, 0xc1e32a00U,
                0xc313a0e8U, 0x42546e88U, 0xc2c9b070U, 0xc10f6d40U, 0xc18e0df0U, 0x428dbd96U, 0xc2127b8fU,
                0x423e236cU, 0x43301373U, 0xc2cd72faU, 0x426e7f25U, 0x4289f03eU, 0x42acf868U, 0x432b76c2U,
                0x41ac4fe0U, 0x42bfa056U, 0x4317e25eU, 0xc2f61a60U, 0x447bf811U, 0xc5e1eafbU, 0xc685bffdU,
                0x45d48314U, 0xc4ccd3a8U, 0x45181ef2U, 0x43a0a108U, 0x44ae12a4U, 0x4450b3b4U, 0x4487f980U,
                0x445fa1a4U, 0x4438b360U, 0x44913bb4U, 0x44339f44U, 0x449f9c68U, 0x44533d6cU, 0x449ce7d4U,
                0x44591f98U, 0x4480e7b8U, 0x4455c324U, 0x447339f8U, 0x4448fe10U, 0x4478f8d0U, 0x442230ccU,
                0x4464f574U, 0x441fbb7cU, 0x443627e0U, 0x440b4abcU, 0x443d102cU, 0x43d0a4d0U, 0x43f7ffa4U,
                0x441f999cU, 0x43bab3dcU, 0x44088aeaU, 0x43a4a188U, 0x43abb990U, 0x43a3d508U, 0x439e4c3cU,
                0x4386f460U, 0x43a681faU, 0x430a5be4U, 0x43455e64U, 0x4356f300U, 0x4323116cU, 0x4345ef20U,
                0x4303e86cU, 0x42b9724cU, 0x42be86a0U, 0x4282a30cU, 0xc29a13c0U, 0x43189eceU, 0x421acb48U,
                0xc2815cb6U, 0x4257dce4U, 0xc265456cU, 0x41c18786U, 0xc304b72cU, 0x41ce9990U, 0xc2be56b2U,
                0x42b9fcbaU, 0xc323536aU, 0xc3237d06U, 0x42156ca8U, 0x42e980acU, 0xc487b1ddU, 0x45e475e8U,
                0x4684fd04U, 0xc5d2bf18U, 0x44cf47b0U, 0xc51662bcU, 0xc3bb7ac8U, 0xc49c5a85U, 0xc4696933U,
                0xc483c66bU, 0xc46f97a8U, 0xc4141180U, 0xc4a83146U, 0xc436ede0U, 0xc4a794a0U, 0xc4457574U,
                0xc495312aU, 0xc448ae60U, 0xc4846192U, 0xc4502058U, 0xc48fffacU, 0xc4393bf0U, 0xc456df14U,
                0xc44005f8U, 0xc4572720U, 0xc41fac18U, 0xc43badd0U, 0xc418c62cU, 0xc4246c04U, 0xc4098178U,
                0xc40691beU, 0xc40e06c2U, 0xc3bea09cU, 0xc3e2aaa4U, 0xc3cc83a8U, 0xc3c148fcU, 0xc3ca81acU,
                0xc381abbcU, 0xc3765488U, 0xc38e99d6U, 0xc387af54U, 0xc366be40U, 0xc348da5cU, 0xc31a71d0U,
                0xc3032b00U, 0xc3566af4U, 0xc2ac2420U, 0xbead3800U, 0xc2f0603cU, 0xc3326898U, 0x42598978U,
                0xc14d7960U, 0x40af7490U, 0xc2962824U, 0x4179ffb0U, 0x4300719dU, 0xc20c4ef4U, 0x40869528U,
                0x42a15eeeU, 0x4305df0fU, 0x424da53cU, 0x419fe420U, 0x42efc738U, 0xc36d99f9U, 0x449a917dU,
                0xc5e8a820U, 0xc6856fc9U, 0x45d58abcU, 0xc4e12468U, 0x45209feaU, 0x439d6e50U, 0x44a90625U,
                0x4453cb58U, 0x448aa088U, 0x445c6dc8U, 0x441d7a44U, 0x449636dcU, 0x444e10a0U, 0x44a1c264U,
                0x444568fcU, 0x44940248U, 0x444f5924U, 0x4499c3e4U, 0x444293b4U, 0x4475906cU, 0x444df728U,
                0x44660390U, 0x443582a4U, 0x44545300U, 0x441fd66cU, 0x444a5278U, 0x43fb5808U, 0x442a2eb4U,
                0x4411ded8U, 0x44124eeeU, 0x440c2552U, 0x43ba87e8U, 0x43d699d8U, 0x43d3fec8U, 0x43b2fe7cU,
                0x43994cd8U, 0x43d54cc0U, 0x43810c08U, 0x43666ee0U, 0x43a2b1e8U, 0x432cbdc0U, 0x4327e1f0U,
                0x4375486cU, 0xc22f2670U, 0x4384d9d2U, 0x4232e1e0U, 0x433bb5b2U, 0xc2867b44U, 0x434c07beU,
                0xc1691920U, 0x41c6dfa8U, 0x426901fcU, 0xc2485404U, 0xc19e6f58U, 0x420a35e6U, 0xc2c9bbb6U,
                0xbf461500U, 0xc2652590U, 0xc229a3c2U, 0xc2e19af3U, 0xc1bd9988U, 0xc2763248U, 0xc2c2a1e0U,
                0xc306e90bU, 0xc1b5d400U, 0xc32c5ff0U, 0xc2c1cad8U, 0xc32e38daU, 0xc1d4bfa0U, 0xc2a01f60U,
                0xc34e6e56U, 0xc2f6f518U, 0xc2119750U, 0xc35098b8U, 0xc1475140U, 0xc3460768U, 0xc2b4b9f0U,
                0xc31150c8U, 0xc2d0d340U, 0xc2b84154U, 0xc30897feU, 0xc31e2d4cU, 0xc300d4d0U, 0xc2212ad8U,
                0xc35bcd48U, 0xc244a680U, 0xc3547bacU, 0x41787020U, 0xc30b919aU, 0xc30c2bc8U, 0xc24fb3a0U,
                0x41131ee0U, 0xc34c935dU, 0xc1cb2ce0U, 0xc2123720U, 0xc338cea5U, 0xc2b999bcU, 0xc2e05dd0U
            }));

            float in_LTPCorr = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            int in_prevLag = 0;
            float in_search_thres1 = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f428f00U), 0);
            float in_search_thres2 = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ebc9e80U), 0);
            int in_Fs_kHz = 8;
            int in_complexity = 1;
            int in_nb_subfr = 4;
            int in_arch = 4;

            Pointer<int> pitch_out = Pointer.Malloc<int>(4);
            BoxedValue<short> lagIndex = new BoxedValue<short>(0);
            BoxedValue<sbyte> contourIndex = new BoxedValue<sbyte>(0);
            BoxedValue<float> LTPCorr = new BoxedValue<float>(in_LTPCorr);

            int returnVal = pitch_analysis_core.silk_pitch_analysis_core_FLP(in_frame, pitch_out, lagIndex, contourIndex, LTPCorr, in_prevLag, in_search_thres1, in_search_thres2, in_Fs_kHz, in_complexity, in_nb_subfr, in_arch);

            int[] expected_pitch_out = new int[] { 0x80, 0x80, 0x80, 0x7f };
            short expected_lagIndex = 112;
            int expected_contourIndex = 9;
            float expected_LTPCorr = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4052a6U), 0);
            int expected_returnVal = 0;
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertArrayDataEquals(expected_pitch_out, pitch_out);
            Assert.AreEqual(expected_lagIndex, lagIndex.Val);
            Assert.AreEqual(expected_contourIndex, contourIndex.Val);
            Assert.AreEqual(expected_LTPCorr, LTPCorr.Val);
        }

        [TestMethod]
        public void Test_silk_pitch_analysis_core_stage2()
        {
            Pointer<float> in_frame = Helpers.WrapWithArrayPointer<float>(
            Helpers.ConvertBytesToFloatArray(new uint[] {
                0x0U, 0x0U, 0x0U, 0x0U, 0x0U, 0x0U, 0xc2b0e7b0U,
                0xc1f8661eU, 0x43107229U, 0xc3200d47U, 0xc1435bf0U, 0x430dd854U, 0xc2966cffU, 0xc0f0d650U,
                0x4230caf4U, 0xc1844af1U, 0xc1b2be5dU, 0xc2b0eca0U, 0x41d38c14U, 0x42c07e50U, 0xc3027ff4U,
                0x430e2360U, 0xc314ce23U, 0x43072b2aU, 0xc146aca8U, 0xc208b172U, 0x41c57f8cU, 0xc2067c74U,
                0x42684d97U, 0xc2a8591cU, 0xc28e9290U, 0x42b1937dU, 0x41af45d8U, 0xc2bbdc12U, 0x4211f0d2U,
                0x41e3f345U, 0x42aa4c4aU, 0xc2e4af09U, 0x4254e084U, 0xc2699da2U, 0x421ef001U, 0x42aacf98U,
                0xc309701aU, 0x42e8e95bU, 0xc258502cU, 0xc0d56c58U, 0xc1761abeU, 0x42fac25cU, 0xc310fc5eU,
                0x3f3b5c00U, 0x412b11e8U, 0x42c2018bU, 0xc0d54790U, 0xc302dcfcU, 0x42886916U, 0x418c2596U,
                0x42cc5921U, 0xc32d4e02U, 0x4263f29aU, 0x41a476f6U, 0x42261244U, 0xc09d6628U, 0x41ab1374U,
                0xc29a1623U, 0x42acbf6dU, 0xc1e0326eU, 0x41c7b271U, 0xc28602aeU, 0x4290711bU, 0x428fd14cU,
                0xc3301221U, 0x415b8290U, 0x423a01a8U, 0x42681630U, 0xc2966740U, 0xc159d966U, 0xc172ec18U,
                0x425ded8cU, 0xc28c8adaU, 0xc18f36e6U, 0x42e5fc84U, 0xc129a3c0U, 0xc0ccc550U, 0x4085c20cU,
                0x428b7ec7U, 0xc0b48d00U, 0xc1932b08U, 0xc24f06baU, 0x429f53f0U, 0xc188258cU, 0xc2af4f12U,
                0xc28aeee8U, 0x429169a8U, 0x4151c539U, 0xc2361fefU, 0x4241cf28U, 0x4244d2c0U, 0x41de8d5aU,
                0xc280c389U, 0xc251aba2U, 0x4263cfe8U, 0xc287faccU, 0x42b2f70dU, 0xc2ccff46U, 0xc1f285c4U,
                0x42b99b70U, 0x41df6da8U, 0xc25b2310U, 0x3c8ba000U, 0xc25a6f55U, 0x42e61ca4U, 0xc27d7cc2U,
                0xc1fc4b44U, 0x42c920a0U, 0xc30d794eU, 0x432c9657U, 0xc31f9c09U, 0x43377726U, 0xc3491dccU,
                0x4322f65cU, 0xc2492050U, 0x4215ec51U, 0xc1d52b86U, 0xc244677bU, 0x4224e21cU, 0x3ef72400U,
                0xc02e9cfaU, 0xc2586682U, 0x42857daaU, 0xc24a9446U, 0x42a44aaaU, 0xc3387490U, 0x43305bfdU,
                0xc329f3a9U, 0x43261d3eU, 0xc33c1eeaU, 0x43293a00U, 0xc2056f04U, 0xc1b6d090U, 0x4297a546U,
                0xc2210b6eU, 0x42e728acU, 0xc2b6e1a0U, 0xc0a7ade8U, 0x41138cbeU, 0x427f45e8U, 0xc28e7549U,
                0xc251e2d9U, 0xc1ab5ca4U, 0x42886355U, 0xc288527fU, 0x41a8e5c4U, 0xc124d6d7U, 0x42236c1aU,
                0xc0b88a90U, 0x41bd2cb1U, 0xc16115b4U, 0x4104af64U, 0xc2871a3fU, 0x42a59803U, 0xc2916030U,
                0x421f21aaU, 0xc2b994beU, 0x42e9799dU, 0xc17e2bb8U, 0x41792896U, 0x41090788U, 0xc2d9a940U,
                0x4233a468U, 0xbdca7820U, 0x426b5e61U, 0xc2841bd7U, 0x42bc5f63U, 0xc2b565cdU, 0x42868779U,
                0xc28cbff2U, 0x417d52f0U, 0x42639472U, 0xc296b246U, 0x42961f7cU, 0xc26cf5c1U, 0xc257b313U,
                0x422c6bc0U, 0x4282a643U, 0xc062a6c0U, 0xc1a4e3baU, 0xc1151d3cU, 0x4245b2f6U, 0xc2058a01U,
                0x42e281f5U, 0xc169a6d0U, 0xc2dd43daU, 0x42d52175U, 0xc28f97aeU, 0x42eacaccU, 0xc30e3d92U,
                0x41cb2b28U, 0x420752d0U, 0xc2c16ae6U, 0x4300a7d2U, 0xc29b3703U, 0x4186eb82U, 0x42602795U,
                0xc2881fa0U, 0xc228b263U, 0x4248675dU, 0xc0a9cbd0U, 0xc2756962U, 0xc107d950U, 0x42f7a9f6U,
                0xc2de4528U, 0x429ef1f3U, 0xc260b410U, 0x40f7c200U, 0x422ba40fU, 0xc1a19024U, 0x40232faaU,
                0xc2c2b3acU, 0x42d779aaU, 0xc2b45b52U, 0x42cf1cd7U, 0xc2a5b7f1U, 0x42b02222U, 0xc306b450U,
                0x41f19b20U, 0x42d4ab2aU, 0xc32cb65bU, 0x433a750dU, 0xc2eddff0U, 0x40b551d0U, 0xc2244160U,
                0x42b8a258U, 0xc1824ec0U, 0x407cdd90U, 0xc298269fU, 0x429657c9U, 0xc282ff14U, 0x42bc5448U,
                0xc10dfb78U, 0xc25eccbbU, 0x42f1441fU, 0xc2e26cf6U, 0x426ba56aU, 0xc27e0032U, 0x429ff6f1U,
                0xc1e3424eU, 0x4314538bU, 0xc3374f65U, 0x41ddc450U, 0x4296834aU, 0x415b1734U, 0xc2d197b8U,
                0x427c809aU, 0xc2aa5631U, 0x42212858U, 0x40dd64f8U, 0xc2529f21U, 0x43104845U, 0xc316db95U,
                0x42851dc7U, 0xc28ec9eaU, 0x429ebbe1U, 0xc3124af9U, 0x433deb1cU, 0xc19f4a20U, 0xbfac0120U,
                0xc20606d0U, 0xc2854e32U, 0x4262d70eU, 0x410bba32U, 0xc2721a7cU, 0x42be5feaU, 0xc28e8b38U,
                0x3e150100U, 0x42c2700eU, 0xc2c6a8bbU, 0x42045544U, 0x41147740U, 0xbf4a3080U, 0x40b700eeU,
                0x41533236U, 0xc26661f2U, 0x42e2cf60U, 0x4131f838U, 0xc29eb856U, 0x40dabcb8U, 0x420d2bc2U,
                0xc2ac068eU, 0x41c121ccU, 0xc271f87bU, 0x4316446eU, 0xc30efa36U, 0x42d2c4b7U, 0xc2cf9f98U,
                0x432196eaU, 0xc2a0a098U, 0xc2a471ddU, 0x427a9c02U, 0xc2a22e16U, 0x4303a58eU, 0xc29d9f3aU,
                0xc0521368U, 0x429c8e2aU, 0x4119f998U, 0xc300c390U, 0x4317d684U, 0xc28ec4faU, 0x426e015bU,
                0xc216d4b2U, 0xc01829d8U, 0xc27e2bb9U, 0x42a15a50U, 0xc0eca6e8U, 0xc2e2fa0bU, 0x42d5b98bU,
                0xc1a720fcU, 0x42890163U, 0xc21d5a2eU, 0x423138cbU, 0xc1e7651cU, 0xc13d1b35U, 0xc20236f2U,
                0xc1e4f2beU, 0xc1f8caeeU, 0x42cc902aU, 0xbfd7bbc0U, 0xc21a57b4U, 0xc00fcff4U, 0xc15b0366U,
                0x41a93b3eU, 0xc208b0c8U, 0x428ab266U, 0xc1e7f934U, 0xc17c33e9U, 0xc172391dU, 0x42a45cfaU,
                0xc30acfb0U, 0x425dfe38U, 0x413dc073U, 0x41fb2428U, 0xc294c03cU, 0xc20ca7c3U, 0x423da12aU,
                0x41abceb4U, 0xc0872ee0U, 0xc267262eU, 0x428daa5eU, 0x40601120U, 0x423546ccU, 0xc2e9d5c1U,
                0x42d99ac5U, 0xc2cb2ab5U, 0x429e1c84U, 0xc10d7ab8U, 0x416657bbU, 0xc2824f0eU, 0x42d44f1cU,
                0xbd9dd800U, 0xc2a5564cU, 0x42ba2622U, 0xc2871a74U, 0x42579a2aU, 0xc1c8cf58U, 0xc29fad7dU,
                0x421ff910U, 0xc2c070bfU, 0x436a401cU, 0xc2db7492U, 0x42a27505U, 0xc2d55130U, 0x433b9552U,
                0xc33876dcU, 0x424bef54U, 0x419cb388U, 0xc2c87798U, 0x419fb2fcU, 0xc200839eU, 0x42a67e32U,
                0xc270c0a0U, 0x424ab561U, 0xc2b9f218U, 0x42b0563cU, 0xc28c0b7dU, 0x41ac1144U, 0xc14b2afaU,
                0xc21ec816U, 0x426d0df1U, 0xc2afb1f0U, 0x42a1e283U, 0xc1d227d0U, 0x427d4f8dU, 0xc1dea0e4U,
                0x41f70461U, 0xc130c8d0U, 0xc165c4b3U, 0xc24bc28fU, 0x42345278U, 0x427a36beU, 0xc257d964U,
                0x4291be29U, 0xc2fde113U, 0x42c0da42U, 0xc2962bb7U, 0x42e28500U, 0xc16e3e48U, 0xc279df49U,
                0x427de426U, 0xc222361aU, 0x40113fc0U, 0xc27c920fU, 0x41cea6e4U, 0x41770b27U, 0xc19af65eU,
                0xc18853c0U, 0x418ca55bU, 0x42529f15U, 0xc1273008U, 0xc0290fc8U, 0xc28fbf76U, 0x432800bcU,
                0xc2c901ceU, 0x40dd8bf0U, 0xc201075cU, 0x42226046U, 0xc2056df8U, 0xc261c9daU, 0x42adaddeU,
                0xc29bdbd4U, 0xc0a05fd8U, 0x4257c9b0U, 0x42b72924U, 0xc2a0dba4U, 0xc27b6cd4U, 0x43433a68U,
                0xc2e95cd2U, 0x423173c2U, 0xc2d9565aU, 0x42b8a09dU, 0xc1a4bcf4U, 0x42a1c0b2U, 0xc328401cU,
                0x42b17cecU, 0xc24f700cU, 0xc094a290U, 0x419e96a4U, 0x421f00d0U, 0xc1f89450U, 0x4298c040U,
                0xc32baaf8U, 0x42eeefa8U, 0xc28c3d47U, 0x423399bcU, 0x421a87b4U, 0xc238aa25U, 0x41a5418cU,
                0xc1b746f4U, 0x425d9524U, 0xc21e167bU, 0xc189ef1cU, 0x4292b6eeU, 0xc2b78fb6U, 0x42623896U,
                0xc2287424U, 0x4275f5f3U, 0xc28a751dU, 0x42afe654U, 0xc22c4ed4U, 0xc15b6f5cU, 0xc29aeb62U,
                0x42068b0aU, 0x42010770U, 0xc01c8918U, 0xc21acdaaU, 0x428a3a5eU, 0xc2e6f844U, 0x43001ea1U,
                0xc2b4ebbbU, 0x42a8189cU, 0xc2a48558U, 0x430419b5U, 0xc22d891eU, 0x42225e2cU, 0xc1aea624U,
                0x42b59328U, 0xc31af07eU, 0x42a2fb51U, 0xc2909efdU, 0x42ddcabbU, 0xc2be2487U, 0x3e569a00U,
                0xc08f73f8U, 0xc2fa35a6U, 0x42d95be4U, 0x4152e468U, 0x41a48fdaU, 0xc2c4a28cU, 0xbf9f71c0U,
                0x42e56802U, 0xc383f1aeU, 0x467d6aaeU, 0x45d716acU, 0xc3a90940U, 0x45c0085eU, 0xc4aa0140U
            }));

            float in_LTPCorr = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            int in_prevLag = 0;
            float in_search_thres1 = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4ccd00U), 0);
            float in_search_thres2 = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ec0b714U), 0);
            int in_Fs_kHz = 12;
            int in_complexity = 0;
            int in_nb_subfr = 4;
            int in_arch = 4;

            Pointer<int> pitch_out = Pointer.Malloc<int>(4);
            BoxedValue<short> lagIndex = new BoxedValue<short>(0);
            BoxedValue<sbyte> contourIndex = new BoxedValue<sbyte>(0);
            BoxedValue<float> LTPCorr = new BoxedValue<float>(in_LTPCorr);

            int returnVal = pitch_analysis_core.silk_pitch_analysis_core_FLP(in_frame, pitch_out, lagIndex, contourIndex, LTPCorr, in_prevLag, in_search_thres1, in_search_thres2, in_Fs_kHz, in_complexity, in_nb_subfr, in_arch);

            int[] expected_pitch_out = new int[] { 0x0, 0x0, 0x0, 0x0 };
            short expected_lagIndex = 0;
            int expected_contourIndex = 0;
            float expected_LTPCorr = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            int expected_returnVal = 1;

            Assert.AreEqual(expected_returnVal, returnVal);
            Assert.IsNull(pitch_out.WriteRange);
            Assert.AreEqual(expected_lagIndex, lagIndex.Val);
            Assert.AreEqual(expected_contourIndex, contourIndex.Val);
            Assert.AreEqual(expected_LTPCorr, LTPCorr.Val);
        }

        [TestMethod]
        public void Test_silk_pitch_analysis_core_stage1()
        {
            Pointer<float> in_frame = Helpers.WrapWithArrayPointer<float>(
            Helpers.ConvertBytesToFloatArray(new uint[] {
                0x0U, 0x0U, 0x0U, 0x0U, 0x0U, 0x0U, 0x43056685U,
                0xc338b346U, 0xc1969c3cU, 0x43028d1dU, 0xc1277030U, 0xc2e1e69aU, 0x4296f550U, 0xc2a263bdU,
                0x41afa540U, 0x4261670eU, 0xc292214dU, 0x43111672U, 0xc3032ad9U, 0x4159a460U, 0xc1873edeU,
                0x4244aae3U, 0xc2f07028U, 0x433499e8U, 0x416220b8U, 0xc27e58caU, 0xc16e0138U, 0xc2a33415U,
                0x42579980U, 0x4238770bU, 0xc298f851U, 0x42c61d56U, 0xc265b020U, 0xc217324eU, 0x43042ff3U,
                0xc2da4a0fU, 0x403cf010U, 0x424e82d3U, 0xc1f327f4U, 0x41185454U, 0x41c39328U, 0xc294e229U,
                0x42e35e82U, 0x41ec689cU, 0xc2f419c6U, 0x41517338U, 0x424542d6U, 0xc2ca68c5U, 0x42103868U,
                0xc1fbd528U, 0x430332cdU, 0xc2e25cc5U, 0x42830b28U, 0xc2823122U, 0x42f19028U, 0xc2317d90U,
                0xc300c400U, 0x42ad902fU, 0xc2824ae2U, 0x42e19074U, 0xc203675aU, 0xc2503ad1U, 0x42cabaccU,
                0x40a6fd90U, 0xc31da748U, 0x4324e5feU, 0xc245ba78U, 0x40bf4a68U, 0x40f17a20U, 0xc2133dc4U,
                0xc2739c86U, 0x42bf5735U, 0x40a2cd10U, 0xc306931eU, 0x42f43fd5U, 0x3f670e40U, 0x41f3d314U,
                0xc14234c8U, 0x413e9630U, 0xc1f6de26U, 0xc1a61c08U, 0xc1c952ceU, 0xc1ccb4eaU, 0xc18ea890U,
                0x42e9f5e6U, 0x410dda90U, 0xc28464a1U, 0x4007c780U, 0xc175b548U, 0x418aec44U, 0xc182c96eU,
                0x427e8934U, 0xc1b959f4U, 0xc2136d12U, 0xc093c738U, 0x42a3588bU, 0xc308ae93U, 0x422728b0U,
                0x42562d10U, 0x4030c5d0U, 0xc27ff501U, 0xc21af6d4U, 0x425fb464U, 0x42097330U, 0xc0ff6cb8U,
                0xc26bd755U, 0x4281b4e2U, 0x41566730U, 0x41d926d0U, 0xc2df7a01U, 0x42b28af6U, 0xc296e10eU,
                0x424132acU, 0x42043ca5U, 0xc186b118U, 0xc27d12c2U, 0x42d4ec9fU, 0x40eae640U, 0xc2e11f33U,
                0x42d00fe5U, 0xc26744deU, 0x4194baa9U, 0x4161fe1eU, 0xc2d4fc7cU, 0x423a0e00U, 0xc2808502U,
                0x435b6198U, 0xc28eb310U, 0x4121b1d8U, 0xc2965fcbU, 0x43107d45U, 0xc31f5d53U, 0x4104fdb0U,
                0x42975132U, 0xc30482dcU, 0x41df87c4U, 0x41498fd8U, 0x42710514U, 0xc20bc7d8U, 0x4208288cU,
                0xc2ab5b80U, 0x428ee5f0U, 0xc21d03fbU, 0xc0942cb4U, 0x416e7dc0U, 0xc246e34aU, 0x427a9376U,
                0xc28aa758U, 0x4275be4cU, 0x40a18ec4U, 0x420b2a5cU, 0xc18fbee6U, 0x41249a94U, 0xc13122dcU,
                0xc1cb586cU, 0xc23e1f7cU, 0x4249e8d8U, 0x429948bfU, 0xc283aa10U, 0x4271d4f7U, 0xc2ec446aU,
                0x42802fe2U, 0xc1e825e8U, 0x42a67e1aU, 0x41400198U, 0xc2c4505dU, 0x427fc340U, 0xc1d8f16eU,
                0xc1b47e13U, 0xc20ea6d6U, 0x41adad40U, 0x41f1c283U, 0xc18f1cf0U, 0xc1886544U, 0x41b315fcU,
                0x4254eaecU, 0xc15c9618U, 0xc170901cU, 0xc2926a96U, 0x432242c0U, 0xc2a31947U, 0xc21d86b3U,
                0x40a3c080U, 0x41a6eb12U, 0xc1b8ee5bU, 0xc24b507bU, 0x42ba85b5U, 0xc284a02fU, 0xc1c7783aU,
                0x42af096eU, 0x42a382baU, 0xc2c1ee18U, 0xc29e2082U, 0x434ec8b9U, 0xc2e905c2U, 0xbecbad58U,
                0xc270312cU, 0x424b515eU, 0x4173feecU, 0x428b515eU, 0xc3268118U, 0x428016baU, 0xc0c9a624U,
                0xc20dbbe3U, 0x425cd7e9U, 0x42281fd5U, 0xc243b0dbU, 0x429736c0U, 0xc329769bU, 0x42b51de2U,
                0xc135eb3cU, 0x40582facU, 0x4292f103U, 0xc27736d4U, 0xbfc2f238U, 0xbfeb4890U, 0x421f8ee0U,
                0xc1f00646U, 0xc1df9372U, 0x42a25be9U, 0xc2b9811cU, 0x421b6e4aU, 0xc10a8e82U, 0x42083843U,
                0xc2498d37U, 0x429416e8U, 0xc1f179f8U, 0xc2241ebeU, 0xc26d4a77U, 0x4209217aU, 0x425a5178U,
                0xc01ff198U, 0xc22828b7U, 0x4286673aU, 0xc2e40ddcU, 0x42dfa2a8U, 0xc2474a71U, 0x4217e833U,
                0xc23eebdeU, 0x42ccd8d1U, 0xc1d096b8U, 0x407bc230U, 0xc1207c58U, 0x4287f302U, 0xc31b2966U,
                0x4275fdecU, 0xc1e6d888U, 0x429e0e18U, 0xc26c9020U, 0xc1f3608bU, 0x4191977eU, 0xc2fda798U,
                0x42ecb58cU, 0x42732967U, 0xc18b3730U, 0xc2b19684U, 0xc1433be0U, 0x4300a706U, 0xc380ac95U,
                0x467d2dcdU, 0x45ca4060U, 0xc5b66880U, 0x45638a08U, 0xc56ec7f8U, 0x4509f5ccU, 0xc52a5862U,
                0x44b6ea23U, 0xc4ff2d48U, 0x44644f53U, 0xc4d8c8dcU, 0x439127d8U, 0xc4a793b4U, 0xc2e68a80U,
                0xc492449cU, 0xc34fc3e0U, 0xc483272eU, 0xc39a1a28U, 0xc47f5098U, 0xc3d69cd8U, 0xc455b9d0U,
                0xc3b5c2c0U, 0xc4492630U, 0xc3ea77f8U, 0xc42ca86cU, 0xc41407b8U, 0xc3f69f08U, 0xc3f88c80U,
                0xc41fd428U, 0xc3cc8cd0U, 0xc40549a8U, 0xc401f7f8U, 0xc3c6b520U, 0xc3ba99a0U, 0xc40a6ff4U,
                0xc3b94b10U, 0xc3b46aa0U, 0xc38e6770U, 0xc3f05e78U, 0xc3bb3a00U, 0xc39e7580U, 0xc3a0663cU,
                0xc3ab78e0U, 0xc2a54ed0U, 0xc3c65580U, 0xc38e6518U, 0xc33424a8U, 0xc34c4ee8U, 0xc3a0fc04U,
                0xc2e81aa0U, 0xc35f22d8U, 0xc30849a0U, 0xc3b9141cU, 0xc224df80U, 0xc309ee90U, 0xc3272954U,
                0xc0f17780U, 0xc36b9320U, 0x41e28100U, 0xc36fe6e4U, 0xc19d7e80U, 0xc2641740U, 0xc28d15f8U,
                0xc1f16580U, 0xc23f4fa8U, 0x41a0fb00U, 0xc36cbe16U, 0x41911470U, 0xc020c180U, 0xc1d25d60U,
                0x423c66b0U, 0xc2949fe2U, 0x41738570U, 0xc1a10fa8U, 0x42b9047dU, 0xc25d00faU, 0x413250c8U,
                0xc215f452U, 0x41a0ba12U, 0x4302581aU, 0xc1f07e68U, 0x42303bbcU, 0x42cd4e59U, 0xc180ff70U,
                0x428b1560U, 0x42993f90U, 0x42e876faU, 0xc1f9f670U, 0x42bca0ccU, 0x4306ee5aU, 0x41472980U,
                0x428094fcU, 0x42d9ca74U, 0x43014a2aU, 0xc38ff5f5U, 0x43f6f5c7U, 0xc67a30fbU, 0xc5cd2440U,
                0x45bb4e08U, 0xc55eede8U, 0x457844bcU, 0xc50ddf78U, 0x452e1b52U, 0xc4afb64cU, 0x450c6f39U,
                0xc439a602U, 0x44d910e6U, 0xc37c7998U, 0x44b83d38U, 0x42f8a880U, 0x449f55a6U, 0x43aef440U,
                0x447d3688U, 0x43f596e8U, 0x448dde72U, 0x43ed5558U, 0x4465fc2cU, 0x4401b2d4U, 0x44380d9cU,
                0x44289050U, 0x44202808U, 0x44150be8U, 0x442fd25cU, 0x44032634U, 0x4437b374U, 0x43e168a8U,
                0x44107cc0U, 0x441d1e78U, 0x441023bcU, 0x440504c0U, 0x43a0c080U, 0x44058cf8U, 0x44113a5cU,
                0x439a54c0U, 0x43e19920U, 0x43d93d90U, 0x43cacb78U, 0x43aa8870U, 0x4385e980U, 0x43bcec24U,
                0x438a063cU, 0x43796e48U, 0x43d6a9f0U, 0x438c1c4cU, 0x431167a8U, 0x43c48e00U, 0x434e7780U,
                0x436d3b98U, 0x438dd320U, 0x42d47410U, 0x439893b0U, 0x42fbf370U, 0x42c52160U, 0x4321d7d4U,
                0x43422da0U, 0x412aa580U, 0x438d83c4U, 0xc2237640U, 0x43581ef8U, 0x43047330U, 0xc2a12288U,
                0x43674810U, 0xc25e3300U, 0x42a78ae4U, 0x42b98018U, 0x427f0eb0U, 0x4282a1e0U, 0xc2997c64U,
                0x42e0a3ccU, 0xc139d920U, 0x431da0b4U, 0xc31c282aU, 0x42208716U, 0x426ba8e6U, 0xc283c6d8U,
                0xc1019194U, 0xc2224aeeU, 0xc1fd8980U, 0xc2fd9695U, 0x42914be0U, 0x4195c4a0U, 0xc2cc909cU,
                0xc29979ecU, 0xc1236100U, 0x4198b080U, 0xc35408f4U, 0xbe91e000U, 0xc1cdbf70U, 0xc34663a0U,
                0xc284525cU, 0x4307c1faU, 0xc3880da0U, 0x467794ceU, 0x45d1c48cU, 0xc5bb5a6cU, 0x45627660U,
                0xc57528a8U, 0x450a400aU, 0xc53a8f3aU, 0x44cea298U, 0xc50d9dbaU, 0x4439ecfcU, 0xc4da8e91U,
                0x434f3788U, 0xc4bb02ebU, 0xc30daef0U, 0xc49d1da4U, 0xc3880020U, 0xc496c494U, 0xc3b8f4a8U,
                0xc483b9b0U, 0xc3d59a00U, 0xc4703314U, 0xc4074434U, 0xc4634f14U, 0xc3d4a320U, 0xc4632278U,
                0xc3dbd1e0U, 0xc4586a08U, 0xc3f5cc30U, 0xc42af5b8U, 0xc3fd9640U, 0xc402d3c8U, 0xc4314b84U,
                0xc3b69e50U, 0xc4207f24U, 0xc3b8a1a8U, 0xc3f45918U, 0xc3da9fd0U, 0xc4013e08U, 0xc3b9ab80U,
                0xc3f9b478U, 0xc3b5fdc8U, 0xc39b2518U, 0xc3d43f60U, 0xc3ab3918U, 0xc3af79ecU, 0xc351f2e0U,
                0xc3996944U, 0xc3a9cee0U, 0xc371c260U, 0xc3880ec4U, 0xc36f2320U, 0xc315b1d8U, 0xc3731aa0U
            }));

            float in_LTPCorr = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            int in_prevLag = 0;
            float in_search_thres1 = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4ccd00U), 0);
            float in_search_thres2 = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ec0b714U), 0);
            int in_Fs_kHz = 12;
            int in_complexity = 0;
            int in_nb_subfr = 4;
            int in_arch = 4;

            Pointer<int> pitch_out = Pointer.Malloc<int>(4);
            BoxedValue<short> lagIndex = new BoxedValue<short>(0);
            BoxedValue<sbyte> contourIndex = new BoxedValue<sbyte>(0);
            BoxedValue<float> LTPCorr = new BoxedValue<float>(in_LTPCorr);

            int returnVal = pitch_analysis_core.silk_pitch_analysis_core_FLP(in_frame, pitch_out, lagIndex, contourIndex, LTPCorr, in_prevLag, in_search_thres1, in_search_thres2, in_Fs_kHz, in_complexity, in_nb_subfr, in_arch);

            int[] expected_pitch_out = new int[] { 0x0, 0x0, 0x0, 0x0 };
            short expected_lagIndex = 0;
            int expected_contourIndex = 0;
            float expected_LTPCorr = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            int expected_returnVal = 1;

            Assert.AreEqual(expected_returnVal, returnVal);
            Assert.IsNull(pitch_out.WriteRange);
            Assert.AreEqual(expected_lagIndex, lagIndex.Val);
            Assert.AreEqual(expected_contourIndex, contourIndex.Val);
            Assert.AreEqual(expected_LTPCorr, LTPCorr.Val);
        }
    }
}
