using Concentus.Common;
using Concentus.Common.CPlusPlus;
using Concentus.Silk;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace NailTests
{
    [TestClass]
    public class TestShellCoder
    {
        [TestMethod]
        public void Test_silk_shell_encoder_0()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 105;
            through_psRangeEnc.offs = 0x8U;
            through_psRangeEnc.rng = 0x42a1e900U;
            through_psRangeEnc.val = 0x18f30000U;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 166;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,0,0,1,2,0,0,0,0,1,0,0,
                1,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 113;
            expected_psRangeEnc.offs = 0x9U;
            expected_psRangeEnc.rng = 0x977b3aU;
            expected_psRangeEnc.val = 0x1406c91dU;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 119;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_1()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 177;
            through_psRangeEnc.offs = 0x10U;
            through_psRangeEnc.rng = 0x1ebb6e8U;
            through_psRangeEnc.val = 0x1b6f36a8U;
            through_psRangeEnc.ext = 0x1U;
            through_psRangeEnc.rem = 116;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,1,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 185;
            expected_psRangeEnc.offs = 0x12U;
            expected_psRangeEnc.rng = 0x1f35c300U;
            expected_psRangeEnc.val = 0x7c50a14eU;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 57;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_2()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 185;
            through_psRangeEnc.offs = 0x12U;
            through_psRangeEnc.rng = 0x1f35c300U;
            through_psRangeEnc.val = 0x7c50a14eU;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 57;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,1,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,
                1,0,0,0,1,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 185;
            expected_psRangeEnc.offs = 0x12U;
            expected_psRangeEnc.rng = 0x1fb2180U;
            expected_psRangeEnc.val = 0x958506cfU;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 57;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_3()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 185;
            through_psRangeEnc.offs = 0x12U;
            through_psRangeEnc.rng = 0x1fb2180U;
            through_psRangeEnc.val = 0x958506cfU;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 57;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,0,0,0,0,0,0,0,0,1,0,0,
                0,1,0,0,0,0,0,0,0,0,0,1,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 193;
            expected_psRangeEnc.offs = 0x13U;
            expected_psRangeEnc.rng = 0x3f90400U;
            expected_psRangeEnc.val = 0x2ffb8d92U;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 43;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_4()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 193;
            through_psRangeEnc.offs = 0x13U;
            through_psRangeEnc.rng = 0x3f90400U;
            through_psRangeEnc.val = 0x2ffb8d92U;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 43;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,0,0,0,0,0,0,1,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,43,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 201;
            expected_psRangeEnc.offs = 0x14U;
            expected_psRangeEnc.rng = 0x3f8d1e00U;
            expected_psRangeEnc.val = 0xb0906c00U;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 98;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_5()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,40,20,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 97;
            through_psRangeEnc.offs = 0x7U;
            through_psRangeEnc.rng = 0x6354b600U;
            through_psRangeEnc.val = 0x18299c00U;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 27;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,1,0,0,0,0,0,1,0,0,0,0,0,
                0,0,1,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,20,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 105;
            expected_psRangeEnc.offs = 0x8U;
            expected_psRangeEnc.rng = 0x2e3d8580U;
            expected_psRangeEnc.val = 0xed93f00U;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 186;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_6()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,20,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 105;
            through_psRangeEnc.offs = 0x8U;
            through_psRangeEnc.rng = 0x2e3d8580U;
            through_psRangeEnc.val = 0xed93f00U;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 186;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,0,1,0,0,0,0,0,1,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 113;
            expected_psRangeEnc.offs = 0x9U;
            expected_psRangeEnc.rng = 0x68331000U;
            expected_psRangeEnc.val = 0x14709900U;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 80;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_7()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 113;
            through_psRangeEnc.offs = 0x9U;
            through_psRangeEnc.rng = 0x68331000U;
            through_psRangeEnc.val = 0x14709900U;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 80;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,0,0,0,0,1,0,0,0,0,0,0,
                1,0,0,0,0,1,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 113;
            expected_psRangeEnc.offs = 0x9U;
            expected_psRangeEnc.rng = 0xe394c3U;
            expected_psRangeEnc.val = 0x3418a12dU;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 80;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_8()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 113;
            through_psRangeEnc.offs = 0x9U;
            through_psRangeEnc.rng = 0xe394c3U;
            through_psRangeEnc.val = 0x3418a12dU;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 80;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,1,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,
                1,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 121;
            expected_psRangeEnc.offs = 0xaU;
            expected_psRangeEnc.rng = 0xe71eb00U;
            expected_psRangeEnc.val = 0x506bb65bU;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 105;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_encoder_9()
        {
            ec_ctx through_psRangeEnc = new ec_ctx();
            through_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_psRangeEnc.storage = 0x4fbU;
            through_psRangeEnc.end_offs = 0x0U;
            through_psRangeEnc.end_window = 0x0U;
            through_psRangeEnc.nend_bits = 0;
            through_psRangeEnc.nbits_total = 121;
            through_psRangeEnc.offs = 0xaU;
            through_psRangeEnc.rng = 0xe71eb00U;
            through_psRangeEnc.val = 0x506bb65bU;
            through_psRangeEnc.ext = 0x0U;
            through_psRangeEnc.rem = 105;
            through_psRangeEnc.error = 0;
            Pointer<int> in_pulses0 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0,0,0,0,0,0,0,0,0,0,1,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0});
            ec_ctx expected_psRangeEnc = new ec_ctx();
            expected_psRangeEnc.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_psRangeEnc.storage = 0x4fbU;
            expected_psRangeEnc.end_offs = 0x0U;
            expected_psRangeEnc.end_window = 0x0U;
            expected_psRangeEnc.nend_bits = 0;
            expected_psRangeEnc.nbits_total = 121;
            expected_psRangeEnc.offs = 0xaU;
            expected_psRangeEnc.rng = 0xe37e80U;
            expected_psRangeEnc.val = 0x54d62261U;
            expected_psRangeEnc.ext = 0x0U;
            expected_psRangeEnc.rem = 105;
            expected_psRangeEnc.error = 0;
            ShellCoder.silk_shell_encoder(through_psRangeEnc, in_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeEnc.buf, through_psRangeEnc.buf, (int)through_psRangeEnc.storage);
            Assert.AreEqual(expected_psRangeEnc.end_offs, through_psRangeEnc.end_offs);
            Assert.AreEqual(expected_psRangeEnc.end_window, through_psRangeEnc.end_window);
            Assert.AreEqual(expected_psRangeEnc.nend_bits, through_psRangeEnc.nend_bits);
            Assert.AreEqual(expected_psRangeEnc.nbits_total, through_psRangeEnc.nbits_total);
            Assert.AreEqual(expected_psRangeEnc.offs, through_psRangeEnc.offs);
            Assert.AreEqual(expected_psRangeEnc.rng, through_psRangeEnc.rng);
            Assert.AreEqual(expected_psRangeEnc.val, through_psRangeEnc.val);
            Assert.AreEqual(expected_psRangeEnc.ext, through_psRangeEnc.ext);
            Assert.AreEqual(expected_psRangeEnc.rem, through_psRangeEnc.rem);
            Assert.AreEqual(expected_psRangeEnc.error, through_psRangeEnc.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_0()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_psRangeDec.storage = 0x16U;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 105;
            through_psRangeDec.offs = 0xdU;
            through_psRangeDec.rng = 0x42a1e900U;
            through_psRangeDec.val = 0x20008e72U;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 26;
            through_psRangeDec.error = 0;
            int in_pulses4 = 5;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_psRangeDec.storage = 0x16U;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 113;
            expected_psRangeDec.offs = 0xeU;
            expected_psRangeDec.rng = 0x977b3aU;
            expected_psRangeDec.val = 0x43b72aU;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 88;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_1()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_psRangeDec.storage = 0x16U;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 177;
            through_psRangeDec.offs = 0x16U;
            through_psRangeDec.rng = 0x1ebb6e8U;
            through_psRangeDec.val = 0x453bcfU;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 128;
            through_psRangeDec.error = 0;
            int in_pulses4 = 1;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_psRangeDec.storage = 0x16U;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 185;
            expected_psRangeDec.offs = 0x16U;
            expected_psRangeDec.rng = 0x1f35c300U;
            expected_psRangeDec.val = 0x5d4a44dU;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 0;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_2()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_psRangeDec.storage = 0x16U;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 185;
            through_psRangeDec.offs = 0x16U;
            through_psRangeDec.rng = 0x1f35c300U;
            through_psRangeDec.val = 0x5d4a44dU;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 0;
            through_psRangeDec.error = 0;
            int in_pulses4 = 1;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_psRangeDec.storage = 0x16U;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 185;
            expected_psRangeDec.offs = 0x16U;
            expected_psRangeDec.rng = 0x1fb2180U;
            expected_psRangeDec.val = 0x1ce684eU;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 0;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_3()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_psRangeDec.storage = 0x16U;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 185;
            through_psRangeDec.offs = 0x16U;
            through_psRangeDec.rng = 0x1fb2180U;
            through_psRangeDec.val = 0x1ce684eU;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 0;
            through_psRangeDec.error = 0;
            int in_pulses4 = 2;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_psRangeDec.storage = 0x16U;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 193;
            expected_psRangeDec.offs = 0x16U;
            expected_psRangeDec.rng = 0x3f90400U;
            expected_psRangeDec.val = 0x2349191U;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 0;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_4()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_psRangeDec.storage = 0x16U;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 193;
            through_psRangeDec.offs = 0x16U;
            through_psRangeDec.rng = 0x3f90400U;
            through_psRangeDec.val = 0x2349191U;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 0;
            through_psRangeDec.error = 0;
            int in_pulses4 = 1;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_psRangeDec.storage = 0x16U;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 201;
            expected_psRangeDec.offs = 0x16U;
            expected_psRangeDec.rng = 0x3f8d1e00U;
            expected_psRangeDec.val = 0x301d89ffU;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 0;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_5()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            through_psRangeDec.storage = 0x1bU;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 97;
            through_psRangeDec.offs = 0xcU;
            through_psRangeDec.rng = 0x6354b600U;
            through_psRangeDec.val = 0x1e561d2aU;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 171;
            through_psRangeDec.error = 0;
            int in_pulses4 = 3;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            expected_psRangeDec.storage = 0x1bU;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 105;
            expected_psRangeDec.offs = 0xdU;
            expected_psRangeDec.rng = 0x2e3d8580U;
            expected_psRangeDec.val = 0x14e1eef0U;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 30;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_6()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            through_psRangeDec.storage = 0x1bU;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 105;
            through_psRangeDec.offs = 0xdU;
            through_psRangeDec.rng = 0x2e3d8580U;
            through_psRangeDec.val = 0x14e1eef0U;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 30;
            through_psRangeDec.error = 0;
            int in_pulses4 = 2;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            expected_psRangeDec.storage = 0x1bU;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 113;
            expected_psRangeDec.offs = 0xeU;
            expected_psRangeDec.rng = 0x68331000U;
            expected_psRangeDec.val = 0x47ce1992U;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 218;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_7()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            through_psRangeDec.storage = 0x1bU;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 113;
            through_psRangeDec.offs = 0xeU;
            through_psRangeDec.rng = 0x68331000U;
            through_psRangeDec.val = 0x47ce1992U;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 218;
            through_psRangeDec.error = 0;
            int in_pulses4 = 2;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            expected_psRangeDec.storage = 0x1bU;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 113;
            expected_psRangeDec.offs = 0xeU;
            expected_psRangeDec.rng = 0xe394c3U;
            expected_psRangeDec.val = 0x26a682U;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 218;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_8()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            through_psRangeDec.storage = 0x1bU;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 113;
            through_psRangeDec.offs = 0xeU;
            through_psRangeDec.rng = 0xe394c3U;
            through_psRangeDec.val = 0x26a682U;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 218;
            through_psRangeDec.error = 0;
            int in_pulses4 = 1;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            expected_psRangeDec.storage = 0x1bU;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 121;
            expected_psRangeDec.offs = 0xfU;
            expected_psRangeDec.rng = 0xe71eb00U;
            expected_psRangeDec.val = 0x94e340bU;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 159;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_9()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            through_psRangeDec.storage = 0x1bU;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 121;
            through_psRangeDec.offs = 0xfU;
            through_psRangeDec.rng = 0xe71eb00U;
            through_psRangeDec.val = 0x94e340bU;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 159;
            through_psRangeDec.error = 0;
            int in_pulses4 = 1;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            expected_psRangeDec.storage = 0x1bU;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 121;
            expected_psRangeDec.offs = 0xfU;
            expected_psRangeDec.rng = 0xe37e80U;
            expected_psRangeDec.val = 0x2a3391U;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 159;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }

        [TestMethod]
        public void Test_silk_shell_decoder_10()
        {
            ec_ctx through_psRangeDec = new ec_ctx();
            through_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            through_psRangeDec.storage = 0x1bU;
            through_psRangeDec.end_offs = 0x0U;
            through_psRangeDec.end_window = 0x0U;
            through_psRangeDec.nend_bits = 0;
            through_psRangeDec.nbits_total = 121;
            through_psRangeDec.offs = 0xfU;
            through_psRangeDec.rng = 0xe37e80U;
            through_psRangeDec.val = 0x2a3391U;
            through_psRangeDec.ext = 0xccccccccU;
            through_psRangeDec.rem = 159;
            through_psRangeDec.error = 0;
            int in_pulses4 = 1;
            Pointer<short> through_pulses0 = Pointer.Malloc<short>(16);
            short[] expected_pulses0 =
            new short[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            ec_ctx expected_psRangeDec = new ec_ctx();
            expected_psRangeDec.buf = new Pointer<byte>(new byte[] { 30, 39, 36, 229, 234, 232, 107, 27, 186, 80, 105, 171, 30, 218, 159, 198, 195, 224, 213, 26, 16, 102, 194, 248, 136, 222, 217 });
            expected_psRangeDec.storage = 0x1bU;
            expected_psRangeDec.end_offs = 0x0U;
            expected_psRangeDec.end_window = 0x0U;
            expected_psRangeDec.nend_bits = 0;
            expected_psRangeDec.nbits_total = 129;
            expected_psRangeDec.offs = 0x10U;
            expected_psRangeDec.rng = 0xe708580U;
            expected_psRangeDec.val = 0xcde1919U;
            expected_psRangeDec.ext = 0xccccccccU;
            expected_psRangeDec.rem = 198;
            expected_psRangeDec.error = 0;
            ShellCoder.silk_shell_decoder(through_pulses0, through_psRangeDec, in_pulses4);
            Helpers.AssertArrayDataEquals(expected_pulses0, through_pulses0);
            Helpers.AssertArrayDataEquals(expected_psRangeDec.buf, through_psRangeDec.buf, (int)through_psRangeDec.storage);
            Assert.AreEqual(expected_psRangeDec.end_offs, through_psRangeDec.end_offs);
            Assert.AreEqual(expected_psRangeDec.end_window, through_psRangeDec.end_window);
            Assert.AreEqual(expected_psRangeDec.nend_bits, through_psRangeDec.nend_bits);
            Assert.AreEqual(expected_psRangeDec.nbits_total, through_psRangeDec.nbits_total);
            Assert.AreEqual(expected_psRangeDec.offs, through_psRangeDec.offs);
            Assert.AreEqual(expected_psRangeDec.rng, through_psRangeDec.rng);
            Assert.AreEqual(expected_psRangeDec.val, through_psRangeDec.val);
            Assert.AreEqual(expected_psRangeDec.ext, through_psRangeDec.ext);
            Assert.AreEqual(expected_psRangeDec.rem, through_psRangeDec.rem);
            Assert.AreEqual(expected_psRangeDec.error, through_psRangeDec.error);
        }
    }
}
