using Concentus.Celt;
using Concentus.Celt.Structs;
using Concentus.Common;
using Concentus.Common.CPlusPlus;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NailTests
{
    [TestClass]
    public class TestCeltEncodeFrame
    {
        [TestMethod]   
        public void Test_celt_encode_with_ec_0()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 19;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x0U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 1;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 0;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 0;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { 0, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 0;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 0;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 255, 254 });
            expected_enc.storage = 0x2U;
            expected_enc.end_offs = 0x0U;
            expected_enc.end_window = 0x0U;
            expected_enc.nend_bits = 0;
            expected_enc.nbits_total = 41;
            expected_enc.offs = 0x2U;
            expected_enc.rng = 0x1000000U;
            expected_enc.val = 0x7f000000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 2;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_1()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 17;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 12;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x1000000U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 200;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 1;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 1;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { 0, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 1;
            through_st.overlap_max = 0;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = -31;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0});
            through_st.oldBandE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,0,0,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,7616,7639,18432,18391,22587,22571,23639,23754,23392,
23531,22581,22706,21524,21535,20296,20293,19168,19141,18058,17883,16839,16717,15783,15770,14802,14825,
13882,13772,12880,12670,11942,11766,11150,10973,10298,10182,9476,9425,8773,8743,8041,8105,7253,
7418,6660,6772,6191,6223,5633,5721,5120,5214,4772,4675,4219,4144,3629,3667,3075,3144,
2542,2627,2232,2256,2005,1941,1655,1580,1293,1226,918,956,591,673,337,389,2,
82,-191,-340,-371,-588,-649,-653,-915,-779,-1117,-978,-1315,-1182,-1489,-1456,-1624,-1654,
-1763,-1727});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 1,255,254,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 120,21,112,125,161,89,143,186,240,63,170,103,152,199,94,103,216,188,134,114,34,28,63,105,130,49,95,77,86,234,147,21,101,
176,15,250,15,170,79,234,250,176,250,250});
            expected_enc.storage = 0x2cU;
            expected_enc.end_offs = 0x13U;
            expected_enc.end_window = 0x2315f4dU;
            expected_enc.nend_bits = 26;
            expected_enc.nbits_total = 379;
            expected_enc.offs = 0x19U;
            expected_enc.rng = 0x51f1100U;
            expected_enc.val = 0x3ed3cf00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 44;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_2()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 13;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x51f1100U;
            through_st.spread_decision = 0;
            through_st.delayedIntra = 200;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 2;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 2;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { -6138105, -6012767 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 2;
            through_st.overlap_max = 23754;
            through_st.stereo_saving = 64;
            through_st.intensity = 17;
            through_st.energy_mask = null;
            through_st.spec_avg = 26;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,31195136,48981416,28343040,18185881,13511499,11049604,
9543730,8193920,7849067,7229780,6101360,6020085,5678505,5325659,4424562,4071102,4092835,3360490,2959922,
2942330,2391640,1712542,2027134,2170714,1518028,1359527,1720192,666710,175409,-39617,-293964,291982,
441493,-201778,-465961,-741613,-775395,-677288,-1165115,-789299,-854625,-1366621,-1488265,-1389545,-1497264,
-1520607,-1467764,-1567089,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,31289344,48733403,28420251,
18712627,13680456,11077659,9153583,8143334,7748920,6606984,6210933,6391595,5817974,4795022,3947381,4081348,
3980609,3501601,3154895,2997013,2758233,2165558,1911418,1911844,1767064,1438168,995608,697228,592178,
110706,-186037,94348,95790,-286154,-479271,-352696,-571825,-749789,-1018480,-1678133,-1224695,-627492,
-917282,-1293702,-1436442,-1848495,-1705538,-1315184});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,31195136,48981416,28343040,18185881,13511499,11049604,9543730,8193920,7849067,7229780,6101360,6020085,
5678505,5325659,4424562,4071102,4092835,3360490,2959922,2942330,2391640,1712542,2027134,2170714,1518028,
1359527,1720192,666710,175409,-39617,-293964,291982,441493,-201778,-465961,-741613,-775395,-677288,
-1165115,-789299,-854625,-1366621,-1488265,-1389545,-1497264,-1520607,-1467764,-1567089,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,31289344,48733403,
28420251,18712627,13680456,11077659,9153583,8143334,7748920,6606984,6210933,6391595,5817974,4795022,3947381,
4081348,3980609,3501601,3154895,2997013,2758233,2165558,1911418,1911844,1767064,1438168,995608,697228,
592178,110706,-186037,94348,95790,-286154,-479271,-352696,-571825,-749789,-1018480,-1678133,-1224695,
-627492,-917282,-1293702,-1436442,-1848495,-1705538,-1315184});
            through_st.oldBandE = new Pointer<int>(new int[] { 2176,2125,1869,-947,1818,3149,3763,3866,3610,2586,1971,3405,3610,2586,4019,3098,3610,
0,0,0,0,2176,2125,1869,-947,1818,2893,3763,3866,3610,2842,1971,3661,3610,
2586,4019,3098,3610,0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { 2176,2125,1869,-947,1818,3149,3763,3866,3610,2586,1971,3405,3610,2586,4019,3098,3610,
-28672,-28672,-28672,-28672,2176,2125,1869,-947,1818,2893,3763,3866,3610,2842,1971,3661,3610,
2586,4019,3098,3610,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -1919,-1945,-2141,-2221,-2308,-2279,-2460,-2384,-2615,-2549,-2709,-2619,-2822,-2721,-2850,-2775,-2843,
-2775,-2853,-2927,-2847,-3032,-2956,-3030,-3076,-3156,-3113,-3259,-3187,-3261,-3388,-3304,-3534,-3387,
-3607,-3464,-3573,-3454,-3597,-3445,-3693,-3590,-3753,-3698,-3863,-3786,-3888,-3838,-3847,-3838,-3843,
-3826,-3945,-3849,-4003,-3937,-4054,-4048,-4095,-4138,-3955,-4107,-3756,-4012,-3755,-3887,-3873,-3788,
-3984,-3773,-3993,-3865,-3897,-3907,-3908,-3908,-3897,-3947,-3815,-3989,-3772,-4069,-3823,-4032,-3832,
-3990,-3796,-3871,-3806,-3766,-3830,-3844,-3876,-3875,-3850,-3869,-3834,-3874,-3824,-3838,-3701,-3800,
-3725,-3763,-3805,-3757,-3766,-3680,-3723,-3608,-3694,-3669,-3587,-3756,-3509,-3753,-3533,-3677,-3603,
-3561,-3541,-3492,-3490,-3568,-3608,-3631,-3577,-3640,-3614,-3621,-3613,-3659,-3507,-3613,-3485,-3452,
-3411,-3300,-3457,-3277,-3541,-3311,-3521,-3318,-3455,-3392,-3335,-3362,-3282,-3325,-3236,-3375,-3279,
-3287,-3319,-3225,-3148,-3330,-3015,-3366,-3056,-3215,-3114,-3025,-3122,-3036,-3156,-3047,-3152,-3022,
-3051,-3040,-2951,-3027,-2913,-2990,-2893,-2922,-2865,-2902,-2925,-2910,-2975,-2975,-2863,-2934,-2752,
-2822,-2698,-2855,-2649,-2843,-2683,-2742,-2693,-2708,-2664,-2653,-2682,-2661,-2696,-2795,-2682,-2749,
-2663,-2541,-2563,-2417,-2422,-2431,-2333,-2452,-2253,-2398,-2360,-2325,-2437,-2290,-2376,-2363,-2309,
-2433,-2296,-2405,-2294,-2300,-2336,-2245,-2519,-2321,-2594,-2332,-2508,-2270,-2365,-2186,-2184,-2115,
-2145,-2186});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 120,21,112,125,161,89,143,186,240,63,170,103,152,199,94,103,216,188,134,114,34,28,63,105,130,49,95,77,86,234,147,21,101,
176,15,250,15,170,79,234,250,176,250,250,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 120,48,148,45,41,81,156,33,66,30,200,82,99,39,16,87,64,177,85,124,238,104,235,171,5,192,12,204,50,196,28,93,41,
188,231,189,205,237,17,174,17,34,204});
            expected_enc.storage = 0x2bU;
            expected_enc.end_offs = 0x12U;
            expected_enc.end_window = 0x1c0U;
            expected_enc.nend_bits = 9;
            expected_enc.nbits_total = 370;
            expected_enc.offs = 0x19U;
            expected_enc.rng = 0x6ede500U;
            expected_enc.val = 0xaebf00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 43;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_3()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 21;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x6ede500U;
            through_st.spread_decision = 0;
            through_st.delayedIntra = 156;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 3;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 3;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { -7468086, -7610833 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 3;
            through_st.overlap_max = 4138;
            through_st.stereo_saving = 128;
            through_st.intensity = 13;
            through_st.energy_mask = null;
            through_st.spec_avg = 87;
            through_st.in_mem = new Pointer<int>(new int[] { -1722119,-2088297,-1999408,-2040569,-2146242,-1991614,-2127189,-1848454,-1722296,-1787628,-1728235,-2195589,-2307612,
-2041369,-2215653,-2781309,-2679518,-2470209,-2076786,-2293465,-2603122,-2514646,-2756309,-2475730,-2220754,-2347116,
-2778835,-2661277,-2668239,-2658612,-1942425,-1614749,-2303496,-2790306,-2834130,-2484534,-2059983,-2439275,-2355921,
-2058347,-2167712,-2526318,-2385619,-2206829,-2373127,-2436615,-2541472,-2274821,-2299807,-2314553,-1845562,-2372105,
-2616226,-2177952,-2137608,-2168534,-1831229,-1884275,-2254145,-2457306,-1959641,-1966605,-2627496,-2089689,-2349171,
-2216255,-1785560,-2064501,-1837992,-2284049,-2467958,-2093581,-1892878,-1631145,-1831852,-1827962,-2164245,-2178375,
-1338694,-1389284,-2020276,-2115098,-1945931,-2057342,-1922583,-1522814,-1464858,-1657372,-1707754,-1662698,-2005944,
-2001846,-1369013,-1304299,-1469576,-1456879,-1766743,-1689328,-1535727,-1710423,-1705097,-1599011,-1569929,-1226480,
-997107,-1123472,-1105656,-1822458,-1765317,-1247375,-1185323,-1365343,-1402413,-1581408,-2184748,-1854810,-1241432,
-955124,-711620,-1182051,-1953953,-2325455,-1602094,-1830240,-2140510,-1852761,-2026840,-1892898,-1704890,-2327482,
-2228355,-1854593,-2377652,-2360855,-2010440,-2179604,-2369863,-2396280,-2087235,-2085187,-2710441,-2647974,-2632406,
-2539015,-2357971,-2308819,-2444806,-2725177,-2873450,-2855630,-2415307,-2134118,-1952872,-1982571,-2265812,-2694868,
-2546591,-2404459,-2560721,-2596970,-2778421,-2348339,-2305128,-1963932,-1948165,-2633224,-2488633,-2356127,-2397496,
-2232632,-2202323,-2183073,-2287317,-1992814,-1965988,-2466521,-2610493,-2295304,-1994453,-1783920,-1905165,-2456693,
-2450138,-2267659,-2158501,-2380299,-2059582,-1560280,-1498230,-1933229,-2152570,-2062867,-2341600,-1961080,-1913976,
-2247596,-1713067,-1765498,-2411439,-2193324,-1449490,-1196975,-1903540,-1910298,-1769600,-1930369,-1814452,-1708161,
-1558453,-1713283,-1815684,-2054071,-1659829,-1343824,-1868934,-1704888,-1332972,-1545352,-1438447,-1662704,-2183715,
-1528762,-836948,-1053222,-1542288,-1579561,-1285263,-1174263,-1285061,-1705926,-1738488,-1380086,-1047491,-1187782,
-1690567,-1471020,-1178770,-1050567,-1052207,-1590219});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,31195136,48981416,
28343040,18185881,13511499,11049604,9543730,8193920,7849067,7229780,6101360,6020085,5678505,5325659,4424562,
4071102,4092835,3360490,2959922,2942330,2391640,1712542,2027134,2170714,1518028,1359527,1720192,666710,
175409,-39617,-293964,291982,441493,-201778,-465961,-741613,-775395,-677288,-1165115,-789299,-854625,
-1366621,-1488265,-1389545,-1497264,-1520607,-1467764,-1567089,-1722119,-2088297,-1999408,-2040569,-2146242,-1991614,
-2127189,-1848454,-1722296,-1787628,-1728235,-2195589,-2307612,-2041369,-2215653,-2781309,-2679518,-2470209,-2076786,
-2293465,-2603122,-2514646,-2756309,-2475730,-2220754,-2347116,-2778835,-2661277,-2668239,-2658612,-1942425,-1614749,
-2303496,-2790306,-2834130,-2484534,-2059983,-2439275,-2355921,-2058347,-2167712,-2526318,-2385619,-2206829,-2373127,
-2436615,-2541472,-2274821,-2299807,-2314553,-1845562,-2372105,-2616226,-2177952,-2137608,-2168534,-1831229,-1884275,
-2254145,-2457306,-1959641,-1966605,-2627496,-2089689,-2349171,-2216255,-1785560,-2064501,-1837992,-2284049,-2467958,
-2093581,-1892878,-1631145,-1831852,-1827962,-2164245,-2178375,-1338694,-1389284,-2020276,-2115098,-1945931,-2057342,
-1922583,-1522814,-1464858,-1657372,-1707754,-1662698,-2005944,-2001846,-1369013,-1304299,-1469576,-1456879,-1766743,
-1689328,-1535727,-1710423,-1705097,-1599011,-1569929,-1226480,-997107,-1123472,-1105656,-1822458,-1765317,-1247375,
-1185323,-1365343,-1402413,-1581408,-2184748,-1854810,-1241432,-955124,-711620,-1182051,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,31289344,48733403,28420251,18712627,13680456,
11077659,9153583,8143334,7748920,6606984,6210933,6391595,5817974,4795022,3947381,4081348,3980609,3501601,
3154895,2997013,2758233,2165558,1911418,1911844,1767064,1438168,995608,697228,592178,110706,-186037,
94348,95790,-286154,-479271,-352696,-571825,-749789,-1018480,-1678133,-1224695,-627492,-917282,-1293702,
-1436442,-1848495,-1705538,-1315184,-1953953,-2325455,-1602094,-1830240,-2140510,-1852761,-2026840,-1892898,-1704890,
-2327482,-2228355,-1854593,-2377652,-2360855,-2010440,-2179604,-2369863,-2396280,-2087235,-2085187,-2710441,-2647974,
-2632406,-2539015,-2357971,-2308819,-2444806,-2725177,-2873450,-2855630,-2415307,-2134118,-1952872,-1982571,-2265812,
-2694868,-2546591,-2404459,-2560721,-2596970,-2778421,-2348339,-2305128,-1963932,-1948165,-2633224,-2488633,-2356127,
-2397496,-2232632,-2202323,-2183073,-2287317,-1992814,-1965988,-2466521,-2610493,-2295304,-1994453,-1783920,-1905165,
-2456693,-2450138,-2267659,-2158501,-2380299,-2059582,-1560280,-1498230,-1933229,-2152570,-2062867,-2341600,-1961080,
-1913976,-2247596,-1713067,-1765498,-2411439,-2193324,-1449490,-1196975,-1903540,-1910298,-1769600,-1930369,-1814452,
-1708161,-1558453,-1713283,-1815684,-2054071,-1659829,-1343824,-1868934,-1704888,-1332972,-1545352,-1438447,-1662704,
-2183715,-1528762,-836948,-1053222,-1542288,-1579561,-1285263,-1174263,-1285061,-1705926,-1738488,-1380086,-1047491,
-1187782,-1690567,-1471020,-1178770,-1050567,-1052207,-1590219});
            through_st.oldBandE = new Pointer<int>(new int[] { 2336,3437,4090,4304,4128,3696,2858,-2093,3491,4451,4592,3888,3552,0,0,0,0,
0,0,0,0,2336,3437,4090,4272,4128,3696,2922,-1389,3466,4451,4624,3920,3616,
0,0,0,0,0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { 2336,3437,4090,4304,4128,3696,2858,-2093,3491,4451,4592,3888,3552,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,2336,3437,4090,4272,4128,3696,2922,-1389,3466,4451,4624,3920,3616,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { 2176,2125,1869,-947,1818,3149,3763,3866,3610,2586,1971,3405,3610,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,2176,2125,1869,-947,1818,2893,3763,3866,3610,2842,1971,3661,3610,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -2183,-2315,-2195,-2213,-2232,-2139,-2139,-2181,-2070,-2126,-2140,-2038,-2189,-1873,-2186,-1751,-2075,
-1808,-2058,-1876,-2043,-1846,-1987,-1837,-2029,-1804,-2003,-1817,-1956,-1903,-1876,-1807,-1734,-1735,
-1700,-1795,-1838,-1872,-1806,-1790,-1739,-1724,-1713,-1835,-1767,-1790,-1888,-1592,-1877,-1598,-1722,
-1734,-1583,-1654,-1586,-1505,-1505,-1419,-1334,-1412,-1324,-1538,-1353,-1647,-1422,-1651,-1579,-1502,
-1457,-1371,-1218,-1447,-1313,-1483,-1388,-1476,-1373,-1498,-1396,-1438,-1247,-1437,-1157,-1542,-1227,
-1472,-1259,-1354,-1282,-1269,-1259,-1146,-1156,-1174,-1172,-1227,-1269,-1116,-1275,-1063,-1177,-1122,
-1141,-1202,-1114,-1167,-1086,-1030,-1171,-1095,-1258,-1090,-1139,-1001,-981,-998,-952,-1040,-869,
-975,-832,-832,-891,-838,-882,-875,-897,-888,-1000,-892,-946,-813,-847,-691,-777,-708,
-733,-769,-747,-719,-844,-582,-967,-611,-898,-743,-820,-754,-852,-656,-806,-548,-736,
-620,-772,-674,-772,-670,-622,-631,-531,-596,-629,-662,-699,-662,-682,-580,-675,-489,
-631,-603,-623,-642,-558,-515,-498,-504,-486,-466,-506,-429,-504,-419,-418,-458,-417,
-496,-382,-489,-431,-589,-371,-610,-181,-626,-111,-673,-134,-592,-247,-488,-345,-486,
-332,-567,-227,-550,-180,-505,-245,-420,-222,-331,-190,-323,-162,-286,-113,-299,-262,
-376,-413,-316,-384,-203,-410,-220,-362,-249,-210,-156,-220,-70,-344,-174,-456,-296,
-356,-223});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 120,48,148,45,41,81,156,33,66,30,200,82,99,39,16,87,64,177,85,124,238,104,235,171,5,192,12,204,50,196,28,93,41,
188,231,189,205,237,17,174,17,34,204,250,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 120,30,121,26,143,167,249,41,114,10,232,29,134,60,107,32,183,29,244,248,185,101,44,90,78,125,20,88,96,130,106,106,191,
199,189,169,101,232,206,93,12,88,63,0,165});
            expected_enc.storage = 0x2dU;
            expected_enc.end_offs = 0xbU;
            expected_enc.end_window = 0x7bda965U;
            expected_enc.nend_bits = 29;
            expected_enc.nbits_total = 390;
            expected_enc.offs = 0x22U;
            expected_enc.rng = 0x43a56b00U;
            expected_enc.val = 0x43fb0700U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 45;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_0()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x0U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 1;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 0;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 0;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3d9a8b4fU), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3d5fcf37U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3efbc4a4U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f3ef129U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f25216cU), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { 0, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 0;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 0;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,2155,1232,522,454,817,1352,1832,1926,1858,2294,3132,3701,
4048,4804,5819,6408,6377,6302,6658,7072,6974,6612,6685,7309,7941,8192,8103,8038,8047,
7875,7541,7362,7482,7669,7560,7182,6954,7121,7426,7787,8281,8785,9156,9379,9394,9209,
8998,8854,8863,9238,9953,10408,10418,10434,10612,10598,10376,10370,10669,10829,10517,9905,9503,
9459,9609,9697,9647,9540,9412,9213,8965,8781,8766,8839,8776,8380,7897,7626,7450,7054,
6487,6159,6275,6584,6748,6681,6493,6464,6704,6949,6809,6254,5475,4781,4672,5248,5841,
5939,5778,5514,5036,4566,4584,4866,4558,3471,2338,1516,793,493,1024,1514,1191,593,
252,-60,-308,-359,-623,-1339,-2477,-4206,-6041,-6879,-6887,-7248,-8411,-10075,-11958,-13498,-14038,
-13678,-13026,-12604,-12896,-14222,-16309,-18293,-19292,-18937,-17723,-16855,-17309,-18836,-20185,-20219,-18670,-16353,
-14642,-14071,-14014,-14133,-14521,-14491,-13312,-11657,-10690,-10678,-11196,-11451,-10758,-9391,-8127,-7177,-6680,
-6900,-7354,-7255,-6632,-5917,-5346,-5166,-5408,-5709,-5640,-5018,-3799,-2330,-1229,-748,-609,-388,
171,1013,1932,2764,3540,4072,4205,4317,5010,6122,6830,6934,7017,7238,7148,6622,6198,
6296,6819,7190,6900,6155,5615,5559,5715,5726,5488,5252,5156,4895,4242,3626,3410,3187,
2513,1715,1391,1532,1588,1221,714,570,923,1475,1767,1515,935,526,415,458,886,
1899,2898,2979,2216,1522,1502,1802,1657,954,186,-649,-1931,-3216,-3655,-3309,-3010,-3120,
-3383,-3429,-3227,-3088,-3068,-2760,-2037,-1387,-1242,-1458,-1613,-1439,-1027,-500,138,739,1191,
1640,2111,2597,3321,4140,4294,3750,3143,2651,2227,2059,1988,1674,1341,1343,1606,1900,
2111,2234,2433,2756,2981,3014,3130,3526,3845,3630,3192,3254,3845,4484,4996,5358,5529,
5654,5749,5667,5592,5658,5583,5310,5035,4626,4051,3722,3812,4032,4123,4008,3785,3601,
3343,2831,2322,1983,1855,1787,1788,2006,2419,2588,2177,1541,1282,1429,1471,971,181,
-752,-2171,-3890,-4862,-4776,-4518,-4774,-5792,-7785,-10147,-11727,-12308,-12377,-12162,-12191,-13326,-15498,
-17758,-19335,-19652,-18488,-16824,-16205,-17029,-18480,-19496,-19064,-16863,-14253,-13119,-13567,-14295,-14580,-14216,
-12763,-10316,-8082,-7164,-7644,-8537,-8555,-7477,-6223,-5460,-5348,-6083,-7284,-7897,-7465,-6411,-5187,
-4243,-3953,-4064,-4081,-3873,-3227,-1859,-278,440,175,-350,-462,264,1832,3475,4503,5210,
5966,6531,7085,8281,9891,11010,11289,10904,10083,9235,8740,8571,8465,8271,8053,7856,7531,
7103,6905,6988,7011,6802,6428,6069,6010,6092,5723,4879,4179,3852,3828,4224,4956,5567,
5714,5392,4853,4474,4446,4705,5130,5632,5780,5284,4426,3891,4059,4740,5594,6314,6594,
6349,5683,4798,4060,4030,4489,4599,4220,3880,3642,3228,2801,2738,3038,3379,3261,2608,
1940,1831,2284,2826,3056,3054,3171,3429,3579,3679,4144,4810,5130,4874,4430,4303,4545,
4767,4647,4324,4170,4266,4406,4373,4305,4442,4861,5418,5782,5708,5325,4963,4802,4919,
5479,6417,7223,7307,6907,6972,7736,8384,8463,8264,7789,6819,5790,5306,5315,5374,5202,
4805,4489,4554,4794,4729,4385,4223,4308,4200,3931,3674,3301,2850,2608,2421,2023,1752,
1848,1897,1813,1924,2266,2365,2058,1421,440,-781,-2135,-3825,-5746,-7104,-7529,-7766,-8472,
-9780,-11598,-13287,-14008,-14097,-14431,-14818,-15035,-15899,-17639,-19337,-20575,-21189,-20668,-19450,-18966,-19558,
-20395,-21006,-21075,-20116,-18536,-17502,-17372,-17639,-17905,-18005,-17698,-16837,-15554,-14311,-13746,-13940,-14042,
-13381,-12408,-11768,-11304,-10788,-10574,-10773,-10805,-10155,-8925,-7774,-7357,-7322,-6752,-5822,-5270,-4842,
-4063,-3354,-2943,-2425,-1749,-924,361,1761,2593,3090,3808,4588,5228,5826,6401,7027,7736,
8189,8224,8168,8183,8194,8430,8922,9222,9153,9117,9396,9834,10125,9964,9315,8646,8398,
8536,9021,9847,10413,10180,9691,9630,9819,10089,10603,10867,10180,8981,8100,7652,7392,7284,
7263,7301,7489,7590,7247,6731,6519,6592,6675,6818,6832,6335,5522,4900,4604,4613,4852,
4903,4513,4164,4216,4539,4904,5232,5389,5134,4324,3263,2593,2487,2456,2202,1991,1934,
1954,2048,2348,3012,3895,4391,4170,3724,3629,3828,4031,3926,3508,3106,2889,2644,2388,
2450,2812,3126,3139,2747,2175,1799,1726,1761,1823,1852,1708,1447,1249,1191,1388,1951,
2619,2898,2669,2384,2434,2644,2668,2551,2604,2934,3200,3050,2851,3213,3841,3889,3347,
2749,2276,2084,2390,2820,2860,2602,2305,1845,1512,1721,2268,2543,2284,1649,896,292,
-55,-319,-757,-1458,-2631,-4227,-5822,-6728});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 40;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 132,193,180,198,169,152,205,188,129,138,106,137,108,190,56,242,212,5,59,254,126,121,243,176,94,111,203,200,156,204,204,204,204,
204,204,204,204,204,204,204});
            through_enc.storage = 0x28U;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 273;
            through_enc.offs = 0x1dU;
            through_enc.rng = 0x89c0c14U;
            through_enc.val = 0x94a4fe3bU;
            through_enc.ext = 0x0U;
            through_enc.rem = 157;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 132,193,180,198,169,152,205,188,129,138,106,137,108,190,56,242,212,5,59,254,126,121,243,176,94,111,203,200,156,158,58,130,3,
241,118,39,52,103,22,228});
            expected_enc.storage = 0x28U;
            expected_enc.end_offs = 0x3U;
            expected_enc.end_window = 0x346716e4U;
            expected_enc.nend_bits = 31;
            expected_enc.nbits_total = 344;
            expected_enc.offs = 0x24U;
            expected_enc.rng = 0x1203400U;
            expected_enc.val = 0x13475c00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 40;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_1()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x1203400U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 30;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 1;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ec27b63U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3c65b9ccU), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f1f72f1U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4fb978U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f25216cU), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { -23424373, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 10867;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 48;
            through_st.in_mem = new Pointer<int>(new int[] { 6690576,7138469,8303774,7595563,3862462,1343234,1909126,3141430,3636238,4099092,4389092,4617854,5255600,
5014751,3258179,2338840,3267007,4304119,4389928,4686682,4246153,2161698,562018,844867,1798022,2865447,
3813056,3189844,1414841,1343171,2771250,3913213,4283689,4356383,3857482,2266387,-163558,-1689298,-739614,
1158899,1400975,468521,488598,989749,1270122,1585513,2487040,4162297,5467266,4424607,1792505,735128,
1898813,3044671,3183316,2046466,699909,508636,1019417,771410,575832,1721080,2987971,3013767,1973785,
322892,-655223,-203830,806253,1203772,1335867,1238790,547999,-19703,77993,529787,1538633,3158801,
3934774,2751833,842475,472407,1669470,2355549,1722712,1159921,1784359,2951513,2892113,1351600,1058740,
3234336,4546275,2556423,169273,-393094,-248491,611886,2533734,3229637,1896378,700345,382092,-468025,
-230446,1784999,3297852,2519803,501492,-1197727,-2071183,-1923504,-1241914,-1115134,-1990033,-3336377,-5700366,
-8153636,-9130083,-7287867});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,8826880,-2456629,-2151250,42176,
1765775,2693305,2796715,1510559,904759,2927365,4841825,4254847,3695114,5583566,7108898,5987593,3809939,
3610670,5329968,5786253,3943452,2801900,4361256,6663001,7079139,5906848,4668416,4712041,4975211,4239364,
3470140,3899818,5014549,5362706,4265178,3096387,3478554,4956396,5624245,6041005,6807563,7152024,6916901,
6538626,5823664,5013679,4793524,4938323,5476541,6981206,8604237,7978555,6435375,6466095,7139477,6462404,
5601835,6350179,7595773,7210127,5375115,3954630,4438793,5658182,6425774,6263978,5752795,5488604,5336850,
4967394,4644429,4754208,5333387,5684620,5172413,3769739,3170095,3741704,3964328,2955078,2011370,2641963,
4259072,5120868,4716789,3871371,3334592,3870353,4954360,5122290,3695852,1910000,651518,521080,2490863,
5229656,5653168,3989973,2989318,2468515,1429776,1168873,2878965,3971367,1727981,-1652030,-2508272,-1930503,
-2030015,-741600,2477863,2636160,-392844,-1717687,-1032411,-1123129,-1052670,-398123,-1301904,-3315491,-5483896,
-8603790,-10100221,-7143887,-4259053,-5709856,-9216638,-11983252,-13902596,-13654536,-10504673,-7150036,-5732829,-6274336,
-8939614,-13354276,-17285993,-18146305,-15330665,-10398442,-6661875,-7333240,-12214874,-16888808,-17097871,-12540423,-6077344,
-1979949,-3038618,-6656862,-8411398,-9097275,-10272209,-8798459,-4073724,-1399680,-3200937,-6518516,-8682024,-7923022,
-4196680,-1010214,-592251,-1101825,-2373657,-5005145,-6098771,-4112609,-1905482,-1145895,-1296440,-2547168,-4165093,
-4555436,-3224842,-917363,1910091,3683014,3078203,1215110,109792,531062,2051287,3553891,4386586,4594845,
4876629,4353960,3046503,3042199,5490785,7632771,6661172,4622166,4600045,5216286,4078207,2237057,2331688,
4209305,6010313,5709040,3229517,1187668,1569639,3220340,4054287,3556210,2543064,2405034,2833482,2098662,
332678,83043,1342988,1181611,-802690,-1724683,-273450,1432132,1170599,-527604,-1326520,-151160,1796082,
2828061,2102236,53409,-1444901,-1100823,-131494,431094,2034472,4693585,5258603,2112235,-1295024,-1481169,
853159,2151592,513184,-1861468,-2559614,-3305886,-5649801,-6449718,-3773974,-828324,-808262,-2299828,-2994098,
-2266846,-1279299,-1413244,-1815270,-623334,1265733,1410919,-258218,-1647789,-1530638,-278282,803467,1527629,
2306061,2546480,2305416,2570825,2936791,3287602,4561036,5394964,3174297,409903,-182365,-84251,-107995,
680086,974183,-64766,-335504,832069,1902354,2190911,2031569,1800754,2187618,2817783,2614818,1966620,
2326863,3545010,3472911,1481632,436134,2215037,4419913,4979616,4852010,4552170,3992238,3908880,3862797,
3196170,3174464,3705921,3168934,2311848,2135932,1418115,486899,1141250,2655344,3243118,2849896,2062029,
1549007,1571746,1155597,-43296,-345568,38035,694018,861138,1101985,1991431,2924085,2178398,-93453,
-1267561,-114112,1389741,1049974,-1144254,-2639281,-3710366,-6274234,-8374832,-6371230,-2634835,-1877487,-3824322,
-7102754,-11721788,-14457661,-12705743,-9584551,-7844351,-6723479,-7590812,-12138805,-17083673,-18778543,-17369463,-13177372,
-7305953,-4542821,-7800821,-13331050,-16405487,-15515186,-10208383,-2697149,330355,-4111822,-9894993,-11317113,-9949850,
-7466643,-2782467,2181644,2812572,-1205250,-6367462,-8354010,-5318647,-840490,542703,-698007,-2895735,-6296237,
-8656539,-6985955,-3082247,-269125,1074746,679861,-1418953,-2883280,-2566452,-1655296,266542,3620740,5333653,
2770132,-815115,-2042884,-673783,2689855,6584723,7855263,6345642,5662403,6297470,5979602,6281668,9251663,
11682200,10660208,7907053,5358720,3336329,2721336,3646234,4677414,4831633,4406061,4188568,4140650,3495330,
2873771,3552898,4582228,4387461,3451320,2647075,2478739,3486978,4028266,2231349,59045,130336,1228082,
2268269,3973844,5593392,5547499,4022338,2191627,1104966,1429178,2634026,3792376,4631435,5207936,4066368,
1519472,-268010,527864,3078662,5283125,6410122,6385934,5026044,3047669,1172731,-133466,-75076,2371483,
4355996,3208490,1273127,1200023,1408927,541810,234211,1462817,2910959,3263208,1592646,-671211,-1133838,
745424,2980409,3623265,2678304,1869338,2355534,3004952,2721092,2608449,4164926,5273906,4265864,2103168,
1175840,2201490,3634888,3701647,2437206,1531993,2025774,2955160,3194364,2571769,2408134,3206037,4445278,
5267949,4819628,3249213,1938085,1788795,2389688,3429461,5315871,7208209,7243821,4781695,2850839,4509729,
7412767,7407013,5474504,4384352,3131595,812247,-25360,1574768,3296738,3507068,2597140,1569867,1657736,
3024170,3780904,2679074,1496356,2030483,2942666,2204360,1478551,1362437,729406,180756,759737,836338,
-142806,132865,1469601,1336069,821406,1568518,2582890,1797678,195525,-1344768,-3145149,-4730891,-6025810,
-8233930,-10218400,-9092566,-6105320,-5596381,-7663012,-10562553,-13455115,-14043665,-11116416,-8970709,-10028908,-10451197,
-9992640,-12776072,-16894988,-17791968,-16951017,-15155709,-10883975,-7708974,-9967129,-14077068,-15444298,-15032834,-13188185,
-9019889,-5887087,-7152791,-10220311,-11766554,-11926496,-11409984,-9804349,-7346552,-5089063,-4464660,-6478080,-9239822,
-8982179,-5919597,-4235543,-5001725,-5329421,-4831359,-5751333,-7311505,-6749733,-3975921,-1200898,-768800,-3068119,
-4376596,-2163733,-338980,-1315899,-1484668,215981,407859,-377157,313623,1279037,2304659,4695678,5956190,
4489787,3628787,4839347,5534420,5440193,5661361,5934549,6496711,7221278,6608293,5174477,4823244,5079655,
5072487,6000845,7194414,6710254,5383143,5475919,6744041,7566716,7233700,5561091,3463329,2982680,4296079,
5724770,7230865,8925573,8368087,5443119,4251394,5704053,6690576,7138469,8303774,7595563,3862462,1343234,
1909126,3141430,3636238,4099092,4389092,4617854,5255600,5014751,3258179,2338840,3267007,4304119,4389928,
4686682,4246153,2161698,562018,844867,1798022,2865447,3813056,3189844,1414841,1343171,2771250,3913213,
4283689,4356383,3857482,2266387,-163558,-1689298,-739614,1158899,1400975,468521,488598,989749,1270122,
1585513,2487040,4162297,5467266,4424607,1792505,735128,1898813,3044671,3183316,2046466,699909,508636,
1019417,771410,575832,1721080,2987971,3013767,1973785,322892,-655223,-203830,806253,1203772,1335867,
1238790,547999,-19703,77993,529787,1538633,3158801,3934774,2751833,842475,472407,1669470,2355549,
1722712,1159921,1784359,2951513,2892113,1351600,1058740,3234336,4546275,2556423,169273,-393094,-248491,
611886,2533734,3229637,1896378,700345,382092,-468025,-230446,1784999,3297852,2519803,501492,-1197727,
-2071183,-1923504,-1241914,-1115134,-1990033,-3336377,-5700366,-8153636,-9130083,-7287867});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
3776,4154,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -6753,-6493,-6620,-7348,-8713,-10546,-12134,-12861,-13044,-13089,-13080,-13406,-14606,-16274,-17379,-17418,-16498,
-15103,-14214,-14736,-16578,-18596,-19557,-19013,-17556,-16356,-16225,-16899,-17454,-17400,-16825,-15768,-14434,-13552,
-13505,-13873,-14164,-14110,-13568,-12801,-12292,-12168,-12288,-12435,-12227,-11473,-10336,-9184,-8297,-7680,-7110,
-6601,-6315,-6005,-5432,-5008,-5092,-5442,-5431,-4739,-3528,-2439,-1808,-1186,-325,353,748,1332,
2307,3264,3650,3187,2451,2242,2577,3088,3676,4245,4602,4683,4469,4139,4180,4664,4993,
4813,4353,3838,3285,2760,2443,2444,2636,2752,2767,2804,2848,2831,2857,3008,3119,3060,
3133,3699,4435,4720,4753,4962,5229,5383,5615,5833,5810,5751,5778,5665,5526,5695,6038,
6427,6862,7221,7273,7180,7206,7286,7392,7638,7884,7912,7665,7103,6247,5721,6038,6835,
7355,7280,6986,7078,7587,8064,8380,8768,8894,8509,8174,8512,9300,9949,10214,10190,10149,
10410,10937,11222,11067,10665,10235,9675,9015,8495,8187,8091,8234,8376,8307,8231,8243,8053,
7907,8308,8974,9228,9002,8597,8111,7619,7370,7524,7941,8224,8052,7461,6904,6921,7531,
8027,7735,6860,6063,5459,4747,3888,3305,3193,3239,3022,2589,2302,2329,2554,2739,2648,
2420,2230,1868,1152,517,-42,-1333,-3299,-4676,-4904,-4663,-4544,-4817,-5915,-7617,-9000,-9848,
-10569,-10854,-10486,-10595,-12068,-14133,-15864,-17030,-17109,-15803,-14245,-13900,-14941,-16533,-17707,-17814,-16896,
-15490,-14148,-13341,-13282,-13713,-14118,-13874,-12569,-10795,-9855,-10149,-10820,-11133,-11011,-10331,-8996,-7653,
-7126,-7393,-7840,-7906,-7183,-5831,-4721,-4405,-4588,-4873,-4982,-4672,-4002,-3485,-3308,-3242,-3129,
-2969,-2687,-2012,-752,716,1759,2299,2560,2597,2437,2503,3147,4118,4834,4996,4788,4605,
4851,5677,6614,6999,6666,5841,4781,3949,3706,3732,3540,3132,2697,2351,2168,1969,1457,
857,590,600,629,628,544,243,-273,-842,-1198,-1073,-563,45,652,1245,1651,1763,
1718,1705,1826,2098,2304,2097,1242,108,-700,-992,-919,-527,116,669,827,597,178,
59,608,1528,2131,2161,1771,1173,736,808,1311,1982,2669,3165,3296,3163,3126,3408,
3891,4309,4471,4281,3858,3522,3370,3204,3124,3378,3899,4225,4062,3716,3663,3758,3463,
2828,2405,2353,2499,2755,3005,3124,3246,3345,3109,2727,2819,3344,3724,3779,3720,3685,
3805,4060,4286,4586,5147,5655,5608,5021,4286,3727,3662,4037,4300,3830,2704,1523,842,
750,823,755,692,687,699,842,1164,1182,656,-61,-555,-739,-804,-1089,-1956,-3482,
-5028,-5647,-5203,-4713,-5146,-6733,-9122,-11436,-12898,-13605,-13933,-13933,-14081,-15028,-16415,-17520,-18293,
-18464,-17528,-16083,-15348,-15685,-16593,-17405,-17582,-16865,-15375,-13845,-13046,-12905,-12861,-12667,-12010,-10504,
-8573,-7140,-6598,-6743,-7035,-7003,-6622,-6149,-5653,-5277,-5338,-5713,-5779,-5046,-3562,-2041,-1292,
-1121,-706,-17,639,1435,2281,2730,2893,3142,3566,4309,5449,6598,7509,8272,8948,9455,
9879,10452,11064,11317,11160,10876,10541,10079,9668,9555,9815,10162,10098,9549,8971,8642,8373,
7979,7542,7188,6919,6662,6229,5626,5197,4978,4496,3657,2937,2604,2448,2126,1589,1175,
1130,1070,658,277,390,870,1369,1642,1395,631,75,137,506,697,412,-327,-962,
-1122,-1181,-1316,-1202,-960,-883,-846,-553,-215,-259,-682,-1073,-1161,-910,-401,71,335,
658,1316,2166,3049,3741,3995,3920,3785,3642,3557,3673,3815,3672,3449,3444,3581,3653,
3676,3765,4084,4577,4875,4911,4954,4940,4742,4567,4641,5006,5537,5820,5610,5273,5358,
6026,6891,7412,7597,7795,7785,7225,6434,5992,6059,6400,6657,6614,6486,6645,6894,6762,
6586,6857,7203,7132,6812,6444,5970,5405,4869,4490,4380,4304,4091,3807,3694,3715,3513,
3100,2879,2771,2328,1574,791,6,-1118,-2812,-4827,-6263,-6592,-6439,-6736,-7677,-9087,-11009,
-13093,-14494,-15067,-15196,-15089,-15327,-16631,-18388,-19370,-19539,-19446,-19102,-18576,-18471,-19190,-20331,-20967,
-20524,-19279,-18015,-17281,-17092,-17093,-16808,-16062,-15191,-14499,-13882,-13426,-13201,-13087,-13105,-13100,-12519,
-11441,-10622,-10272,-10000,-9618,-9174,-8463,-7144,-5470,-4320,-3952,-3757,-3367,-2739,-1727,-566,220,
598,1103,2075,3593,5419,6892,7505,7505,7390,7375,7681,8358,8897,9020,8913,8699,8458,
8402,8637,9136,9738,10105,10072,9753,9339,9085,9041,9057,9149,9290,9240,9001,8818,8867,
9238,9712,9846,9691,9572,9516,9327,8987,8550,8066,7689,7401,6941,6487,6539,7021,7318,
7360,7303,7188,7225,7518,7803,7811,7435,6770,6074,5556,5471,5762,6090,6252,6231,5927,
5534,5454,5638,5758,5609,5136,4604,4031,3164,2365,2453,3309,3971,4009,3788,3700,3819,
4020,4171,4250,4463,4730,4667,4275,3949,3896,4030,4096,3908,3611,3328,2875,2225,1756,
1731,1938,1933,1575,1111,792,749,920,969,686,128,-423,-551,-230,-89,-467,-1033,
-1550,-2024,-2286,-2109,-1695,-1449,-1372,-1097,-726,-637,-757,-916,-1089,-1002,-623,-431,-546,
-847,-1115,-1029,-224,971,1701,1622,1027,132,-865,-1448,-1443,-1550,-2050,-2808,-3803,-5045,
-6385,-7774,-9026,-9586,-9347,-9180,-9872,-11356,-13111,-14803,-16051,-16694,-16857,-16629,-16562,-17538,-19289,
-20564,-20800,-20372,-19671,-18887,-18225,-18156,-18984,-20098,-20412,-19578,-18253,-17362,-17190,-17203,-16825,-16059,
-15207,-14285,-13076,-11804,-11067,-10953,-11002,-10857,-10314,-9328,-8271,-7521,-7187,-7102,-6927,-6390,-5438,
-4207,-3014,-2179,-1805,-1746,-1700,-1203,-479,-256,-572,-564,77,649,953,1642,2712,3509,
3969,4199,4233,4383,4959,5595,5784,5555,5305,5303,5433,5592,5914,6225,6066,5332,4491,
4109,4341,4810,4982,4682,4240,4042,3964,3766,3466,3039,2334,1679,1455,1335,901,350,
-88,-549,-882,-700,-201,28,261,962});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 45;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,76,176,179,97,213,74,175,197,135,200,81,53,59,130,55,123,8,255,151,20,148,132,254,198,183,192,105,17,203,129,148,132,
242,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2dU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 313;
            through_enc.offs = 0x22U;
            through_enc.rng = 0x8372296U;
            through_enc.val = 0x259f3c70U;
            through_enc.ext = 0x0U;
            through_enc.rem = 223;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,76,176,179,97,213,74,175,197,135,200,81,53,59,130,55,123,8,255,151,20,148,132,254,198,183,192,105,17,203,129,148,132,
242,223,86,173,41,206,89,18,249,229,60,32});
            expected_enc.storage = 0x2dU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0x112f9e5U;
            expected_enc.nend_bits = 25;
            expected_enc.nbits_total = 386;
            expected_enc.offs = 0x28U;
            expected_enc.rng = 0xa900e00U;
            expected_enc.val = 0x2831d000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 45;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_2()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0xa900e00U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 11;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3eb857e1U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0xbda0f95fU), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3eeee957U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f3bba56U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f25216cU), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { 3349323, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 20800;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 96;
            through_st.in_mem = new Pointer<int>(new int[] { -1440603,-3034956,-4002614,-2919402,-869135,-1324815,-3000281,-4364236,-5800685,-7423700,-8588161,-9612128,-9904343,
-7839108,-4910454,-5058531,-8474394,-12143574,-14165322,-14985502,-14206401,-12495061,-10924024,-9422631,-9942009,-14172974,
-17947004,-17073079,-13600663,-11025912,-9644751,-8874106,-8892148,-10914360,-14546080,-16226239,-13633852,-9124558,-6601033,
-7564650,-9962266,-10614354,-9020805,-7199323,-6376456,-5566288,-3824282,-2823455,-4233330,-6332344,-6929953,-6165433,
-4446141,-2298007,-1401418,-2009495,-3252650,-4067353,-3646491,-2056223,-26464,1701205,2301853,1568434,193181,
-867282,-884282,991275,2226411,619123,-1451616,-318654,2279029,2390219,1643914,3407644,5391524,4930697,
4040002,3380535,2719025,3215050,5052102,5651742,4211573,2615561,2388854,3251068,3790511,3989164,4754497,
4907270,3173221,720335,-168888,1194487,3474739,4588026,3659656,1832017,1066072,1793942,2163816,1624375,
1084937,380432,-1020594,-1248928,114032,402396,-957473,-1703344,-1579016,-1942321,-1701259,203594,1613842,
814495,971571,3031648});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 699909,508636,1019417,771410,575832,1721080,2987971,3013767,1973785,322892,-655223,-203830,806253,
1203772,1335867,1238790,547999,-19703,77993,529787,1538633,3158801,3934774,2751833,842475,472407,
1669470,2355549,1722712,1159921,1784359,2951513,2892113,1351600,1058740,3234336,4546275,2556423,169273,
-393094,-248491,611886,2533734,3229637,1896378,700345,382092,-468025,-230446,1784999,3297852,2519803,
501492,-1197727,-2071183,-1923504,-1241914,-1115134,-1990033,-3336377,-5700366,-8153636,-9130083,-7287867,-4235915,
-3083914,-4509328,-7049050,-10105467,-12861017,-12983646,-10432618,-8651044,-8198227,-8004690,-9371321,-13151511,-15805689,
-14524418,-10836967,-6932863,-4422038,-5637561,-10870838,-16598262,-18450836,-15361173,-9787107,-5713239,-5870767,-9512141,
-12728938,-12655603,-10502117,-8334925,-6007387,-4223401,-5255216,-8133498,-9804462,-9715160,-8480823,-6448799,-5194208,
-5779750,-7043993,-7967235,-8151552,-6787785,-4423579,-2391572,-1631588,-2009268,-2570237,-2383680,-2283342,-2884033,
-2610018,-1342313,-1600581,-3420854,-4561997,-3298372,-502238,2048733,2293029,1086116,1436922,2798008,2577417,
1834795,2851617,4811948,5337236,3586376,346021,-1056642,649770,2749589,3676301,4305638,4589067,4070294,
3159130,2000575,1393962,2710835,4550552,4213029,2330295,1072827,564935,92884,-132178,397243,1505015,
2287965,2094629,1752200,1851528,1902932,1680108,1845792,2373766,2302696,1674572,2178996,4243173,5287230,
3892114,3035018,3776189,4142161,3843351,4257453,4342644,3489442,3327855,3643863,3087011,2911091,4087261,
4903794,5302941,5730349,5686306,4649394,4087422,4517709,4754867,4910513,5549076,5700213,4958421,3849223,
2407233,857730,1683505,4813272,6974109,6329174,4211529,3268426,4668856,6433411,6615056,6248656,6737711,
5902936,3887292,3855557,6406350,8457208,8371992,7197857,6176923,6092546,7304348,8554236,7886780,6259637,
5152697,4791030,3994369,3240719,3408671,3957548,4636673,5556637,5640396,4863381,4792318,5106073,4286054,
4349546,6500360,7832164,6553786,4743757,3871724,3291126,2967964,3661020,5158728,6330590,6037920,4348108,
2526212,2302380,4311277,6750650,6658475,3735557,1168191,950101,1250972,437522,-602025,722,1571758,
2150116,1101129,83074,415065,1524884,2352480,2326874,1310038,692977,708548,-112695,-1785083,-1893200,
-1972032,-5313739,-8871697,-7667015,-3806705,-2025759,-2377406,-3909928,-7456852,-10605420,-10344462,-9002783,-9003581,
-7660689,-5161098,-6888800,-12542711,-15872517,-15773137,-14522381,-10786390,-5161965,-3327400,-7338651,-12803748,-15700208,
-14966165,-11317010,-7184348,-4621504,-4019836,-5386705,-7954712,-9925504,-10083804,-7674322,-3178558,-455775,-2781938,
-7258889,-8983707,-7929585,-6340124,-3979603,-878948,-25989,-2543219,-5471668,-6372986,-5087036,-1895840,1124737,
964140,-1606128,-3455889,-3986112,-3440313,-1791056,-126040,-341096,-1416104,-1762016,-1528955,-1267019,-669007,
1113975,3924838,5550918,4712021,3292526,2481505,1724352,940172,1767568,4175605,5910655,5462733,3633441,
2217450,2192060,3836813,6363630,7325759,5640437,2936043,716224,-753195,-470545,1430839,2383370,1506416,
503720,142463,239754,694828,516861,-887447,-1562455,-567112,403442,487409,382346,41764,-898676,
-1964242,-2498348,-1975479,-224021,1429736,2144475,2513919,2829501,2427873,1473086,898824,1002249,1543126,
2235961,2132735,567648,-2213735,-3881810,-3243215,-1626094,-310452,1041022,2309953,2336356,1058185,-433991,
-1349442,-378065,2284953,4141860,3408653,1432114,-269775,-1361349,-1069290,747092,2556703,3553862,4031644,
3671383,2481073,1480212,1791717,3075609,4072158,4102662,3310894,1968631,897532,994003,1541237,1390508,
1640778,2959692,4209375,3730745,1928087,1078376,2065930,2639576,1100502,-473379,4845,1264580,2043641,
2583900,2716604,2333621,2419020,2399766,1088429,345420,2052233,3882324,3610950,2513213,2080060,2142115,
2755492,3382177,3420059,3862012,5115380,5242957,3281779,1041063,74217,343548,2023536,3785842,3557480,
716693,-2259039,-3176106,-1853682,140472,759790,227103,205806,404668,471228,1015177,1836216,788861,
-1428304,-2533802,-2060900,-1094642,-720263,-1661317,-4220286,-7452213,-8471669,-5624501,-1650751,-1189553,-4669117,
-9661925,-13921930,-15082472,-13014344,-10820080,-9702059,-8560086,-9166294,-12529926,-14913979,-14611045,-13930058,-11939177,
-7509964,-4850045,-6870433,-10809779,-13355639,-13520276,-11418188,-7865109,-4258394,-3179135,-5233317,-7437600,-7748285,
-7106852,-5091216,-1210067,1455981,602532,-2166605,-4647566,-5338762,-4191056,-2741892,-2130983,-1746175,-1932965,
-3491912,-4815533,-3780260,-548105,2978328,4041613,1813965,-93356,1011126,2388396,2676532,3653002,4346845,
3240494,2344892,2797291,3667071,5234190,7316782,8054034,7785103,7738590,7851006,7574100,7545620,8416419,
8928200,7833733,6309810,5693161,5309783,4583775,4508830,5476930,6935314,7451403,5981135,3955255,3499179,
4163975,4207605,3530338,3112147,3183633,3314304,3198189,2319399,1357054,1699290,2295883,1084087,-674314,
-702350,440452,960857,185078,-893390,-719502,537571,448484,-1030170,-1156317,633030,2205687,2578411,
1959288,-2908,-2272290,-1889705,300031,1595594,1093210,-739140,-2773821,-2801860,-1246388,-930992,-1278536,
-341573,252754,-274408,-390941,680367,1044699,-312314,-1891731,-2020539,-1019672,314807,1525783,1686948,
1124965,1528824,3099427,4290118,4947505,4707662,3338761,2147229,1855390,1739682,1889394,2660468,2838232,
1758113,1342577,2098500,2677060,2494989,2338520,2622987,3619746,4528436,4032603,3142535,3193324,2986270,
2224005,2196567,3108955,4346355,5250538,4560963,2715503,2066292,3587760,6027950,7245264,6367675,5311508,
5478415,4748094,2489150,1198924,2142457,3955767,5119235,4984672,3913767,3539189,4636101,5102426,3694830,
3433508,5156290,5629986,4134528,3071003,2677795,2017529,1353579,1125241,1439008,2307984,2379667,1771822,
1350145,1876078,2355518,1455012,466652,999347,1326418,-112094,-1658119,-2240141,-2729389,-4600217,-7625495,
-9981062,-8847444,-5195414,-3423272,-5172472,-7992766,-10491916,-13455337,-15299718,-13782507,-11251759,-9785172,-8897770,
-10245152,-14757709,-17414342,-15319399,-12592667,-11623345,-10538112,-9581295,-10982550,-14293144,-16463392,-15095914,-11067072,
-7509912,-6667191,-8061501,-9842870,-10504993,-9334151,-7270799,-6300475,-6498538,-6380591,-6660977,-7326998,-7643420,
-8114053,-8030904,-5668536,-3275872,-3674440,-5092291,-5196748,-4579078,-4090434,-2724020,203169,2467609,1349769,
-1146772,-1629290,-710766,503688,2462379,3694431,2871720,1683451,2435877,4658968,7492557,9686746,9362707,
6745121,4610885,4139845,4478792,5784392,7492007,7342691,5969903,5103391,4599381,4357313,4967008,6124539,
7350261,8078722,7486016,6073092,4881361,4296256,4697265,5401373,5620101,5941227,6198453,5502744,4697881,
4780422,5618263,6967280,7617101,6515674,5414257,5466485,5651422,5072249,4337636,3731437,3270443,3411357,
3544282,2662830,2404793,4198443,5991671,5530039,4668029,4288328,4015741,4567680,5638988,5786232,4826737,
3258788,1844039,1308503,1609986,3065308,4553182,4883517,4405096,3755057,2582987,2031673,3072272,4104466,
3955367,2927268,1508622,976358,481575,-1074686,-1328821,1813445,5013238,4744519,2595332,1557814,1966805,
2760612,3169595,3088284,2886143,3483542,3835588,2647946,1261657,1291158,2209079,2942469,2746268,1746432,
1184466,1059341,189152,-896071,-554039,976443,1911356,1170179,-278781,-932903,-624053,310457,1160583,
765929,-563838,-1864106,-2178256,-784168,976296,436230,-1602967,-2605249,-2752281,-2893785,-2316647,-679469,
400028,-33749,-574837,283478,845647,-81492,-882876,-1116345,-1271375,-312702,936781,403677,-735835,
-1568344,-1618103,-332772,2665089,4757100,3586639,721468,-1440603,-3034956,-4002614,-2919402,-869135,-1324815,
-3000281,-4364236,-5800685,-7423700,-8588161,-9612128,-9904343,-7839108,-4910454,-5058531,-8474394,-12143574,-14165322,
-14985502,-14206401,-12495061,-10924024,-9422631,-9942009,-14172974,-17947004,-17073079,-13600663,-11025912,-9644751,-8874106,
-8892148,-10914360,-14546080,-16226239,-13633852,-9124558,-6601033,-7564650,-9962266,-10614354,-9020805,-7199323,-6376456,
-5566288,-3824282,-2823455,-4233330,-6332344,-6929953,-6165433,-4446141,-2298007,-1401418,-2009495,-3252650,-4067353,
-3646491,-2056223,-26464,1701205,2301853,1568434,193181,-867282,-884282,991275,2226411,619123,-1451616,
-318654,2279029,2390219,1643914,3407644,5391524,4930697,4040002,3380535,2719025,3215050,5052102,5651742,
4211573,2615561,2388854,3251068,3790511,3989164,4754497,4907270,3173221,720335,-168888,1194487,3474739,
4588026,3659656,1832017,1066072,1793942,2163816,1624375,1084937,380432,-1020594,-1248928,114032,402396,
-957473,-1703344,-1579016,-1942321,-1701259,203594,1613842,814495,971571,3031648});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2464,2480,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
2464,2480,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 1780,2328,2721,2963,3010,3093,3383,3823,4432,4864,4856,4724,5111,6147,7393,8421,9000,
9088,8973,8824,8594,8312,8173,7985,7617,7279,7028,6888,7086,7553,7920,8086,8225,8553,
9037,9624,10174,10439,10443,10555,10820,10909,10905,11198,11696,12105,12299,12458,12672,12826,12709,
12261,11766,11541,11384,10878,10099,9579,9427,9380,9147,8734,8368,8216,8318,8545,8598,8344,
7868,7311,6845,6769,7054,7363,7488,7527,7638,7678,7557,7579,7757,7650,7324,7255,7176,
6553,5579,4808,4470,4413,4356,4217,4135,4185,4141,3750,2955,2107,1603,1358,1012,433,
-338,-1419,-3014,-4936,-6424,-6742,-6374,-6587,-7933,-9900,-11657,-12663,-13061,-13311,-13356,-13182,-13520,
-14704,-16027,-16956,-17489,-17462,-16871,-16406,-16789,-17936,-19185,-19897,-19595,-18214,-16712,-16285,-16818,-17215,
-16872,-15811,-14195,-12475,-11367,-11336,-12195,-13075,-12970,-11759,-10150,-8804,-7950,-7510,-7198,-6758,-6104,
-5122,-3809,-2661,-2338,-2720,-3205,-3370,-3166,-2724,-2168,-1654,-1405,-1450,-1476,-1064,-176,986,
1962,2491,2606,2443,2313,2672,3456,3889,3513,2840,2392,2251,2364,2812,3483,3999,3896,
3005,1910,1399,1423,1378,1059,620,175,-209,-499,-778,-1137,-1483,-1671,-1740,-1738,-1604,
-1526,-1756,-2158,-2402,-2512,-2516,-2160,-1350,-408,221,425,549,821,1092,1283,1735,2402,
2696,2367,1776,1405,1555,2136,2660,2907,3343,4144,4823,5048,5153,5432,5731,5849,5706,
5371,5293,5789,6406,6764,7125,7496,7438,7080,6966,7306,8036,8863,9287,9195,8946,8875,
9082,9389,9424,9160,8895,8694,8482,8298,8079,7651,7002,6365,5952,5750,5496,5061,4608,
4301,4055,3650,3056,2543,2208,1828,1478,1424,1468,1190,710,441,538,1013,1845,2777,
3404,3554,3289,2742,2081,1587,1328,981,344,-321,-682,-694,-570,-508,-582,-597,-463,
-59,607,997,641,-49,-442,-609,-999,-1760,-2756,-4162,-6177,-8189,-8893,-8239,-7806,-8664,
-10472,-12504,-14200,-15278,-15907,-16167,-16031,-16212,-17515,-19314,-20315,-20301,-19805,-19077,-18231,-17616,-17570,
-17966,-18141,-17285,-15460,-13739,-12953,-12744,-12187,-10990,-9605,-8264,-6680,-5086,-4407,-4842,-5171,-4470,
-3207,-2165,-1499,-1034,-587,-69,389,818,1653,3100,4445,4972,4979,5197,5680,6068,6363,
6636,6614,6393,6471,7082,7796,8444,9126,9642,9738,9544,9448,9803,10552,11048,10613,9591,
8891,8722,8367,7528,6917,6843,6489,5421,4329,3692,3200,2564,1828,1145,773,616,135,
-678,-1199,-1370,-1825,-2707,-3582,-4217,-4788,-5278,-5636,-5926,-6076,-6069,-6162,-6195,-5519,-4198,
-3213,-2925,-2909,-2772,-2698,-2932,-3327,-3569,-3633,-3669,-3715,-3722,-3580,-3169,-2597,-2178,-1761,
-904,429,1741,2523,2802,2992,3200,3226,3128,3097,3080,3160,3553,4162,4814,5585,6356,
6677,6519,6480,6861,7290,7404,7256,6968,6674,6479,6211,5793,5547,5595,5730,5919,6163,
6367,6499,6500,6337,6304,6502,6616,6712,7063,7281,6944,6482,6438,6459,6147,5877,5973,
5999,5687,5323,4873,4327,4189,4374,4330,4383,4952,5538,5828,5873,5462,4853,4628,4493,
4066,3703,3611,3481,3434,3489,3652,4170,4817,4864,4196,3479,3279,3540,3780,3483,2641,
1479,-228,-2958,-5828,-6873,-6034,-5550,-6704,-8948,-11653,-14250,-15975,-16617,-16174,-15037,-14900,-16891,
-19598,-21204,-21544,-20952,-19551,-18060,-17689,-18681,-19875,-19894,-18365,-15921,-13838,-13167,-13377,-13032,-11793,
-10093,-7877,-5680,-4659,-5179,-6502,-7591,-7780,-7206,-6420,-5675,-5138,-5016,-5182,-5148,-4594,-3507,
-2218,-983,265,1445,2206,2521,2853,3578,4216,4247,4129,4682,5631,6363,7065,7962,8860,
9658,10146,10210,10439,11149,11506,10778,9499,8575,8065,7511,6912,6584,6408,5984,5210,4465,
4263,4558,4668,4345,3897,3329,2788,2772,3041,2957,2576,2170,1590,1158,1190,1418,1609,
1746,1731,1624,1611,1786,2225,2801,3310,3484,3490,3780,4569,5464,6114,6621,6894,6812,
6811,7121,7532,8001,8606,9139,9629,10245,10849,11343,11738,11818,11551,11368,11472,11447,10982,
10492,10437,10482,10184,9751,9494,9468,9618,9601,9218,8829,8571,8035,7291,6736,6348,5942,
5359,4428,3399,2680,2228,1889,1584,1037,163,-648,-1042,-990,-797,-1021,-1821,-2632,-2926,
-2766,-2619,-2686,-2872,-3207,-3892,-4877,-5835,-6503,-6900,-7352,-8015,-8482,-8461,-8370,-8528,-8598,
-8308,-7889,-7632,-7532,-7342,-6962,-6704,-6771,-6983,-6836,-6359,-5914,-5586,-5077,-4205,-3198,-2377,
-1742,-1183,-802,-865,-1183,-1590,-2537,-4685,-7697,-10127,-10939,-10719,-10923,-12296,-14424,-16516,-17977,
-18763,-18839,-18007,-16819,-16666,-18088,-19975,-20982,-20793,-19965,-19177,-18659,-18373,-18454,-18649,-18063,-16256,
-13931,-12177,-11453,-11241,-10715,-9696,-8327,-6643,-5019,-4217,-4327,-4619,-4460,-3824,-3015,-2227,-1493,
-1025,-1126,-1457,-1557,-1266,-624,126,753,1533,2701,3683,3876,3652,3798,4272,4541,4372,
4400,5197,6304,6924,7033,7047,7065,6952,6800,6940,7601,8205,7845,6509,5059,3964,2971,
1972,1243,884,610,80,-773,-1599,-2002,-2056,-2133,-2298,-2278,-2102,-2207,-2653,-2880,-2691,
-2432,-2490,-2701,-2678,-2161,-1437,-1076,-971,-705,-611,-1045,-1457,-1088,-78,1223,2314,2697,
2607,2715,3145,3713,4575,5700,6452,6567,6500,6807,7360,7836,8289,8906,9697,10612,11567,
12514,13456,14224,14521,14455,14355,14282,14125,13868,13621,13579,13690,13584,13198,12886,12813,12885,
13166,13521,13666,13766,13900,13499,12458,11652,11383,10956,10280,9835,9601,9255,8829,8321,7703,
7362,7546,7818,7714,7286,6889,6442,5736,4843,4162,3937,4046,4172,4038,3665,3310,2946,
2399,2006,2059,2264,2181,1850,1542,1375,1364,1551,1848,1758,917,-199,-725,-655,-438,
-143,291,702,920,934,1013,1527,2400,3082,3453,3666,3538,2861,1940,1185,560,-94,
-1012,-2873,-5830,-8352,-9016,-8557,-8550,-9465});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 47;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,85,119,77,109,204,154,31,214,36,164,26,66,49,24,161,205,236,116,218,87,54,100,1,30,113,21,7,146,224,88,157,202,
234,199,80,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2fU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 329;
            through_enc.offs = 0x24U;
            through_enc.rng = 0x4a729c4U;
            through_enc.val = 0x1989c836U;
            through_enc.ext = 0x0U;
            through_enc.rem = 224;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,85,119,77,109,204,154,31,214,36,164,26,66,49,24,161,205,236,116,218,87,54,100,1,30,113,21,7,146,224,88,157,202,
234,199,80,224,58,7,191,102,191,60,13,129,131,206});
            expected_enc.storage = 0x2fU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0x3c0d81U;
            expected_enc.nend_bits = 24;
            expected_enc.nbits_total = 401;
            expected_enc.offs = 0x2aU;
            expected_enc.rng = 0x11ec000U;
            expected_enc.val = 0x5f0c8000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 47;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_3()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x11ec000U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 2;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3e9ba186U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0xbb8ebbe4U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ec0fc3fU), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f303f10U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4e9036U), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { -32953581, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 14521;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 147;
            through_st.in_mem = new Pointer<int>(new int[] { -230987,492978,-48110,-2153047,-2329573,616280,3468520,5280975,5220117,2990432,1288330,2044044,3429309,
4258738,5811927,7418766,6582130,4434988,3760169,5250910,6447139,6471496,6669731,7619787,8711560,9705435,
10431428,10985388,11546721,11412758,9955382,8651004,8471191,8520346,8131432,7625375,7508441,8196370,8797255,
7976618,6764614,6830570,7617829,8166899,9067198,9542942,8900885,8805649,9006351,6897317,4029513,4352508,
6056874,5244439,3962197,4493055,5083915,4481399,3941145,3343549,2580887,3335795,5276693,5750186,4377200,
2986201,2850225,2401518,1066028,-133673,186043,1635429,2865259,3001858,2014309,953039,797605,542638,
-430563,-135842,1449525,2104679,1050977,-15824,-124974,263335,799710,1603960,2169408,766725,-2364664,
-4007754,-2276756,-158701,486417,939224,1689809,1862240,1324220,622569,897411,2727706,4513959,4267972,
3413120,2993885,1728011,-599333,-2014689,-1900592,-1831965,-2334734,-3817879,-8244403,-13876971,-13911918,-7851004,
-3659141,-5228534,-9000746});
            through_st.prefilter_mem = new Pointer<int>(new int[] { -3252650,-4067353,-3646491,-2056223,-26464,1701205,2301853,1568434,193181,-867282,-884282,991275,2226411,
619123,-1451616,-318654,2279029,2390219,1643914,3407644,5391524,4930697,4040002,3380535,2719025,3215050,
5052102,5651742,4211573,2615561,2388854,3251068,3790511,3989164,4754497,4907270,3173221,720335,-168888,
1194487,3474739,4588026,3659656,1832017,1066072,1793942,2163816,1624375,1084937,380432,-1020594,-1248928,
114032,402396,-957473,-1703344,-1579016,-1942321,-1701259,203594,1613842,814495,971571,3031648,3941557,
3338196,3039993,2662947,2012906,2189237,3088102,3880671,4843220,4492382,2955552,2442733,4487460,7383527,
8880180,8752763,7545236,5889823,5112400,4902483,4479165,4124867,4537341,4251239,3398457,3295247,3443940,
3744388,5042823,6266294,6143607,5545786,5537181,6396723,7237214,7956459,8165545,7336092,6429845,6874671,
7570169,7012082,6685833,7899888,8919580,8860994,8231634,8207463,8530428,8416144,7400742,5973084,5505332,
6307137,6447430,4921469,3492388,4074654,5262507,5599202,4808470,3928041,3866816,4518498,5465497,6040164,
5466923,4242013,3176649,2552431,2582960,3894101,5326065,5599466,5035644,4760184,5079057,4856437,4221556,
4732944,5385437,4327435,3364673,4217059,4133707,1856947,36496,269583,1569467,2512785,2477765,2106874,
2254948,2745241,2390936,942591,-952413,-1657929,-769895,-18676,-582894,-1749836,-2891991,-4635434,-7404918,
-9724238,-9127403,-5249273,-2634788,-4788474,-9560104,-12930668,-13278984,-11282345,-9410038,-9048351,-8362265,-7492888,
-9483139,-13156014,-14452778,-13651772,-12600510,-10634212,-8307480,-8460480,-11648204,-15012853,-16135334,-14703136,-10987227,
-6382102,-5038034,-8518443,-12188264,-11958670,-9171537,-6019879,-3094747,-1675933,-3125960,-6856624,-10483019,-11096783,
-7602873,-3008187,-633971,-722690,-1910973,-3082041,-3336004,-2620031,-1473162,272127,2231220,2362054,-311843,
-3001080,-3657660,-2644911,-1234859,-134679,603819,773379,3728,-1047516,-997339,780735,2983553,4651422,
4603470,3372188,2001449,933414,968439,2891514,4852874,3896848,849209,-598308,-90183,892049,1845807,
3287391,4476039,4253405,2034998,-1255931,-2638923,-919599,957815,689936,-460015,-1147520,-1441807,-1465348,
-1316244,-1449357,-1948447,-2115760,-1681166,-1309244,-1060820,-518919,-665969,-1879616,-2725434,-2325245,-1926288,
-1559694,-87591,1990710,3029026,2325719,971361,769014,1451404,1614418,1453234,2639636,3797973,2679953,
308771,-966510,-428486,1477597,3335130,3458609,2645950,3571845,5334752,5327154,3884731,3531445,4308659,
4561989,4004312,3007752,2133464,2980321,5283503,6083849,5402055,5634289,5897038,4367787,3103354,3882831,
5672377,7478704,8324510,7181910,5328869,4629275,5205383,6300451,6837226,5911727,4708526,4542235,4641570,
4473025,4457465,4201060,3210448,2042280,1692702,2218849,2829368,2492273,1594845,1253864,1573568,1634811,
832411,-190555,-223718,190196,-199940,-310522,686863,1055094,-236785,-1234973,-665617,668252,2276134,
4030234,4950994,4274312,2705733,1098049,-219832,-1022839,-744909,-85850,-605422,-2006450,-2512495,-1675870,
-468155,81528,-96241,-615206,-419006,182083,1370329,2691688,1970366,-845644,-2432425,-1639832,-955585,
-1971594,-3730816,-5160916,-7452193,-10810468,-12036146,-7914700,-2784852,-3288267,-8310179,-12728513,-14756807,-14628961,
-13139613,-11962805,-10837823,-9375544,-10590421,-15297335,-18129482,-15966134,-12423684,-10440810,-9185808,-8255215,-8681630,
-10634414,-12416584,-11754661,-7639200,-3144271,-2449021,-5221442,-7101935,-5548123,-2584476,-1079021,-408335,1410869,
2424999,-343527,-4489310,-4322387,-305637,2426992,2297732,1397815,983692,1195649,1761090,1833577,1996176,
3922719,6942474,7413683,4889489,3083345,3951902,5171275,5078898,4936348,5027477,3986881,3158261,4247188,
6478277,7275548,7443876,7981255,7720323,6317020,5188160,5470379,7258695,9090623,8514501,5005855,2334250,
3025271,4770185,3904499,1703932,2122359,3946528,2754185,-387848,-1142305,50478,253041,-639056,-1439398,
-1674490,-820252,-168160,-1591721,-3247107,-2550562,-1437051,-2705373,-4733906,-5247113,-4801651,-4929635,-4948667,
-4709039,-4650457,-4255186,-3704270,-4109569,-3920946,-1037157,2020081,1455414,-794338,-1731510,-1226064,-1399943,
-2616047,-3419267,-3035257,-2454848,-2379480,-2442557,-2311075,-1705071,-516006,395958,120693,369924,2428358,
4904573,5637519,4272699,2692853,2499719,2690178,2072496,1580566,1794789,1833088,2219955,3551153,4677339,
5227621,6115618,6589301,5219784,3455014,3845367,5541726,5972411,4945738,3942625,3278257,3076741,3301619,
2882808,2103756,2551459,3604547,3990389,4294513,4635910,4621978,4452398,3996920,3325790,3758127,4684028,
4461611,4457921,5561381,5232259,3092913,2373868,3802155,4041363,2690297,2670644,4003898,3776158,2407684,
2003007,1427119,757434,2093153,3331377,2507053,2877332,5023430,5442641,4590249,3764898,1924769,861253,
2059962,2290368,1011395,1011201,1898199,1686029,1946128,2335044,2811203,4365426,5212056,3151957,252192,
-358914,1318211,3083592,3157928,1105826,-1308963,-3136987,-6083211,-11322157,-13572841,-7860897,-786055,-1724674,
-8136565,-13310194,-16577107,-17796623,-15820443,-12444272,-8394541,-5279749,-8677204,-17309323,-21465280,-18618697,-14419847,
-10811263,-7133889,-5904509,-9575996,-14930911,-16367763,-12288527,-5959592,-1272372,-1249496,-5753305,-8949635,-6805374,
-2931591,-282124,2875850,4159481,692366,-4992293,-8600856,-8455210,-5437864,-2428733,-1207730,-892767,-1287026,
-2656946,-3761641,-3044427,-893618,1629914,3125131,3695877,4507878,4996090,4004828,2645552,2908712,4722412,
4811482,2717181,2125923,4801843,6763608,6457818,6784661,8014672,8569862,8711971,7932482,6495593,7210753,
9321621,8311939,4087111,1382950,2051245,3179306,2685751,2161067,2903072,3324149,2200211,506116,149374,
1915793,3827401,3250882,1544895,834452,67692,-170681,1647342,2804872,1524251,256131,-80346,-1042486,
-792615,842519,1664995,1653520,1549682,1011259,625212,944497,1706559,2895418,3726281,3805729,2746286,
2165059,3332009,5554082,6473000,6019345,5832961,5185985,3899630,4181027,5454269,6058421,6548497,7393695,
7470480,7621814,8438953,8768256,8688779,8586776,7539214,6167052,6347078,7410199,6945710,5128111,4740027,
6220743,6596552,5219271,4483227,4938099,5726381,6431303,5839427,4329847,4069965,4367549,3070353,1889080,
2206129,2549182,2237077,1262649,-520940,-1494331,-856763,-204867,-19716,-88725,-1267342,-2942797,-3221712,
-2011939,-427186,182297,-1407160,-3904076,-4440632,-2821259,-1142301,-1097249,-1883480,-2412067,-3136645,-4776060,
-6425707,-6920274,-6321006,-5621392,-6090579,-7232533,-6837047,-5125112,-4825490,-5789486,-5526110,-4094556,-3388003,
-3794132,-4279310,-3849232,-2954261,-3220510,-4393202,-5028285,-3688068,-2246075,-2084090,-2289925,-1347034,452531,
1541226,1398045,1140591,1219423,833771,-750776,-1833962,-2393877,-4855768,-10356877,-15215498,-14682124,-9547727,
-5819528,-7421069,-12334626,-16270643,-17430577,-16131273,-14264075,-11838814,-8166338,-6197002,-9706485,-16063685,-18841967,
-16396812,-12116672,-9383211,-9038348,-9660141,-10292167,-11619687,-12136396,-9057223,-3695983,-464080,-1374474,-4515740,
-6168084,-4751693,-2409204,-349556,1781764,2570611,201444,-3041379,-3854432,-2186534,-135056,964294,1375308,
1638251,999667,-1043430,-2047562,-1304744,235355,1851834,2688630,2645604,3657505,5725965,5681699,3053272,
1463814,2841714,4274901,3726434,2097653,2800736,5967762,7727179,6412540,4700397,4378244,4403229,3877712,
3648543,4751190,6971219,7143849,3566387,-652484,-1940233,-1376996,-1631945,-2266595,-1774436,-706795,-579196,
-1796111,-3444738,-3858207,-2633073,-1451162,-1578547,-1986301,-1329913,-678650,-1721496,-3182741,-2559728,-995256,
-592419,-1731728,-2394049,-1565218,472336,1637840,595800,-230987,492978,-48110,-2153047,-2329573,616280,
3468520,5280975,5220117,2990432,1288330,2044044,3429309,4258738,5811927,7418766,6582130,4434988,3760169,
5250910,6447139,6471496,6669731,7619787,8711560,9705435,10431428,10985388,11546721,11412758,9955382,8651004,
8471191,8520346,8131432,7625375,7508441,8196370,8797255,7976618,6764614,6830570,7617829,8166899,9067198,
9542942,8900885,8805649,9006351,6897317,4029513,4352508,6056874,5244439,3962197,4493055,5083915,4481399,
3941145,3343549,2580887,3335795,5276693,5750186,4377200,2986201,2850225,2401518,1066028,-133673,186043,
1635429,2865259,3001858,2014309,953039,797605,542638,-430563,-135842,1449525,2104679,1050977,-15824,
-124974,263335,799710,1603960,2169408,766725,-2364664,-4007754,-2276756,-158701,486417,939224,1689809,
1862240,1324220,622569,897411,2727706,4513959,4267972,3413120,2993885,1728011,-599333,-2014689,-1900592,
-1831965,-2334734,-3817879,-8244403,-13876971,-13911918,-7851004,-3659141,-5228534,-9000746});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2320,3019,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
2320,3019,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
2464,2480,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -11282,-13736,-15736,-16480,-16345,-15973,-15920,-16761,-18373,-19794,-20347,-19872,-18557,-17082,-16224,-16241,-16722,
-16811,-15977,-14520,-13056,-12136,-12058,-12286,-11811,-10561,-9186,-7822,-6486,-5817,-6179,-6862,-6952,-6321,
-5330,-4318,-3668,-3636,-3973,-4311,-4513,-4316,-3512,-2511,-1790,-1413,-1143,-1040,-1042,-834,-402,
-234,-532,-829,-765,-355,479,1349,1778,2099,2856,3479,3487,3524,3829,3722,3037,2333,
1910,1395,320,-1131,-2115,-2238,-1953,-1820,-1995,-2132,-1899,-1732,-2269,-3224,-3802,-3942,-4190,
-4964,-5994,-6629,-6772,-6769,-6647,-6352,-6060,-5852,-5638,-5396,-4691,-3362,-2119,-1452,-949,-334,
203,820,1827,2814,3267,3395,3836,4572,5123,5381,5696,6405,7475,8488,9136,9566,10024,
10591,11064,11277,11346,11425,11337,11047,11033,11444,11702,11377,10712,10155,9993,10283,11015,12048,
12871,12958,12438,11866,11608,11654,11691,11449,11012,10582,10148,9840,9940,10318,10477,10181,9646,
9154,8716,8186,7581,6894,6030,4947,3884,3130,2593,1992,1434,1181,1039,686,279,-59,
-390,-705,-894,-895,-709,-571,-840,-1512,-2125,-2189,-1701,-1125,-800,-684,-783,-1134,-1452,
-1450,-1236,-1048,-1010,-1147,-1345,-1582,-1513,-835,190,899,1016,753,448,302,164,-133,
-564,-1779,-4425,-7429,-9014,-9334,-9692,-10475,-11618,-13246,-15030,-16438,-17318,-17476,-16932,-16658,-17633,
-19385,-20598,-20725,-20126,-19197,-18202,-17544,-17320,-16952,-15980,-14512,-12749,-11009,-9902,-9453,-8862,-7708,
-6167,-4223,-2084,-764,-913,-1802,-2120,-1467,-483,300,1009,1618,1774,1728,2024,2562,2986,
3433,3787,3994,4461,5062,5106,4745,4619,4562,4259,4088,4081,4064,4058,4238,4619,5259,
5992,6166,5505,4701,4516,4868,5176,4980,4244,3094,1634,177,-570,-213,621,1020,740,
-88,-1395,-2734,-3579,-3991,-4423,-5102,-6067,-7149,-7909,-8196,-8355,-8514,-8496,-8383,-8428,-8380,
-7792,-6592,-5109,-3870,-3263,-3202,-3287,-3259,-2937,-2074,-637,720,1399,1466,1386,1470,1809,
2353,2944,3395,3532,3408,3410,3611,3622,3459,3495,3515,3200,3066,3602,4360,4697,4535,
4133,3763,3441,3167,3259,4013,5132,5983,6243,6138,6092,6263,6515,6751,6920,6992,6804,
6198,5394,4750,4243,3850,3819,4032,4102,4190,4372,4375,4201,4040,3733,3267,3005,2963,
2843,2774,3106,3649,3665,3100,2669,2760,3156,3634,4074,4485,5012,5431,5358,5063,4991,
5037,4994,4908,4904,5113,5347,5143,4490,3870,3680,4100,4740,5131,5253,5269,5118,5016,
5185,5376,5481,5481,4986,3964,2526,355,-2033,-3402,-4062,-5146,-6453,-7509,-8588,-9635,-10396,
-11026,-11384,-11576,-12432,-14240,-16105,-17155,-17297,-17004,-16795,-16859,-17195,-17647,-17560,-16278,-14166,-12038,
-10309,-9024,-8021,-6992,-5686,-4038,-2238,-724,121,328,302,684,1646,2599,3111,3488,3954,
4244,4346,4493,4567,4395,4238,4027,3492,3008,2992,3083,3005,3070,3270,3229,2955,2696,
2513,2618,2986,3383,3780,4164,4348,4322,4227,4119,4194,4613,5104,5246,4996,4428,3574,
2675,2035,1585,1172,1016,1200,1146,619,-2,-401,-648,-709,-748,-1190,-1842,-2141,-2333,
-2878,-3259,-2893,-2213,-2017,-2072,-1612,-445,995,2311,3400,4248,4822,5222,5760,6792,8099,
9136,9582,9582,9474,9472,9598,9806,10025,10106,10020,10001,10109,10115,9821,9159,8242,7580,
7623,8090,8343,8180,7797,7273,6607,5872,5271,4975,4938,4963,4987,5180,5630,6075,6246,
6278,6390,6446,6269,5950,5596,5063,4178,3082,2125,1375,595,-137,-403,-230,-178,-551,
-1084,-1578,-2203,-2966,-3521,-3645,-3440,-3305,-3827,-5016,-5912,-5930,-5681,-5656,-5482,-5025,-4711,
-4637,-4565,-4561,-4784,-5200,-5624,-6017,-6299,-6338,-6285,-6463,-6869,-7258,-7562,-7750,-7479,-6758,
-6028,-5813,-5850,-5517,-4993,-4912,-5081,-4881,-4455,-4299,-4401,-4692,-4988,-5334,-6265,-7901,-9325,
-10142,-11196,-12757,-13960,-14580,-15449,-16819,-17901,-18269,-18401,-18564,-18697,-19099,-19794,-20154,-20096,-20204,
-20493,-20559,-20328,-19554,-18011,-16259,-14941,-13830,-12635,-11648,-10883,-9709,-7904,-6048,-4505,-3042,-1842,
-1321,-1078,-514,145,640,1211,1712,1774,1661,1784,1958,2121,2336,2299,1698,967,816,
1281,1990,2724,3083,2693,1861,1328,1164,1304,1716,1902,1616,1386,1459,1587,1940,2683,
3353,3625,3784,3965,3969,3802,3477,2751,1695,876,514,141,-362,-593,-337,-171,-535,
-1058,-1303,-1283,-1105,-857,-608,-178,455,955,1050,1192,1737,2403,3036,4058,5602,7173,
8579,10066,11337,11932,12044,12414,13214,14055,14701,15159,15434,15516,15362,15063,14992,15343,15559,
15309,14982,14896,14843,14511,13799,12919,12283,12010,11823,11520,11290,11294,11385,11275,11002,10783,
10641,10518,10421,10333,10274,10312,10508,10710,10751,10610,10537,10704,10826,10656,10479,10484,10267,
9624,8984,8495,8155,7972,7725,7300,6930,6551,5916,5272,4831,4270,3345,2370,1745,1476,
1137,585,69,-413,-858,-974,-883,-950,-1015,-1006,-1020,-804,-208,205,-70,-889,-1812,
-2324,-2080,-1341,-605,-82,198,-83,-956,-1720,-1781,-1481,-1497,-2063,-3086,-4312,-5489,-6772,
-8143,-8823,-8792,-9297,-10849,-12796,-14711,-16302,-17297,-18010,-18576,-18828,-19344,-20531,-21470,-21292,-20282,
-19216,-18581,-18296,-18131,-18075,-17706,-16395,-14357,-12331,-10825,-10146,-9889,-9109,-7664,-6043,-4373,-2800,
-1661,-880,-309,103,465,851,1124,1167,959,704,766,1001,931,719,815,853,773,
897,1193,1441,1689,1767,1334,543,-104,-419,-592,-971,-1428,-1823,-2100,-2161,-2103,-2128,
-2104,-2072,-2521,-3448,-4278,-4737,-4878,-4796,-4724,-4850,-5175,-5668,-6227,-6585,-6582,-6416,-6437,
-6909,-7869,-8930,-9360,-9100,-8662,-8083,-7453,-7417,-7828,-7722,-7013,-6279,-5624,-5170,-5090,-4949,
-4245,-3149,-1915,-492,914,1838,2316,2814,3465,4071,4658,5307,5803,6036,6196,6226,5909,
5573,5630,5791,5776,5845,5975,5869,5648});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 45;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,119,107,32,190,217,9,102,138,151,128,94,128,2,176,56,59,111,164,224,86,129,71,91,179,65,219,181,182,67,178,240,47,
230,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2dU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 313;
            through_enc.offs = 0x22U;
            through_enc.rng = 0x41b0e9f0U;
            through_enc.val = 0x62176000U;
            through_enc.ext = 0x0U;
            through_enc.rem = 237;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,119,107,32,190,217,9,102,138,151,128,94,128,2,176,56,59,111,164,224,86,129,71,91,179,65,219,181,182,67,178,240,47,
230,238,31,132,115,69,84,99,20,250,134,90});
            expected_enc.storage = 0x2dU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0x46314faU;
            expected_enc.nend_bits = 28;
            expected_enc.nbits_total = 389;
            expected_enc.offs = 0x28U;
            expected_enc.rng = 0x1a3a7400U;
            expected_enc.val = 0x24375000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 45;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_4()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x1a3a7400U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 0;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ea3f927U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3d42140dU), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ecfea4aU), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f33fa92U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4e9036U), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { 19664218, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 21470;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 192;
            through_st.in_mem = new Pointer<int>(new int[] { -15554806,-14091061,-13547292,-13383229,-12444822,-13680988,-16746422,-16459877,-12461543,-8944312,-8094417,-9204870,-10248341,
-10564765,-10909857,-9593404,-5508267,-1725030,-522085,-1407282,-3869425,-5180776,-2880674,322379,1931046,3127652,
3756347,2945094,2178500,1798166,1497711,1546033,1866741,1641042,866686,-134992,-455294,686472,1433172,
328270,-296368,834952,656364,196382,982816,1763511,1748758,1901123,1357168,-687967,-2420359,-2316506,
-1354135,-966031,-1916094,-2468430,-2495247,-2254597,-1540043,-1090096,-1394430,-1209086,-1161573,-3112089,-5345831,
-5518045,-4508360,-3487830,-2661049,-2651630,-3418403,-4310918,-5198718,-5771941,-5292081,-4033371,-3363880,-4027846,
-5888043,-8176876,-9180372,-7247648,-4685590,-3796764,-2950132,-2385513,-4431480,-6240275,-4375151,-1840139,-1302147,
-1174780,-1595661,-2848638,-2549632,-156957,1881195,3119798,4652080,5456704,4346243,3087110,3462701,4395348,
4610986,4905473,5520063,5292105,4519587,4363728,3929548,2526667,2254086,3657384,4118388,3496406,3831254,
4123502,3236715,2700551});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 5083915,4481399,3941145,3343549,2580887,3335795,5276693,5750186,4377200,2986201,2850225,2401518,1066028,
-133673,186043,1635429,2865259,3001858,2014309,953039,797605,542638,-430563,-135842,1449525,2104679,
1050977,-15824,-124974,263335,799710,1603960,2169408,766725,-2364664,-4007754,-2276756,-158701,486417,
939224,1689809,1862240,1324220,622569,897411,2727706,4513959,4267972,3413120,2993885,1728011,-599333,
-2014689,-1900592,-1831965,-2334734,-3817879,-8244403,-13876971,-13911918,-7851004,-3659141,-5228534,-9000746,-13257491,
-16982962,-16631055,-12715229,-9571940,-8518247,-9596323,-13225586,-16900291,-17108327,-14426026,-10555088,-6822620,-5359356,
-6980385,-10037252,-11948240,-10638122,-6912194,-3847997,-2924181,-4252960,-7136567,-8342021,-5602611,-2136383,-856414,
-56704,666615,-1244612,-5056571,-6593791,-4584481,-1686559,175672,870534,9529,-2122455,-3614219,-3825359,
-3475962,-1965762,641542,1942411,1410521,444461,237809,-280342,-647142,211790,1257084,441150,-1364371,
-1543359,-247172,1209364,3197961,3857806,2585976,2407175,4390246,4306463,2170179,2293878,3414338,1914170,
-519056,-1017727,-299271,-935983,-3546146,-5746696,-4725322,-1803211,-207611,-655106,-1834962,-1786830,-355479,
-482666,-3263649,-5305696,-4348233,-2909293,-3437674,-5744535,-7268637,-6283523,-4658419,-4148259,-3658992,-2875430,
-2706478,-2871144,-2718778,-2472614,-427487,2561551,3025800,1430172,1168216,1935999,1994351,2651951,4628460,
5165216,3584340,2531452,3892140,5371399,5065819,4204212,4596192,6403544,8317792,8741702,7869023,7374210,
7753080,8480927,8444254,7669893,7210931,7294283,6658787,5777330,6729657,8461856,8087676,5858217,4265905,
4299713,5575427,7327290,9315891,10998509,10772998,8263973,5831152,5298685,6233406,7320081,7311479,6191427,
5244028,5004218,4723653,4973110,6455050,7655176,6990386,5224391,4063592,3911030,3829941,3184013,2551194,
1843625,696558,-731286,-1314734,-702151,-276558,-868621,-1061733,-155274,143945,-807552,-1245610,-1213037,
-1392024,-1529846,-1207278,-553347,211991,129657,-1452632,-3268587,-3439783,-1567690,653982,1314245,640029,
-16364,-825736,-1918751,-1999229,-883880,-14299,10681,-488217,-1181670,-1515696,-1797086,-689317,1847539,
3685397,3020796,1031556,-453043,-786655,-322776,-379706,-1115754,-1847087,-5323147,-11930989,-15022993,-11056351,
-6848696,-7200944,-9161690,-11117306,-13806096,-15445275,-15001224,-13703576,-11286914,-8508593,-9280293,-14227858,-18009466,
-16878107,-13175088,-10279417,-8559727,-7718636,-8487685,-9861091,-9133647,-6433573,-3804784,-1694562,-705626,-2229382,
-4244437,-3386950,-717807,1576334,4173774,6166839,4126363,-1079686,-4202268,-2409631,1372213,3129176,2910425,
3088377,3114369,1633035,901486,2274056,3447143,3310733,3665436,3559134,3174511,4366646,5202423,3290191,
1658343,2399114,2604327,1561691,1916208,2482893,2437633,2472244,3230414,4164298,5459239,6233367,4394039,
1080781,88951,2130417,4216310,4252346,2377189,44932,-2102992,-4079283,-4963983,-2950967,1112079,3285203,
2015831,-520217,-2936850,-5407537,-6341597,-5140821,-3886400,-4221442,-5498564,-7087181,-8159285,-7505126,-6034643,
-5686681,-5784367,-5157060,-4756882,-5334625,-4981344,-2740014,127990,2024408,1936103,108641,-1754849,-2315388,
-1904762,-683336,1730429,4611739,5166916,3223534,1133943,572994,1195588,2291676,3339629,3866361,3656016,
2646956,1662069,2101982,2918315,2263565,1557619,2272580,2229161,869289,1417136,4079130,5317747,4059027,
2222168,1139599,1023692,992982,991761,2322558,5090633,7048911,6638669,4740766,3405464,3582618,4443189,
4880023,4969310,4839870,4546387,3525662,1698032,514713,676115,841610,997066,2238368,3218747,2763880,
2880615,3319704,2698336,1975187,1921534,1224603,384726,934012,1674165,1328874,1464045,3064149,4132377,
2307391,-62555,139187,2012503,3317691,3896856,4034879,4186420,4914064,4795472,3037663,2083502,2815669,
3254762,2918479,2715933,2998969,3868959,4099764,2449480,485043,219024,1599392,3981220,5140378,4513674,
3652071,3292848,2618646,2726580,3773929,3967871,3732960,3367390,1339870,-1122838,-3454665,-7340504,-9563144,
-6856448,-4793463,-6935655,-8515045,-8289937,-9032925,-9564764,-9036559,-8967522,-8240466,-7780477,-10618181,-15043478,
-16387740,-14195309,-11121235,-9426716,-9590768,-10580572,-11734004,-12415570,-10485523,-5537353,-1350044,13052,-313862,
-1070231,-1435832,-713117,1053666,3256872,4891954,4826373,3016313,922212,95019,1750214,4360585,4914750,
3693913,3455513,4051676,3617079,3025200,3272186,3063491,2101339,2057107,1739466,282729,162934,1782504,
2210946,1574631,2112437,2705332,1841071,861513,754615,906787,1974005,3115762,3460636,3704543,3895202,
3311922,2564807,2266209,2154596,2837811,4292913,4845248,3717402,2199012,742890,-777531,-1486527,-977986,
-592946,-717863,81072,1377869,516066,-1454518,-2163317,-1635532,-1258076,-647971,-595335,-2269984,-3401698,
-2356382,-2101808,-3665656,-3328747,-503112,1007894,-556795,-1464474,611175,3789660,5624844,6001640,5880365,
5562283,4960969,4600917,5411915,7765872,9526307,9223376,7439746,5886942,5444574,5812397,6335456,6748740,
6921586,6490886,5856618,6078214,6586733,6235293,5010180,3322225,1871029,2352127,4833091,6596213,6006582,
4458083,3456820,2643978,1740414,1048616,1145914,2025955,2904964,3136184,3147448,3854417,5025663,5281652,
4432745,3968459,4315799,4155233,3235270,2544893,2205548,1254875,-514379,-1922357,-2026368,-1766453,-2350114,
-2632718,-1173705,461015,71686,-1637166,-2521688,-2689406,-3529483,-4478716,-4095516,-2671118,-1399716,-1560490,
-4168621,-7221357,-6751721,-3705913,-2623339,-3387864,-2762201,-1496131,-1801090,-2591216,-2553944,-2788237,-3715572,
-4643106,-4931454,-5064973,-4851766,-4029692,-3676820,-4590434,-5633681,-5813485,-5704317,-5415951,-3651390,-1641694,
-1161866,-2822812,-3722913,-2230125,-1243202,-2735798,-3710034,-2302439,-1253868,-2098064,-3058990,-3895800,-4095063,
-4481718,-7090452,-10550115,-10686880,-9075478,-10548175,-13272398,-12765069,-11116195,-12517011,-15102999,-14765045,-12505254,
-11764688,-11972762,-11950025,-13133561,-14580668,-13635498,-12144545,-12788848,-13596576,-12860722,-11684759,-9318711,-5693360,
-3889316,-4590595,-4628720,-3602086,-3719876,-4022800,-1877539,1428314,2746156,2604388,3224689,3046272,1002338,
183739,1647848,2383476,2116605,2732016,2796105,1305762,627054,1524285,1808749,1870595,2183730,1283628,
-1049247,-1950967,-24395,2405970,3691079,4229071,3144022,296679,-1753360,-1039816,144146,1288573,2488697,
1816124,-2914,50750,1150532,1420662,2420902,4235216,4392689,3174112,2878374,3066171,2452381,1754423,
1004654,-837514,-2635230,-2313258,-944559,-1212019,-1973661,-1168579,684252,472892,-1596002,-2470898,-1653528,
-718610,-59155,336924,493385,1387740,2483410,2327541,975849,1226726,2964655,3795106,4069112,6051355,
8817358,9876545,10165888,11361476,11390315,9402290,7789475,8915053,10903652,11563088,11281057,10907895,10439711,
9818136,8901859,8213325,8963515,10648406,10311092,8535061,8066075,8852311,8934642,7759297,5998844,4873281,
5332055,6428161,6612692,6022668,6135520,6952678,7311488,6544100,5808871,5862330,6043174,6033757,6064685,
6041954,6106673,6467737,7138251,7283245,6747893,6027610,6219511,7157702,7075982,5954904,5821788,6458516,
5552276,3674061,3291305,3516601,3826476,4260661,3886086,3005247,2969418,2705235,1423811,996819,1432649,
670190,-1165418,-1938515,-1103931,-29739,-481726,-1562447,-1754126,-1931880,-2076456,-1002269,-225665,-816925,
-849896,-586726,-675405,258074,1947259,1563858,-1000453,-3397630,-4326787,-3210399,-428383,1749044,2190780,
1770512,1096502,-1029329,-3626801,-3716686,-1306581,134599,-975425,-3238055,-5457663,-6917657,-7470177,-8627472,
-9776163,-7788135,-5293654,-7470065,-12068836,-14640266,-15705382,-15554806,-14091061,-13547292,-13383229,-12444822,-13680988,
-16746422,-16459877,-12461543,-8944312,-8094417,-9204870,-10248341,-10564765,-10909857,-9593404,-5508267,-1725030,-522085,
-1407282,-3869425,-5180776,-2880674,322379,1931046,3127652,3756347,2945094,2178500,1798166,1497711,1546033,
1866741,1641042,866686,-134992,-455294,686472,1433172,328270,-296368,834952,656364,196382,982816,
1763511,1748758,1901123,1357168,-687967,-2420359,-2316506,-1354135,-966031,-1916094,-2468430,-2495247,-2254597,
-1540043,-1090096,-1394430,-1209086,-1161573,-3112089,-5345831,-5518045,-4508360,-3487830,-2661049,-2651630,-3418403,
-4310918,-5198718,-5771941,-5292081,-4033371,-3363880,-4027846,-5888043,-8176876,-9180372,-7247648,-4685590,-3796764,
-2950132,-2385513,-4431480,-6240275,-4375151,-1840139,-1302147,-1174780,-1595661,-2848638,-2549632,-156957,1881195,
3119798,4652080,5456704,4346243,3087110,3462701,4395348,4610986,4905473,5520063,5292105,4519587,4363728,
3929548,2526667,2254086,3657384,4118388,3496406,3831254,4123502,3236715,2700551});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2312,2649,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
2312,2649,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
2320,3019,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 5584,5612,5509,5206,4897,4783,4804,4876,5008,5132,5319,5620,5793,5769,5789,5874,5868,
5752,5686,5885,6284,6338,5978,5752,5901,6154,6397,6797,7379,7900,8043,7709,7218,7140,
7350,7326,6954,6525,6182,5956,5972,6199,6327,6284,6465,7004,7222,6897,6566,6397,6033,
5353,4650,4414,4749,5080,5121,5143,5378,5745,6141,6461,6843,7478,8032,8166,8134,8225,
8447,8676,8771,8537,7956,7202,6480,5924,5472,4669,2985,647,-1475,-3100,-4592,-6107,-7574,
-9366,-11652,-13743,-15058,-15738,-16001,-16089,-16462,-17154,-17662,-17925,-17983,-17546,-16598,-15632,-15019,-14539,
-13659,-12212,-10422,-8592,-7065,-6125,-5306,-4162,-2871,-1562,-169,1091,1901,2197,2315,2785,3626,
4406,4919,5185,5263,5327,5468,5630,5648,5217,4372,3687,3570,3816,4283,4725,4906,4873,
4834,4856,4811,4691,4643,4491,4025,3675,4001,4559,4846,5108,5395,5375,5201,5100,4742,
4089,3594,3192,2600,1848,985,-2,-788,-1179,-1402,-1581,-1752,-2174,-3003,-3939,-4391,-4335,
-4080,-3767,-3536,-3580,-3656,-3417,-2911,-2268,-1696,-1404,-1005,-148,844,1740,2766,3889,4685,
4875,4775,4986,5514,5941,6277,6707,7178,7576,7752,7648,7528,7652,7950,8070,7619,6773,
6115,5503,4569,3615,3078,2725,2246,1707,1273,1096,1148,1036,563,-51,-724,-1603,-2322,
-2537,-2564,-2609,-2505,-2442,-2716,-3147,-3515,-3842,-4076,-4246,-4679,-5355,-5674,-5534,-5505,-5595,
-5389,-5210,-5488,-5809,-5818,-5956,-6427,-6799,-6984,-7335,-7566,-7165,-6661,-6671,-6767,-6652,-6583,
-6320,-5919,-6000,-6390,-6388,-5966,-5426,-4932,-4555,-4221,-3959,-4022,-3975,-3460,-2678,-1936,-1373,
-912,-287,378,610,398,82,-205,-547,-849,-1103,-1424,-2143,-3572,-5320,-6576,-7171,-7651,
-8557,-10219,-12463,-14632,-16395,-17872,-18790,-18913,-18874,-19379,-20178,-20498,-19935,-18803,-17654,-16762,-16073,
-15448,-14738,-13760,-12281,-10253,-8078,-6253,-4914,-3798,-2478,-659,1572,3948,5908,6977,7353,7433,
7391,7548,8053,8540,8768,8677,8262,7821,7779,8036,8200,8167,8245,8687,9205,9419,9512,
9582,9509,9140,8550,7875,7304,6980,6822,6707,6772,7100,7254,6866,6311,5901,5531,5366,
5568,5639,5145,4370,3651,3024,2581,2368,2371,2339,2092,1329,114,-877,-1230,-1254,-1208,
-1010,-797,-836,-736,-147,712,1367,1731,1819,1676,1753,2422,3507,4816,6097,6976,7454,
8143,9320,10611,11512,12062,12706,13335,13448,13190,12956,12616,12101,11626,11386,11322,11211,10973,
10754,10525,10225,9959,9652,9216,8835,8499,8120,7982,8159,8199,7922,7631,7498,7438,7413,
7362,7117,6614,6175,5889,5431,4831,4508,4348,3865,3219,2898,2760,2404,2038,1901,1828,
1620,1388,1201,875,367,-104,-527,-980,-1268,-1450,-1810,-1876,-1352,-1008,-1068,-887,-695,
-1075,-1573,-1634,-1433,-1377,-1495,-1628,-1619,-1422,-1023,-590,-395,-273,71,484,764,918,
644,123,-213,-470,-997,-1524,-1849,-2728,-4706,-6872,-8033,-8311,-8606,-9263,-10374,-12099,-14178,
-16038,-17494,-18462,-18681,-18585,-19181,-20403,-21292,-21680,-21751,-21186,-20242,-19918,-20252,-20308,-19722,-18661,
-17061,-15161,-13704,-12812,-11992,-11115,-10127,-8652,-6897,-5464,-4348,-3414,-2860,-2494,-1845,-971,-46,
916,1911,2755,3160,3067,2817,2801,3070,3365,3485,3278,2865,2338,1954,1833,1783,1646,
1330,725,114,-30,171,153,-18,-203,-599,-1151,-1449,-1450,-1350,-1075,-637,-238,142,
402,255,-317,-1039,-1848,-2664,-3205,-3402,-3624,-4211,-5010,-5623,-5999,-6159,-6143,-5917,-5571,
-5288,-5069,-4553,-3684,-3018,-2744,-2385,-1762,-1040,-317,549,1767,3390,5043,6301,7245,8144,
8900,9372,9832,10545,11424,12133,12496,12451,12256,12351,12678,12798,12720,12899,13396,13710,13554,
13149,12786,12442,11937,11313,10914,10910,10970,10842,10698,10703,10843,10960,10903,10788,10800,10775,
10588,10399,10201,9924,9799,9884,9847,9683,9572,9560,9615,9725,9656,9179,8499,7878,7297,
6803,6508,6380,6163,5886,5622,5245,4669,4071,3494,2671,1759,1332,1321,1256,1091,890,
591,483,696,859,890,958,981,1012,1202,1397,1361,1316,1356,1483,1761,2129,2450,
2686,2846,2959,3069,3214,3274,2968,2024,668,-792,-2401,-3926,-4899,-5586,-6550,-7691,-8860,
-10253,-11770,-13119,-14205,-15001,-15683,-16586,-17674,-18707,-19591,-20186,-20405,-20318,-20005,-19626,-19359,-18947,
-17942,-16316,-14437,-12753,-11568,-10929,-10524,-9668,-7998,-6127,-4687,-3493,-2413,-1762,-1382,-698,365,
1407,2065,2239,2105,2120,2316,2311,1926,1485,1312,1203,784,273,158,356,214,-281,
-857,-1434,-2019,-2404,-2397,-2111,-1756,-1355,-1023,-1029,-1194,-1107,-727,-319,2,23,-357,
-765,-1042,-1522,-2158,-2509,-2625,-2826,-3131,-3387,-3525,-3469,-3305,-3290,-3565,-4078,-4624,-4904,
-4907,-4899,-4847,-4647,-4580,-4743,-4786,-4574,-4296,-4027,-3680,-3138,-2426,-1717,-1062,-464,-61,
250,754,1408,1976,2307,2262,1987,1894,2038,2174,2162,1913,1388,753,234,67,316,
611,618,449,225,33,173,559,665,437,225,61,-33,195,697,1143,1512,2018,
2692,3218,3450,3603,3821,3907,3722,3414,3137,2871,2557,2220,2081,2216,2564,2897,2960,
2816,2823,3111,3578,4172,4589,4441,4029,3933,3958,3819,3887,4272,4560,4844,5550,6434,
7011,7353,7602,7778,7973,8211,8269,8109,7956,7913,7858,7667,7328,6727,5516,3780,2307,
1594,1217,743,60,-1168,-3063,-5032,-6446,-7085,-7033,-6723,-7043,-8168,-9276,-9679,-9675,-9661,
-9343,-8842,-9069,-9900,-10067,-9031,-7279,-5196,-3482,-2670,-2081,-980,491,2263,4302,6006,7014,
7506,7621,7792,8533,9567,10321,10841,11385,11818,11890,11669,11411,11093,10496,9910,9459,8789,
7972,7432,7051,6602,6144,5379,4053,2695,1734,1128,760,472,-115,-1180,-2450,-3435,-3835,
-3787,-3570,-3367,-3391,-3619,-3773,-3727,-3589});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 45;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,119,106,247,10,123,70,142,180,3,137,251,248,228,213,96,206,148,37,25,247,102,160,220,30,240,22,87,68,59,163,144,157,
63,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2dU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 313;
            through_enc.offs = 0x22U;
            through_enc.rng = 0x6819479U;
            through_enc.val = 0x82e19758U;
            through_enc.ext = 0x0U;
            through_enc.rem = 128;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,119,106,247,10,123,70,142,180,3,137,251,248,228,213,96,206,148,37,25,247,102,160,220,30,240,22,87,68,59,163,144,157,
63,129,12,119,103,166,100,90,104,151,159,107});
            expected_enc.storage = 0x2dU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0x45a68U;
            expected_enc.nend_bits = 19;
            expected_enc.nbits_total = 388;
            expected_enc.offs = 0x28U;
            expected_enc.rng = 0xfc48d00U;
            expected_enc.val = 0x2874b000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 45;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_5()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0xfc48d00U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 0;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ed03efcU), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3dc8c041U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3edb3ab0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f37c1f0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f4e9036U), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { -12495553, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 11890;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 225;
            through_st.in_mem = new Pointer<int>(new int[] { 1025136,962885,837759,477727,190605,794569,1831475,2786863,2939226,2037893,1228726,1758752,2914029,
3824153,4631258,4271205,2213159,1040888,2082101,2518737,1862353,2624827,3965036,3804258,3964814,5867809,
7030646,6316281,5708216,5537404,5391375,5577329,5873260,5282202,4424907,4355279,4711840,4636270,4045423,
3321870,2040444,-827355,-3721763,-3711070,-1503084,-564878,-1193809,-2341087,-4993025,-8479510,-9946854,-8883279,
-6577605,-4139854,-3051139,-5441163,-8935043,-9556583,-7349630,-5930151,-5886734,-4632948,-3688009,-6362095,-8975542,
-6766344,-1941457,1627772,4059933,3828252,1186699,772163,3231182,5423129,7559771,9742075,9622626,7818705,
6324459,5082539,5382568,7822346,9477726,8966110,8470885,8888664,8768228,7555596,6399703,6112374,5708106,
4369950,4048224,4241161,3067054,2053310,2685958,3005459,2492855,2180136,641280,-2126572,-3072306,-2280515,
-1416849,-814313,-712723,-2114367,-4432893,-5926882,-5539778,-3748778,-2159520,-1437806,-1361830,-2166904,-3017233,
-2854207,-2129620,-1724527});
            through_st.prefilter_mem = new Pointer<int>(new int[] { -2495247,-2254597,-1540043,-1090096,-1394430,-1209086,-1161573,-3112089,-5345831,-5518045,-4508360,-3487830,-2661049,
-2651630,-3418403,-4310918,-5198718,-5771941,-5292081,-4033371,-3363880,-4027846,-5888043,-8176876,-9180372,-7247648,
-4685590,-3796764,-2950132,-2385513,-4431480,-6240275,-4375151,-1840139,-1302147,-1174780,-1595661,-2848638,-2549632,
-156957,1881195,3119798,4652080,5456704,4346243,3087110,3462701,4395348,4610986,4905473,5520063,5292105,
4519587,4363728,3929548,2526667,2254086,3657384,4118388,3496406,3831254,4123502,3236715,2700551,3207846,
3545358,3025985,2143504,1932773,2541651,3024572,3246370,3536365,3584694,3918925,4500757,4161396,3460771,
3626250,3904777,3584263,3130017,3263549,4308441,5249901,4081917,2419349,2747038,4144189,4661715,4776192,
5568557,6559779,6667490,5439291,3573355,2725081,4115071,5246798,4417353,2977200,2515180,2603869,2872371,
3724754,4598840,4332799,3711023,4602109,6179679,5196011,3105817,2881569,3341763,2439213,921245,409262,
1890188,4084012,4273443,3288961,3236327,4122291,4807341,5151601,5083597,5534149,6805129,6863481,5483524,
4885915,5370063,5962547,6127610,5719438,4430220,2865144,1799584,1467417,1703774,1788166,72772,-4029147,
-7742538,-8294211,-7562203,-8015794,-9026650,-9760820,-11993308,-15117692,-15723433,-13829595,-12036538,-10746281,-10191062,
-11412487,-12948273,-12619756,-11928339,-11250239,-9258353,-6896815,-6240660,-7093062,-7261218,-5327918,-2464836,-170907,
1092664,975882,-490319,-408422,1425951,2730908,3597794,4746075,5057131,3988044,2380343,1833110,3347399,
5155771,5422604,4808185,4111647,3505023,3495600,3850312,4022955,3532660,1704614,-255925,-119712,1785969,
3200935,4257287,4441801,3644298,2878956,2834106,3060001,2799085,2464239,2685426,2229952,850423,1039260,
3593125,4743683,3976488,4050414,4313780,3232634,2589562,2781669,1666945,238679,484660,561472,-463747,
-1482817,-2399483,-3437592,-3220684,-2085663,-1637756,-1594537,-1671742,-2804897,-4731235,-5678824,-4271415,-2468344,
-1618835,-1224602,-1368174,-2352654,-2510758,-1267211,-26743,845283,949510,154052,771722,2892826,3972305,
4188549,5271509,6299170,5649721,3656587,2585479,3797897,5225962,5136656,5026258,5617712,6049830,6040192,
5375401,4336651,4207220,5132919,5921806,5375802,3110711,1215708,1465994,1250152,-444758,-1100504,21414,
445159,-287812,-827857,-728925,57108,886347,246551,-1300915,-2169050,-2787941,-4045191,-3929867,-2307218,
-1669261,-1759577,-1176920,-1280961,-2622607,-3434018,-3440766,-3498920,-3318892,-3200512,-4382204,-5643556,-4596602,
-2912523,-3281167,-3750774,-2593652,-2577682,-4339581,-4686506,-3605768,-4139681,-5588433,-5472300,-4934895,-5728491,
-5452616,-3005865,-2337612,-4133311,-4491711,-3686435,-3804198,-2967182,-2240354,-3968261,-5283690,-3917664,-2196115,
-1453521,-1310174,-1485905,-1430414,-1520124,-2690358,-2278504,-332700,1077335,1393936,1116618,1044720,1999690,
2547515,1182506,-493583,-1049814,-1125173,-1526778,-1573055,-1561988,-1992471,-3819894,-7169789,-9354355,-8413051,
-6477250,-6371763,-8411559,-12064758,-15469722,-16541179,-16210783,-16122470,-14740238,-12047914,-11459930,-13664193,-15178677,
-13707578,-10287410,-7610893,-6845789,-7192544,-7476009,-7314849,-6582705,-5048770,-2395816,761549,2609614,2512279,
1642858,1552098,3073324,5928203,8733303,10697894,10453713,8008352,5826591,4845180,4394618,5183918,6705783,
6942314,6180651,5014104,3631092,3269631,4632995,5831896,5608862,4902707,5337089,6875954,7458804,6531866,
6167727,6130655,5587934,4330668,3198748,2488107,2499388,3160291,3641170,3720227,4386854,5504036,4992847,
2867429,1945019,2197961,2109907,2722269,4124129,3711656,1441037,-13440,-260205,-325108,43342,713254,
1467128,1325612,425312,-1839975,-4160135,-3989097,-1984694,-853985,-582010,68843,251930,-649400,-104017,
1960364,3428151,3120315,2330795,1423932,531821,1345085,3817224,5932177,7516278,8205806,7346229,6243768,
7401696,9823848,11013911,10209630,9325485,10048416,10382633,8655539,7205347,7145143,6567203,5641515,5488952,
6159684,6733130,6501298,5912911,5844513,5669005,5237497,5192449,4861089,4144092,4101504,4051748,3669190,
4423477,5628934,5176526,3902669,3675143,4143528,4360824,4467322,4345466,3519509,2312219,2265333,2622310,
1742087,879071,1645038,2114243,692935,-271456,662858,1215211,237499,-22178,690945,868919,271110,
45016,86801,-597431,-1543189,-1703740,-1796503,-2179263,-1781735,-1524499,-2365403,-1382354,993737,578389,
-865050,85224,241482,-1983470,-2700261,-1216267,-180592,-651023,-1329322,-1463258,-963338,-187761,760663,
1145063,436239,257034,1241300,1735269,1444238,1100167,-558307,-1738358,-1300687,-1183533,-2447348,-2771123,
-2267507,-4736363,-9777903,-11763184,-8977441,-6073962,-6314390,-7978383,-10241611,-13439126,-15948907,-16329168,-15817122,
-14712804,-12239615,-11083923,-13859375,-16789638,-16176437,-14670520,-13610466,-11049030,-9149524,-11109074,-13605185,-12671698,
-10076471,-7770847,-4911251,-2699451,-3346667,-4765763,-4512652,-3775393,-2781930,-180175,1872908,1632224,1214191,
1154362,171708,-257976,1126053,2446383,3192242,3912091,4638288,4631095,3351484,1560497,860289,1665159,
2822689,3094452,2558892,1293225,322274,-398407,-136455,704873,921350,534279,-283074,-1660961,-2057234,
-519785,804865,31331,-606416,-768818,-1746734,-2629002,-1927753,-894325,-481243,296994,1133595,1242948,
1410259,1152202,-355133,-2186246,-3152068,-3951999,-4477701,-3852631,-2775983,-2999415,-4630847,-5859837,-5588866,
-4994726,-4340995,-3718399,-2848409,-2218040,-2263515,-2351791,-1000730,762175,464579,-731879,-215381,1086524,
1874784,2322458,3352380,5326220,7733409,8853420,8251062,7737801,8133451,8100046,7401250,7642083,8960983,
10078969,9922684,8941060,7492910,6850864,7918900,8927538,8280567,7543284,8548034,9960536,9516312,7784106,
6668359,6591569,6446375,5575574,4777891,5316121,6688905,6948592,6215406,6071230,6593064,7149096,7140901,
6500078,6227491,6677030,6532850,5853939,5730859,5577878,5132648,5585058,6368421,5920931,5378007,5494338,
5831646,6098705,6357776,5692173,3978613,2854069,2677958,2460271,2459671,2971274,3474065,3030881,2651802,
2534868,1909825,863101,419109,137729,-1224381,-2094556,-668306,773292,545350,95815,-153012,-677910,
-79272,1169192,1095253,654725,825322,682780,729678,1399988,1537199,710826,651845,972358,1353285,
2049807,2589243,2622821,2471875,2305572,2211360,2268496,2479437,2220362,758088,-2043159,-4310681,-5569757,
-7077049,-7721514,-6397444,-5823775,-7380442,-8697692,-9513382,-11149090,-12512818,-12756697,-12508241,-11987612,-12009711,
-13333931,-14646471,-15089631,-15113977,-14473340,-13298797,-12179969,-11200823,-10738187,-10964091,-10206133,-7524083,-4363020,
-2327758,-1972067,-2981364,-4489746,-5055624,-2959506,900543,2749845,2133965,2011049,2277669,1184010,473952,
1952598,3925215,4492279,3559594,1981389,826722,1354700,2105291,1402413,-157139,-623049,203739,359596,
-977130,-1611386,-303315,908080,-362914,-1896043,-2531935,-2889911,-3277173,-2817383,-1448285,-301200,157135,
563654,527394,-653081,-1308031,-377211,876367,1224518,1118831,87245,-1542349,-1890499,-1604588,-2606258,
-3540134,-2763517,-2016602,-2436030,-2985503,-2972184,-2646136,-1936295,-1459522,-1969069,-3147693,-4291494,-4741837,
-3987750,-3025183,-2981970,-2796831,-2158675,-2580568,-3481485,-3090108,-2072046,-1671463,-1537531,-1052776,-40868,
988444,1413591,1627999,1796942,1365618,1236380,2217978,3142023,3191568,2569781,1233044,263317,839836,
1753451,1809153,1286500,308375,-975100,-1748207,-1663199,-540268,1061068,1402463,404056,-312540,-641649,
-648197,593715,1687343,777612,-525328,-599870,-533509,-347547,913614,2175996,2255036,2213655,3001511,
4000513,3808394,2927331,2746282,3106522,2699783,1642604,1025136,962885,837759,477727,190605,794569,
1831475,2786863,2939226,2037893,1228726,1758752,2914029,3824153,4631258,4271205,2213159,1040888,2082101,
2518737,1862353,2624827,3965036,3804258,3964814,5867809,7030646,6316281,5708216,5537404,5391375,5577329,
5873260,5282202,4424907,4355279,4711840,4636270,4045423,3321870,2040444,-827355,-3721763,-3711070,-1503084,
-564878,-1193809,-2341087,-4993025,-8479510,-9946854,-8883279,-6577605,-4139854,-3051139,-5441163,-8935043,-9556583,
-7349630,-5930151,-5886734,-4632948,-3688009,-6362095,-8975542,-6766344,-1941457,1627772,4059933,3828252,1186699,
772163,3231182,5423129,7559771,9742075,9622626,7818705,6324459,5082539,5382568,7822346,9477726,8966110,
8470885,8888664,8768228,7555596,6399703,6112374,5708106,4369950,4048224,4241161,3067054,2053310,2685958,
3005459,2492855,2180136,641280,-2126572,-3072306,-2280515,-1416849,-814313,-712723,-2114367,-4432893,-5926882,
-5539778,-3748778,-2159520,-1437806,-1361830,-2166904,-3017233,-2854207,-2129620,-1724527});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1604,2157,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1604,2157,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
2312,2649,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -3438,-3477,-3853,-4281,-4448,-4398,-4138,-3657,-3044,-2598,-2374,-2329,-2400,-2427,-2260,-2045,-2125,
-2479,-2801,-3145,-3639,-4029,-4000,-3659,-3166,-2581,-2030,-1478,-617,699,2133,3199,3923,4664,
5419,5885,6233,6821,7552,8156,8628,9061,9481,9870,10089,9959,9534,9058,8645,8138,7403,
6558,5723,4914,4178,3468,2668,1910,1454,1189,954,772,509,53,-321,-465,-649,-881,
-785,-403,-257,-466,-596,-367,-3,160,125,209,600,974,863,392,224,449,476,
93,-259,-445,-685,-876,-990,-1402,-2082,-2561,-2989,-3592,-4083,-4229,-4262,-4374,-4587,-4815,
-4834,-4615,-4415,-4273,-4186,-4025,-3721,-3322,-3030,-2866,-2754,-2748,-2739,-2520,-2319,-2512,-2957,
-3407,-3835,-4389,-5077,-6050,-7652,-9752,-11620,-12881,-13833,-14680,-15494,-16570,-17853,-18780,-19225,-19582,
-19938,-20223,-20686,-21353,-21764,-21622,-21121,-20477,-19763,-19006,-18229,-17392,-16335,-14935,-13359,-11969,-10908,
-9991,-8986,-7826,-6562,-5278,-3939,-2525,-1166,10,1007,1865,2682,3608,4609,5437,5943,6410,
7073,7715,7975,7939,7908,7925,7970,8126,8372,8731,9155,9327,8857,8041,7423,7010,6508,
5863,5313,5127,5209,5185,4985,4939,5180,5485,5681,5901,6318,6757,6867,6630,6315,6042,
5725,5515,5476,5591,5687,5739,5930,6187,6160,5902,5834,5877,5451,4705,4270,4411,4692,
4892,5167,5348,5290,5452,6067,6723,7265,7905,8341,8443,8733,9482,10336,11072,11721,12163,
12332,12455,12661,12691,12425,12076,11825,11582,11355,11257,11181,11015,10856,10765,10661,10418,10048,
9580,9138,8735,8268,7593,6647,5549,4467,3501,2775,2266,1844,1371,948,615,462,660,
1139,1588,1850,1983,2140,2339,2412,2441,2656,3124,3685,4248,4810,5399,6020,6482,6614,
6533,6415,6238,5992,5672,5328,5132,5088,5015,4850,4587,4249,4066,4254,4428,4313,3960,
3548,3052,2384,1707,1221,726,17,-640,-1051,-1362,-1740,-2456,-4206,-6754,-8747,-9672,-10375,
-11420,-12579,-13768,-15201,-16828,-18161,-18760,-18756,-18882,-19613,-20613,-21313,-21596,-21610,-21359,-20894,-20609,
-20729,-20882,-20448,-19387,-18094,-16765,-15347,-13964,-12915,-12087,-10779,-8709,-6641,-5330,-4545,-3920,-3457,
-2985,-2254,-1428,-688,84,914,1716,2538,3130,3388,3383,3234,2998,2846,2824,2717,2449,
2105,1622,1061,470,-167,-1069,-1956,-2411,-2622,-2943,-3272,-3478,-3712,-3931,-3949,-4030,-4340,
-4583,-4617,-4700,-4832,-4871,-5114,-5804,-6604,-7152,-7356,-7130,-6540,-6090,-5936,-5861,-5774,-5582,
-5153,-4735,-4680,-4883,-5087,-5250,-5239,-5047,-4747,-4353,-3894,-3434,-2820,-1827,-544,692,1667,
2402,2990,3341,3488,3777,4357,4915,5354,6017,6902,7460,7531,7730,8508,9468,10034,10358,
10798,11197,11305,11246,11222,11266,11265,11019,10555,10320,10500,10664,10436,9985,9559,9145,8724,
8298,7776,7311,7214,7377,7273,6889,6559,6389,6421,6738,7203,7611,7927,8104,8043,7836,
7857,8157,8516,8716,8670,8400,8146,8215,8540,8863,9136,9260,8993,8354,7578,6887,6607,
6797,6950,6692,6228,5867,5786,6051,6357,6431,6241,5712,4880,4226,4094,4159,3988,3539,
2847,1946,1081,310,-768,-2280,-3730,-4875,-5904,-6773,-7404,-8132,-9089,-9945,-10515,-10734,-10809,
-11169,-11972,-12818,-13455,-13961,-14229,-14143,-13956,-13951,-14093,-14073,-13664,-12783,-11540,-10186,-8976,-7909,
-6765,-5490,-4256,-3176,-2163,-1112,-163,402,684,1068,1657,2372,3234,4171,5017,5679,6027,
6086,6058,6031,5662,4875,3944,2856,1537,442,-34,-351,-1058,-1784,-2223,-2552,-2926,-3096,
-3126,-3324,-3654,-4001,-4410,-4765,-4917,-5078,-5532,-6025,-6102,-5826,-5642,-5653,-5651,-5618,-5599,
-5584,-5744,-6138,-6429,-6418,-6509,-6943,-7365,-7435,-7405,-7587,-7761,-7717,-7676,-7676,-7498,-7209,
-6888,-6292,-5527,-5016,-4765,-4533,-4215,-3637,-2741,-1801,-1001,-287,332,691,727,621,701,
1061,1437,1627,1758,2047,2580,3300,4024,4606,4961,4966,4573,4136,4123,4459,4684,4683,
4587,4329,3955,3835,3982,3990,3765,3555,3392,3207,3124,3111,2872,2480,2357,2411,2310,
2212,2278,2173,1816,1614,1693,1798,1826,1837,1851,1849,1934,2215,2563,2693,2654,2732,
2935,3158,3431,3645,3767,3930,4154,4090,3815,3778,3958,3945,3689,3529,3555,3487,3208,
2774,2206,1408,499,-428,-1580,-3099,-4729,-6110,-7225,-8470,-10097,-11657,-12612,-13152,-13735,-14337,
-14868,-15525,-16252,-16768,-17043,-17085,-16937,-17047,-17432,-17511,-16916,-15914,-14701,-13448,-12546,-11973,-11321,
-10530,-9703,-8743,-7562,-6414,-5445,-4577,-3566,-2275,-849,645,2219,3648,4800,5901,6969,7824,
8477,9121,9892,10729,11274,11413,11576,11957,12194,12180,12212,12383,12642,12764,12494,11956,11480,
11119,10830,10674,10503,10096,9550,9045,8677,8546,8573,8419,7981,7474,7020,6627,6428,6502,
6618,6551,6261,6034,5992,5869,5511,5175,5028,4917,4795,4756,4697,4482,4439,4714,5098,
5289,5297,5258,5163,5056,5214,5687,6055,5988,5653,5208,4850,4839,5147,5483,5750,5951,
6045,6204,6613,7009,7097,6973,6811,6545,6144,5801,5705,5817,5957,6066,6223,6430,6538,
6473,6229,5860,5472,5057,4392,3323,2050,945,181,-330,-726,-1059,-1434,-1840,-2119,-2223,
-2292,-2332,-2269,-2275,-2476,-2598,-2480,-2331,-2340,-2437,-2533,-2440,-1969,-1294,-709,-191,395,
960,1325,1421,1456,1558,1614,1596,1597,1501,1239,1039,953,787,654,829,967,844,
484,-12,-503,-797,-1027,-1563,-2332,-2984,-3643,-4540,-5502,-6303,-7259,-8437,-9575,-10880,-12580,
-14209,-15405,-16471,-17536,-18349,-18908,-19454,-19871,-19902,-19740,-19859,-20269,-20601,-20753,-20806,-20567,-19935,
-19239,-18639,-17980,-17140,-16083,-14779,-13395,-12216,-11192,-9972,-8451,-6902,-5541,-4406,-3362,-2330,-1291,
-250,736,1564,2207,2752,3241,3737,4417,4952,4983,4628,4363,4224,3977,3626,3215,2697,
2043,1313,734,420,-50,-697,-1232,-1705});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 42;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,112,174,70,83,96,39,23,177,231,232,185,83,17,139,84,132,184,165,200,202,232,229,235,161,7,197,54,194,230,86,204,204,
204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2aU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 289;
            through_enc.offs = 0x1fU;
            through_enc.rng = 0x757977f3U;
            through_enc.val = 0x214f7000U;
            through_enc.ext = 0x0U;
            through_enc.rem = 63;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,112,174,70,83,96,39,23,177,231,232,185,83,17,139,84,132,184,165,200,202,232,229,235,161,7,197,54,194,230,86,63,232,
98,229,165,142,127,103,246,80,177});
            expected_enc.storage = 0x2aU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0xe7f67U;
            expected_enc.nend_bits = 22;
            expected_enc.nbits_total = 367;
            expected_enc.offs = 0x25U;
            expected_enc.rng = 0x74bdea00U;
            expected_enc.val = 0x23f98c00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 42;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_6()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x74bdea00U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 0;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ebf43e4U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3dd3d103U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3eafa364U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f258848U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f7094a9U), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { -5936171, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 20806;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 255;
            through_st.in_mem = new Pointer<int>(new int[] { -3172639,-3266611,-2548759,-1981854,-1824759,-1810004,-2186623,-2543989,-2273234,-1727844,-1648379,-1571987,-1174674,
-1418592,-2220999,-2020904,-1112818,-913346,-1468972,-1834949,-1890447,-1175283,430141,1555096,1601159,1686137,
2282911,2556919,2084840,1207263,1016387,1312322,1186573,917874,984639,587941,-150975,-57989,286080,
-94436,-61254,1118602,1074565,90293,-956027,-1734258,-2018508,-1513254,-1431736,-2826419,-4110092,-4103314,
-4532559,-5912280,-6729614,-6661187,-7788181,-9284836,-9844729,-11227920,-13647600,-14401221,-13628470,-13830782,-14481610,
-14103728,-13562830,-13853018,-13660083,-12335221,-11563739,-12615186,-13880233,-13812638,-13279331,-12967212,-11803742,-10047178,
-9396749,-9362360,-8752071,-7605822,-6200915,-4539809,-3410984,-3400369,-3310901,-1878965,103469,1152621,1334240,
1244709,1569288,2161544,2824251,3470778,3885063,3843668,3594611,3588246,3693704,4022806,5081200,4905055,
3169361,1607351,1757888,2111175,1583408,1005674,544268,-146512,-1021814,-1734911,-1564909,-835192,-1667082,
-2680830,-2619579,-2694318});
            through_st.prefilter_mem = new Pointer<int>(new int[] { -8935043,-9556583,-7349630,-5930151,-5886734,-4632948,-3688009,-6362095,-8975542,-6766344,-1941457,1627772,4059933,
3828252,1186699,772163,3231182,5423129,7559771,9742075,9622626,7818705,6324459,5082539,5382568,7822346,
9477726,8966110,8470885,8888664,8768228,7555596,6399703,6112374,5708106,4369950,4048224,4241161,3067054,
2053310,2685958,3005459,2492855,2180136,641280,-2126572,-3072306,-2280515,-1416849,-814313,-712723,-2114367,
-4432893,-5926882,-5539778,-3748778,-2159520,-1437806,-1361830,-2166904,-3017233,-2854207,-2129620,-1724527,-1586495,
-2271965,-3676277,-4120274,-3314171,-2527940,-1637061,-572107,264079,-43341,-678642,-1274206,-1721695,-1585092,
-807056,-507847,-1584076,-2755530,-2841947,-3129888,-3955633,-3833150,-2356532,-1060764,-228670,451049,671195,
1013811,2618610,5011267,6303113,5676798,4930890,5445330,5957925,5238035,5041005,6237848,7184828,7113744,
6944155,7074396,7287172,7418234,6960906,5665950,4377761,3907756,3873361,3234600,1989224,1087099,608912,
202405,4383,-341301,-1146147,-1465615,-694319,-192138,-232068,-159358,-602950,-1555059,-1499342,-787038,
-1039348,-1349001,-148048,1082388,350423,-1013958,-818778,571817,1265469,665805,-45060,420861,1729941,
1900529,143746,-1399010,-447293,1059220,386447,-1276325,-1384655,-920979,-1256436,-1203182,-1005136,-2295783,
-3646633,-3241112,-3326502,-4306254,-4217971,-3106509,-2733359,-3077218,-3559724,-3752026,-3036039,-2072864,-2016140,
-2130833,-2268872,-1912317,-1227675,-651785,-844921,-1189812,-1302046,-1667412,-1651438,-785749,-724929,-2215263,
-3366030,-3659906,-3846263,-4625312,-5514539,-7104589,-10278760,-13302797,-13642713,-12304093,-11813156,-11967961,-12353169,
-13926422,-15435361,-14765428,-13360682,-13273631,-13488867,-13416768,-14320953,-15440993,-14802205,-12789625,-11231920,-10338390,
-9656012,-9041221,-8494219,-7771089,-6355738,-4301415,-2720394,-2513995,-3007598,-2945570,-2021740,-769413,369246,
1227736,2241873,3371721,4015168,4100535,4089856,4133044,4492242,5440650,6316761,6223143,5412933,5564063,
6653792,6975107,5804864,4752185,4750548,4928110,5053242,5535545,6000028,6614012,7100813,6329116,3805156,
2099184,2408862,2868858,2250577,1356433,1349281,2502319,3485773,3101976,2366335,2874244,4021535,4431743,
4172663,4391385,5333459,5679766,4601892,3248162,2783067,2761571,2413622,2657137,3228535,3835358,3828187,
3706943,4308235,4695916,3690547,2727782,3347514,3760392,1865786,293343,1108875,3200918,3860985,3701848,
4131923,3915852,3048110,3913596,5868613,6414390,6350476,7084875,6642491,5542294,6375009,8433241,9323488,
9364836,9460664,9011522,8164868,8080281,8495817,7901482,6707498,6204106,6391097,6269657,6185900,6574821,
6604724,6189391,6116077,6296919,6187763,5554524,4885039,4256312,4075281,3963471,3453734,2314853,790134,
-413657,-1022705,-1212322,-822769,-379973,-336338,-804500,-890299,-781540,-248847,1094850,2367472,2538878,
2048780,1681362,1861378,2129867,1736032,1600657,2380330,3548708,4217164,4570020,4911817,5367688,5860627,
5590890,4523051,3731701,3530384,3216224,2824856,2370615,2075711,2470574,2972749,2826932,2405251,1902471,
1433691,1860912,3268097,3326256,2249413,1203912,745373,148187,-861055,-1308322,-941917,-1277368,-2458027,
-2680627,-2076656,-1919564,-2385066,-4001748,-8676905,-13020669,-12312816,-9162738,-8821723,-10654460,-11763426,-12598367,
-14328283,-16003306,-15798670,-13611168,-11509291,-12039313,-14594804,-16145736,-15531311,-14253342,-13325386,-12248547,-11217795,
-11669391,-13153174,-13362067,-11051714,-8216884,-6614760,-5672917,-4491868,-3764045,-4282428,-4543165,-2068382,1856372,
3119937,1289792,-59258,-232334,-511902,-190582,1160267,1998495,2153713,2739422,3451288,3846531,4421180,
3984116,2979762,2061023,1468127,1020233,1219305,1658400,1296723,571529,95581,-685108,-1301339,-1768884,
-2320395,-3797192,-4289918,-3065397,-2345514,-2925707,-3155689,-2854011,-3095260,-3177584,-2488836,-2757942,-3745691,
-3661715,-2954944,-3176537,-3428234,-3128404,-3987948,-5968153,-6842632,-6301940,-5229594,-3593646,-1963853,-2174812,
-3110759,-3339730,-3244499,-2760969,-1672257,-1453746,-2683785,-3706763,-3835577,-3792973,-3180412,-2432278,-1871950,
-1302614,-794310,-508216,405181,2334791,4132705,4728436,4418748,4034724,3884177,3274678,2654739,3326684,
4696175,4962400,4817798,6005012,7321655,6525985,4874054,5441963,7935807,9159263,8135239,7491743,8165937,
8268326,7321525,6703846,6810958,7074741,6917453,5913319,4869255,5522169,7077630,7122682,5617807,4564322,
4389639,4177067,3894044,3614912,2959972,2872740,4094384,5099750,4106261,2895486,2880750,3333366,4056314,
5243334,6044299,6096512,5970345,5595143,4729039,4093547,4900259,6055945,6481921,6051218,5166477,4220712,
4120366,5287323,6378291,6569771,6563414,6120834,4595481,2907731,1953993,1825398,3084321,4837416,4802595,
3213139,2210854,2347672,3272763,4640214,4970960,4208686,3172806,1667531,101438,319366,2055677,2781492,
1854770,611024,-660158,-1941370,-2347466,-2493876,-4225031,-6664992,-7339975,-6981538,-7209862,-7186694,-6745737,
-7530720,-8915969,-9090230,-8444679,-7357177,-6901901,-8115339,-10151042,-10820513,-10484210,-10338991,-9675017,-8389685,
-7923153,-8553737,-9152777,-8576466,-6970835,-4786244,-2762227,-1543903,-1301863,-1144198,-173267,1066154,1681546,
1808900,2197993,2976003,3203919,2214097,1402051,1993097,3068697,3946660,4988050,5824841,6027775,5793872,
4914444,3944503,3624399,3611292,2193872,255040,-818297,-2033353,-3647969,-3540825,-1678142,-1319320,-3111517,
-3623704,-2894189,-2713339,-3099789,-2493981,-2024985,-2731544,-3393862,-3666238,-4133378,-4163473,-3550088,-3680337,
-4979380,-5418050,-4017001,-2618420,-2825684,-3511359,-3464869,-3336665,-3373734,-3378445,-4086030,-5142794,-4962969,
-3904760,-4315794,-5776630,-5994117,-4811591,-4444998,-5294918,-5373967,-4587940,-4573195,-4715942,-3986854,-3422839,
-3114213,-1790599,-732207,-1302594,-2053609,-1977224,-1482433,-222102,1435535,2166239,2170311,2309555,2359099,
1674437,571990,12475,709207,1905237,2191948,1661097,1536165,2263816,3440794,4534208,4992942,4856117,
4283892,3068395,1441259,1019585,2487807,3909325,3661099,2873637,2483903,1761371,1127726,1938334,2958241,
2479210,1529757,1452962,1516456,1326200,1630333,1866060,932377,158853,1019842,1669266,1067563,1017799,
1629334,969467,-127235,288313,1315186,1470217,1219335,1166905,1185951,1129017,1484140,2339178,2786249,
2107124,1494768,1950040,2509961,2716599,3058405,2984465,2739109,2981999,3331998,2289970,1386394,2192289,
3058389,2378449,1375134,1611070,2274626,1905576,999542,193251,-622251,-1913296,-2858224,-3490418,-4981544,
-7192536,-8580428,-8561955,-8320871,-9538379,-11867948,-12593104,-11073449,-9960337,-10468228,-10904232,-10983270,-11825599,
-12515963,-12098358,-11428240,-10642825,-9890388,-10856229,-12050210,-11033369,-8321200,-6288575,-4808715,-3899638,-4567523,
-5360940,-4685319,-3715403,-3081976,-2029120,-534104,56305,28423,210057,1329062,3097075,4443193,5597820,
6843376,7216483,6959832,7458696,7999955,7783660,7481558,7845881,8761731,9505750,8823950,7495808,7679510,
8672581,8316834,7434345,7614160,8203164,8668670,8266641,6735963,5472354,5395772,5574369,5647492,6014706,
5857423,4785709,3966314,3798802,4049694,4794356,5361041,4636253,3378376,2826655,2732255,2703185,3256360,
4252307,4469803,3791502,2836931,2916810,3535107,3177527,2139399,2009565,2577279,2634422,2521170,2786185,
2680304,2005080,2577501,3853611,4469028,3914420,3282198,3094601,2841264,2733747,3753448,5140760,5001279,
3445609,2306718,1650342,1733297,2934663,4234529,4538445,4462251,4355953,4041170,4365161,5486847,5684878,
4666603,3852316,3620485,3094973,2378589,2369792,3170774,3963762,4147260,4106296,4369871,4671128,4392800,
3750544,2977426,2315518,2010990,1662020,383055,-1680289,-3172639,-3266611,-2548759,-1981854,-1824759,-1810004,
-2186623,-2543989,-2273234,-1727844,-1648379,-1571987,-1174674,-1418592,-2220999,-2020904,-1112818,-913346,-1468972,
-1834949,-1890447,-1175283,430141,1555096,1601159,1686137,2282911,2556919,2084840,1207263,1016387,1312322,
1186573,917874,984639,587941,-150975,-57989,286080,-94436,-61254,1118602,1074565,90293,-956027,
-1734258,-2018508,-1513254,-1431736,-2826419,-4110092,-4103314,-4532559,-5912280,-6729614,-6661187,-7788181,-9284836,
-9844729,-11227920,-13647600,-14401221,-13628470,-13830782,-14481610,-14103728,-13562830,-13853018,-13660083,-12335221,-11563739,
-12615186,-13880233,-13812638,-13279331,-12967212,-11803742,-10047178,-9396749,-9362360,-8752071,-7605822,-6200915,-4539809,
-3410984,-3400369,-3310901,-1878965,103469,1152621,1334240,1244709,1569288,2161544,2824251,3470778,3885063,
3843668,3594611,3588246,3693704,4022806,5081200,4905055,3169361,1607351,1757888,2111175,1583408,1005674,
544268,-146512,-1021814,-1734911,-1564909,-835192,-1667082,-2680830,-2619579,-2694318});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1634,1962,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1634,1962,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1604,2157,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -2346,-2970,-3435,-3880,-4230,-4348,-4349,-4285,-4095,-3874,-3811,-3978,-4252,-4439,-4664,-5247,-6114,
-6863,-7279,-7401,-7241,-6995,-6802,-6695,-6573,-6279,-5803,-5238,-4627,-4121,-3936,-3977,-3964,-3662,
-3210,-2782,-2437,-1960,-1077,124,1251,2187,3239,4452,5336,5827,6404,7179,7769,8225,8866,
9540,9974,10331,10818,11283,11560,11823,12298,12901,13329,13457,13528,13743,13855,13566,13075,12761,
12605,12330,11785,11192,10909,10902,10798,10448,9966,9447,8983,8649,8438,8352,8375,8210,7862,
7647,7672,7809,7939,7987,7913,7663,7300,7158,7416,7553,7362,7205,7234,7330,7454,7447,
7165,6795,6493,6222,6005,5796,5519,5361,5517,5814,6001,6082,6117,6033,5758,5445,5373,
5431,5260,4689,4016,3484,2923,2257,1668,1050,155,-905,-2036,-3311,-4546,-5564,-6604,-7827,
-9135,-10479,-11808,-12998,-13870,-14193,-14120,-14081,-14232,-14462,-14856,-15265,-15295,-14898,-14301,-13828,-13883,
-14341,-14492,-13959,-12857,-11512,-10274,-9326,-8554,-7762,-6667,-5034,-3099,-1387,-213,376,539,749,
1336,2069,2508,2716,3093,3577,3883,4228,4840,5412,5566,5397,4941,4286,3631,3086,2692,
2346,1764,914,90,-528,-904,-1059,-854,-350,16,-159,-623,-889,-923,-975,-1179,-1386,
-1370,-1362,-1719,-2162,-2327,-2299,-2117,-1933,-2180,-2730,-3082,-3296,-3521,-3476,-3230,-3113,-3216,
-3401,-3391,-3078,-2741,-2585,-2572,-2761,-3075,-3240,-3206,-3058,-2808,-2541,-2188,-1572,-823,-202,
192,316,378,680,1055,1222,1363,1663,1958,2175,2476,2889,3174,3106,2797,2554,2542,
2630,2601,2397,2111,1724,1206,768,533,271,-145,-492,-514,-248,74,293,477,657,
749,799,957,1272,1605,1754,1868,2333,3058,3751,4506,5225,5492,5510,5825,6337,6651,
6649,6413,6018,5661,5367,5230,5423,5859,6209,6230,5972,5739,5714,5806,5676,5200,4541,
3906,3061,1827,724,213,-47,-666,-1908,-3523,-4979,-6038,-6921,-7705,-8565,-9836,-11369,-12767,
-13927,-14663,-14833,-14825,-15052,-15401,-15837,-16089,-15674,-14642,-13605,-12853,-12119,-11179,-10219,-9395,-8460,
-7100,-5578,-4275,-3298,-2405,-1218,322,1926,3414,4738,5728,6290,6607,6898,7253,7604,7874,
8076,8251,8492,8872,9257,9468,9523,9509,9399,9339,9195,8754,8163,7632,7169,6795,6456,
5945,5273,4624,4026,3611,3399,3117,2673,2317,2075,1813,1693,1815,1842,1479,985,486,
-14,-397,-675,-1131,-1790,-2393,-2839,-3040,-2957,-2910,-3066,-2938,-2487,-2158,-2028,-1787,-1473,
-1384,-1447,-1313,-997,-747,-398,403,1403,2370,3490,4736,5747,6390,6819,7301,7965,8476,
8473,8123,7716,7297,6922,6686,6593,6597,6545,6365,6306,6536,6859,7082,7126,7008,6796,
6587,6339,5888,5144,4248,3481,2947,2468,1913,1441,1160,882,468,77,-250,-700,-1259,
-1861,-2542,-3110,-3385,-3614,-3984,-4290,-4493,-4621,-4551,-4373,-4217,-3898,-3381,-2875,-2418,-2009,
-1797,-1480,-891,-459,-442,-398,2,462,710,847,860,597,-12,-643,-1182,-1623,-1997,
-2462,-3065,-3646,-4181,-4789,-5414,-5953,-6752,-8003,-9453,-10745,-12020,-13544,-15004,-15908,-16377,-16872,
-17520,-18149,-18726,-19267,-19606,-19605,-19474,-19524,-19914,-20618,-21146,-20965,-20386,-19944,-19491,-18938,-18713,
-18557,-17907,-16900,-15782,-14625,-13726,-13011,-12064,-11071,-10242,-9112,-7522,-5972,-4637,-3367,-2150,-939,
227,1176,2064,3126,4064,4490,4885,5609,6401,7176,8198,9239,9764,9738,9478,9254,9230,
9247,8878,8244,7632,6941,6065,5238,4701,4418,4211,3986,3834,3793,3784,3742,3514,3119,
2998,3226,3188,2700,2286,2133,2045,2043,2285,2581,2794,2918,2989,3067,3195,3365,3560,
3681,3553,3133,2655,2491,2476,2425,2528,2968,3557,4082,4506,4829,5233,5907,6560,6878,
6993,7278,7635,7742,7676,7758,8046,8410,8822,9256,9609,9882,9949,9840,9777,9767,9596,
9292,9071,8995,9040,9177,9316,9325,9192,8808,8380,8202,8190,8067,7880,7887,8074,8269,
8493,8707,8736,8518,8381,8506,8756,8935,8931,8831,8879,9188,9771,10608,11335,11517,11341,
11271,11463,11863,12272,12334,11899,11126,10258,9586,9301,9130,8863,8453,7782,6734,5598,4835,
4451,4092,3620,3053,2225,1120,51,-909,-1896,-2841,-3818,-5066,-6356,-7395,-8401,-9351,-9850,
-10086,-10807,-12003,-13137,-13888,-14213,-14363,-14686,-15089,-15329,-15628,-16040,-15845,-14857,-13815,-13197,-12661,
-11871,-10891,-9899,-9031,-8234,-7356,-6518,-5817,-4940,-3607,-2181,-1056,-162,556,898,892,914,
1146,1340,1368,1349,1542,1798,1824,1633,1533,1584,1408,812,140,-334,-736,-1361,-2132,
-3040,-4009,-4802,-5265,-5513,-5753,-6041,-6268,-6336,-6307,-6286,-6299,-6293,-6398,-6739,-7190,-7532,
-7705,-7735,-7692,-7709,-7755,-7667,-7488,-7404,-7289,-6984,-6609,-6310,-6123,-6054,-6004,-5837,-5524,
-5072,-4603,-4380,-4412,-4394,-4168,-3781,-3266,-2735,-2384,-2204,-1987,-1487,-610,326,1011,1432,
1713,1912,2153,2567,3012,3155,2877,2493,2357,2333,2231,2157,2147,1973,1661,1518,1629,
1801,1780,1437,885,256,-466,-1117,-1557,-2004,-2507,-2708,-2499,-2098,-1638,-1218,-847,-362,
191,493,609,736,729,516,316,231,275,501,784,1011,1332,1942,2769,3580,4257,
4965,5778,6318,6376,6263,6130,5929,5824,5975,6029,5842,5614,5363,5069,4777,4394,3993,
3721,3260,2284,1282,658,121,-693,-1798,-3001,-4120,-5217,-6390,-7391,-7968,-8339,-8823,-9590,
-10515,-11343,-11962,-12311,-12280,-12192,-12578,-13220,-13568,-13696,-13518,-12869,-12112,-11744,-11617,-11464,-11202,
-10584,-9542,-8383,-7252,-6153,-5044,-3731,-2067,-373,1113,2522,3802,4728,5374,6007,6740,7518,
8285,9013,9730,10315,10712,11082,11543,11969,12204,12193,11925,11577,11405,11212,10854,10476,10048,
9263,8278,7584,7244,6961,6506,5801,5059,4517,4042,3462,3028,2816,2381,1584,941,830,
929,818,633,535,311,-185,-466,-341});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 47;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,38,25,155,137,92,3,160,4,221,12,251,113,138,6,21,121,226,190,250,10,55,149,48,227,232,70,40,67,159,50,19,40,
181,173,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2fU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 321;
            through_enc.offs = 0x23U;
            through_enc.rng = 0xae4334U;
            through_enc.val = 0x4c4ad91aU;
            through_enc.ext = 0x0U;
            through_enc.rem = 131;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,38,25,155,137,92,3,160,4,221,12,251,113,138,6,21,121,226,190,250,10,55,149,48,227,232,70,40,67,159,50,19,40,
181,173,131,153,139,169,5,83,214,97,232,190,237,48});
            expected_enc.storage = 0x2fU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0x5661e8U;
            expected_enc.nend_bits = 23;
            expected_enc.nbits_total = 400;
            expected_enc.offs = 0x2aU;
            expected_enc.rng = 0xaca100U;
            expected_enc.val = 0x29b39c00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 47;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_7()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0xaca100U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 0;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ec3b975U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3d98a708U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3eac05c5U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f2ffe66U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f7094a9U), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { -1187235, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 13696;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 282;
            through_st.in_mem = new Pointer<int>(new int[] { -154017,322145,1094650,1466970,1411462,1935950,3316908,4580509,5023061,4972455,5515363,6380420,5761699,
4119190,3454407,3303063,2942823,3212550,4196616,3892075,2938115,2655291,2421006,2090670,1918235,1366102,
1057068,1339088,397834,-1994833,-2700959,-1768275,-1795293,-3259804,-4951841,-6032134,-6427163,-7024537,-8009802,
-8025952,-6904237,-6414956,-7105737,-8562262,-9680656,-9851641,-9504279,-8778657,-7436594,-7184077,-9071516,-10357240,
-9547445,-8860128,-7685392,-5646817,-4805719,-5933982,-6695028,-6510506,-5970043,-4350900,-2234513,-1115102,-517729,
46057,762215,2279141,4523511,5668711,5857495,6455064,6792334,6128750,5550781,5894420,6692919,7327576,
7760504,8071985,8474194,8374029,7963391,8096705,8696760,8836627,8316015,7452777,6393347,5901014,6408108,
6216419,5422005,5120139,4683105,2957880,1656396,2243173,3266780,3291365,2412985,1109444,524758,888092,
829532,107624,349303,991976,-51680,-1801685,-1660558,123471,915436,116099,-255201,-12508,-588813,
-1840545,-1264635,225702});
            through_st.prefilter_mem = new Pointer<int>(new int[] { -7788181,-9284836,-9844729,-11227920,-13647600,-14401221,-13628470,-13830782,-14481610,-14103728,-13562830,-13853018,-13660083,
-12335221,-11563739,-12615186,-13880233,-13812638,-13279331,-12967212,-11803742,-10047178,-9396749,-9362360,-8752071,-7605822,
-6200915,-4539809,-3410984,-3400369,-3310901,-1878965,103469,1152621,1334240,1244709,1569288,2161544,2824251,
3470778,3885063,3843668,3594611,3588246,3693704,4022806,5081200,4905055,3169361,1607351,1757888,2111175,
1583408,1005674,544268,-146512,-1021814,-1734911,-1564909,-835192,-1667082,-2680830,-2619579,-2694318,-3673045,
-3997227,-3729333,-3933098,-3817375,-3082134,-2675398,-2409772,-1854356,-1610649,-2122040,-3025415,-3566287,-3378274,
-3648810,-5253413,-6774857,-6824192,-5920391,-4971747,-3891629,-3441073,-3507025,-3740706,-3613528,-2834062,-1907964,
-1250978,-715440,-770137,-1774079,-2586116,-2390121,-1198390,-398449,-219055,-296071,456561,2412593,4257615,
4692375,4602440,5652631,6958409,6356062,5289441,5943356,7108858,6827239,6640856,7678771,8207753,7638802,
7590049,8341861,8550949,8066586,8179423,9209356,10025472,9679140,8713293,8558461,9191905,8902108,7328422,
6323476,6746810,7201064,6617797,5342924,4811482,5716917,6673545,6271933,5200422,4444718,3997038,3903457,
4150867,4449474,4831841,5225468,4469551,3618611,3949577,4800526,5274637,5330135,5074132,4603910,3837550,
3221108,3903306,5454465,5117357,3858039,3879957,4545356,4837605,5011273,4550880,3420179,2886477,2937687,
2879121,2933810,2833258,2426326,2743568,3932641,4606019,4337929,4018641,3879989,3414068,2580125,2255524,
3050360,3538605,2636255,892797,124197,288258,-157373,-932117,-1025899,-1506550,-3020826,-4246531,-5188585,
-6473267,-7092755,-6962676,-7678222,-9066740,-10166281,-11117339,-11881619,-12128780,-11557358,-9844389,-8420816,-8515231,
-9269510,-9685865,-10498915,-10802419,-9501314,-7770753,-6707646,-6848768,-8720857,-10405336,-9429247,-6720354,-4062268,
-2389899,-2001837,-2429080,-2567549,-2011331,-283658,2592730,4832997,5108404,3956566,2281683,898653,1191309,
2864519,3823173,3069286,2392821,3212835,3882726,3450996,3798739,5104330,5316487,3955782,2727388,1448006,
352747,-49668,-1524,282138,236682,-942548,-2397842,-2813565,-2476034,-1864486,-1190275,189057,1539708,
1284105,-706970,-1998229,-1472291,-685443,-780060,-1434599,-1572220,-785987,-808925,-2299050,-2870638,-2004118,
-1314962,-666976,-546967,-2199298,-3592137,-3119035,-2770047,-2946580,-1978894,-1127951,-1505199,-2334437,-2733590,
-2048529,-801297,-510694,-1045025,-1534911,-2354316,-2982433,-2565043,-1851311,-1363478,-854758,-631533,-115238,
1178884,2102107,2037986,1489721,625864,448095,1469226,1953775,1332198,1328303,2066194,2230026,2091779,
2569162,3212841,2942290,1671499,642585,723079,1519962,1922190,1497023,762406,301201,-288206,-1062545,
-1053111,-490720,-745690,-1537440,-1510396,-392384,773748,1166547,942488,933676,1030337,780477,664967,
1138054,1878197,2145453,1596376,1544558,3052293,4402937,4717287,5397001,5713398,4303742,3447876,4675447,
5675887,5179439,4078017,3118324,2322067,2235037,2273753,2736199,4003710,5117612,5033224,3900671,2770789,
2714680,3423499,3887371,3034582,1537497,495486,188917,-1061371,-3173862,-3395424,-1648248,-934098,-2564299,
-5496405,-7787267,-8128219,-7396637,-7326364,-7463353,-8256319,-10468137,-12322160,-12711037,-12595085,-11571056,-9704900,
-9080256,-10037901,-10677076,-11247845,-10762048,-8184839,-5402641,-4748126,-5278379,-4890097,-3595370,-2935938,-2903194,
-1942293,372948,1872050,1910105,1375339,1631520,3384381,5559532,6767813,7278135,7520581,6965949,5821092,
5162851,5251112,5692039,5893758,5777628,5664981,5678493,6056345,6773753,7027695,6551526,6042183,5793350,
5391532,5528751,5147825,3842843,2957503,2840168,2792462,2872551,2786135,1873349,899948,581296,391462,
773634,1350157,933189,96383,184049,432275,201677,622342,1539849,1225683,-355169,-1114763,-1438744,
-1749413,-1577369,-1382594,-2282479,-3394122,-3569619,-3297015,-2567506,-1527732,-1624194,-2426807,-1359385,42263,
-180366,-793341,-258816,188256,-540430,-1108343,-340136,487662,411469,970566,3036375,4343594,4822801,
6043589,7247785,7050736,6164542,5683041,6163696,7205296,6986553,5195155,3772000,3323497,3024294,2947095,
3286048,3726784,4066959,3840040,3283805,3668833,4816329,5338563,5127407,4531228,3894709,3437188,3319229,
3031081,2047228,570016,-509671,-531767,-48624,-151420,-757002,-758012,-265661,-426013,-1153865,-1314008,
-1292085,-1996793,-2719726,-3239290,-3932727,-3888269,-3037106,-3017643,-3735871,-3701046,-3467156,-3284674,-2552306,
-2066932,-2047685,-1284195,-277201,-4625,105544,189706,-365927,194401,1503269,1222064,-212366,-91329,
1393879,1885389,1299650,997359,573624,-548885,-2127682,-2591948,-2602787,-2532527,-2529034,-3131546,-3982479,
-4262835,-4431371,-5059069,-5502241,-5533970,-6930078,-9272356,-10856043,-11099718,-11823859,-13627091,-14301255,-12920866,
-11694501,-12089139,-13019943,-13340234,-13513683,-13720722,-13225707,-12041340,-11508245,-12169138,-13592497,-15118247,-14829871,
-12250197,-10508787,-10714216,-10397607,-9709695,-10713433,-10857823,-8738556,-6876941,-5803609,-4956994,-5302930,-5504271,
-4114721,-3344492,-3406161,-1663948,914455,1727472,1799113,2353064,2916232,3639350,4199038,4026568,4359753,
5618022,5762585,4241716,4376464,5966726,6690062,7107015,8594867,9300583,7826611,5892262,4917824,4905543,
5587123,5740314,4169702,2857558,2558156,1858574,676281,338793,1018545,1729009,1866437,1665534,1826307,
2187578,2293461,2152763,1365104,540994,1420620,2775785,1826326,-40220,-36931,777774,950014,1248205,
2246401,2616263,2458150,2224468,2083563,2155855,2408577,2659249,2866092,2682791,1737227,462555,-33051,
959422,1468969,1312297,1911748,3355380,4236009,4335732,4244583,4091382,4621601,5975729,6303802,5332828,
4696712,5463685,5933694,5129026,4486156,5051815,5945970,6434206,6854446,7197681,7132543,7021738,6345686,
5665953,5787402,5965785,5300185,4650359,4803557,5261700,5710624,6115102,6207464,5760382,5184279,4074471,
3658327,4419375,4989952,4527924,4190212,4869947,5611528,5759184,5997771,6094431,5468148,4474252,4672095,
5661077,6249874,6112652,5473057,5077384,5622154,6720700,8032846,9431411,9495082,7709413,6354861,6680907,
7711053,8680981,8963595,7793562,5795942,4144241,3280209,3549747,4722039,5013886,4515612,3765846,2444896,
488459,-515854,314024,1397640,1264120,580711,-98394,-1515801,-3159095,-3690524,-3900826,-4601218,-5035575,
-5747231,-7457491,-8396263,-8160711,-8663879,-9052564,-7788924,-7018249,-9149802,-11538366,-12019207,-11147140,-9863640,
-9346511,-10147276,-10673399,-10253344,-10642458,-11289004,-9055855,-5687923,-4859737,-5956262,-5912450,-4542761,-3279165,
-2627926,-2526370,-2283908,-1462475,-1086894,-1133200,18373,2424956,3624846,3268049,3013044,2841400,1742425,
527133,638135,1511811,1498698,937951,762641,1619320,1995943,1211143,338284,593675,1150733,252274,
-1576176,-2253639,-1855491,-1851793,-3012180,-3994180,-5029015,-5836724,-5711157,-4846676,-4250492,-4370089,-4714147,
-4641231,-4129430,-3773896,-3788847,-3915209,-3845372,-4296341,-5327507,-5987569,-5818188,-5336080,-4856639,-4576062,
-4795404,-4924632,-4404030,-3977229,-4256376,-4077792,-3228899,-2754795,-2835700,-3110754,-3479194,-3514626,-3004675,
-2304058,-1542415,-1195086,-1914560,-2822034,-2636894,-1773867,-975563,-213511,168428,-242619,-727390,-465250,
827237,2678617,3459088,3006047,2345550,2030761,1867529,2161821,3018494,3399821,2436226,799666,194693,
974581,1349778,1015545,1067567,1284247,606360,-65790,434749,1387278,1705329,1020474,-311340,-1378135,
-2032662,-2800032,-2952794,-2488496,-2787493,-3291495,-2363534,-807663,107173,595202,713974,771308,1466185,
2042685,1354338,778023,894347,423508,-424568,-502182,-154017,322145,1094650,1466970,1411462,1935950,
3316908,4580509,5023061,4972455,5515363,6380420,5761699,4119190,3454407,3303063,2942823,3212550,4196616,
3892075,2938115,2655291,2421006,2090670,1918235,1366102,1057068,1339088,397834,-1994833,-2700959,-1768275,
-1795293,-3259804,-4951841,-6032134,-6427163,-7024537,-8009802,-8025952,-6904237,-6414956,-7105737,-8562262,-9680656,
-9851641,-9504279,-8778657,-7436594,-7184077,-9071516,-10357240,-9547445,-8860128,-7685392,-5646817,-4805719,-5933982,
-6695028,-6510506,-5970043,-4350900,-2234513,-1115102,-517729,46057,762215,2279141,4523511,5668711,5857495,
6455064,6792334,6128750,5550781,5894420,6692919,7327576,7760504,8071985,8474194,8374029,7963391,8096705,
8696760,8836627,8316015,7452777,6393347,5901014,6408108,6216419,5422005,5120139,4683105,2957880,1656396,
2243173,3266780,3291365,2412985,1109444,524758,888092,829532,107624,349303,991976,-51680,-1801685,
-1660558,123471,915436,116099,-255201,-12508,-588813,-1840545,-1264635,225702});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1393,1896,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1393,1896,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1634,1962,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -253,-442,-629,-519,-123,339,705,969,1306,1570,1609,1457,1310,1286,1305,1230,1111,
1136,1311,1492,1737,2170,2845,3682,4434,4838,5001,5308,5769,6015,6024,6026,5975,5907,
6082,6465,6826,7176,7525,7728,7738,7581,7349,7209,7020,6447,5562,4843,4350,3727,2866,
1987,1377,1111,898,537,308,463,823,1183,1423,1493,1570,1777,1874,1756,1711,1784,
1752,1748,2012,2372,2699,3073,3362,3448,3539,3726,3803,3667,3436,3217,2910,2694,2609,
2382,1889,1331,699,-159,-1068,-1878,-2769,-3602,-4132,-4462,-4909,-5431,-6035,-6816,-7735,-8957,
-10511,-11874,-12944,-14292,-15834,-16915,-17563,-18189,-18717,-18995,-19166,-19218,-18997,-18750,-18728,-18714,-18620,
-18678,-18800,-18588,-18222,-18127,-18035,-17457,-16495,-15411,-14242,-12985,-11587,-10129,-8926,-7920,-6577,-4886,
-3569,-2946,-2449,-1565,-516,362,1122,1776,2300,2560,2572,2729,3257,3626,3371,2921,2657,
2264,1763,1644,1633,1296,933,871,842,726,738,931,1213,1523,1732,1723,1670,1818,
2101,2300,2426,2612,2862,3133,3436,3725,3908,3984,4053,3871,3451,3232,3349,3475,3454,
3369,3382,3735,4435,5119,5571,6031,6545,6986,7327,7589,7759,7984,8306,8500,8579,8805,
9175,9643,10249,10950,11609,12202,12670,12841,12741,12605,12447,12153,11768,11402,11037,10846,10830,
10695,10308,9793,9234,8661,8146,7694,7121,6460,5873,5449,5128,4935,4838,4653,4367,4155,
4075,4074,4162,4205,4090,4012,4223,4597,5134,5864,6339,6389,6486,6765,7004,7325,7761,
8061,8227,8339,8181,7825,7674,7624,7312,6889,6595,6348,5999,5702,5457,5030,4291,3447,
2590,1501,267,-704,-1337,-1869,-2473,-3253,-4186,-5277,-6564,-7949,-9270,-10522,-11786,-13033,-14257,
-15552,-16841,-17842,-18705,-19582,-20091,-19964,-19763,-19965,-20104,-19812,-19439,-18925,-17993,-17146,-16759,-16180,
-15124,-13908,-12456,-10701,-9029,-7642,-6482,-5543,-4550,-3120,-1550,-354,456,1042,1410,1721,2109,
2372,2404,2454,2650,2882,2975,3176,3465,3686,3788,3572,2935,2362,2144,1876,1405,1091,
726,116,-569,-1006,-1199,-1285,-1298,-1361,-1629,-2001,-2309,-2668,-3294,-4160,-5026,-5817,-6456,
-6825,-7035,-7272,-7605,-8098,-8621,-9048,-9662,-10469,-11001,-11171,-11296,-11340,-11171,-10995,-10976,-11002,
-10995,-10939,-10700,-10249,-9843,-9478,-8848,-7940,-7025,-6140,-5186,-4345,-3702,-2918,-1885,-928,-120,
623,1149,1325,1315,1361,1493,1590,1755,2154,2604,2976,3382,3772,3920,3853,3720,3591,
3520,3438,3153,2679,2322,2179,2032,1853,1776,1809,1926,2138,2404,2627,2743,2762,2622,
2212,1770,1604,1585,1400,1234,1442,1869,2251,2661,3054,3387,3977,4814,5448,5888,6254,
6360,6297,6358,6560,6894,7377,7843,8167,8450,8756,9108,9407,9490,9221,8712,8304,8111,
7849,7349,6846,6426,5623,4112,2402,1148,292,-575,-1554,-2661,-3944,-5116,-5977,-6766,-7327,
-7278,-7471,-8380,-9071,-9164,-9232,-9150,-8663,-8369,-8610,-8857,-8673,-8002,-7068,-5985,-4852,-3689,
-2465,-1274,-112,1282,2871,4259,5400,6458,7110,7406,7925,8549,8829,9144,9727,10077,10165,
10437,10859,11140,11165,10984,10611,9997,9317,8863,8524,8035,7342,6442,5539,4948,4569,4162,
3844,3713,3577,3378,3250,3134,2850,2399,1883,1376,1061,974,1065,1268,1531,1699,1648,
1658,1921,2008,1768,1689,1965,2251,2622,3093,3463,3820,4211,4380,4320,4314,4378,4228,
3774,3403,3344,3373,3116,2690,2574,2908,3442,4004,4547,5014,5352,5599,5885,6139,6165,
6118,6170,6146,6095,6297,6712,7179,7606,7768,7652,7638,7736,7520,7019,6588,6188,5681,
5132,4443,3523,2612,1926,1351,725,124,-180,-204,-326,-692,-1079,-1296,-1376,-1411,-1490,
-1695,-2012,-2230,-2278,-2192,-1788,-1122,-637,-415,-238,-29,270,811,1237,1201,905,547,
114,-204,-298,-401,-659,-1103,-1706,-2439,-3202,-4137,-5115,-5970,-6806,-7640,-8383,-9121,-9939,
-10774,-11574,-12579,-13895,-15328,-16737,-18126,-19246,-19929,-20377,-20706,-20948,-21296,-21677,-21681,-21356,-21092,
-20954,-20768,-20560,-20371,-20034,-19473,-18868,-18373,-17898,-17294,-16479,-15328,-13741,-11977,-10354,-8958,-7737,
-6481,-5060,-3752,-2779,-1957,-1194,-502,154,894,1670,2280,2776,3340,3862,4343,5050,5849,
6192,6174,6077,5962,5718,5233,4617,4211,4083,3930,3695,3629,3672,3772,3923,4044,4032,
3910,3769,3631,3433,3232,3170,3109,2859,2634,2417,2101,1895,1817,1494,870,261,-70,
-133,-215,-491,-596,-408,-179,-126,-11,559,1447,2079,2348,2645,3037,3317,3720,4445,
5316,6099,6694,7139,7692,8474,9259,9937,10522,10837,10799,10758,10993,11358,11484,11266,10808,
10265,9936,9905,9899,9873,9920,9870,9550,9150,8781,8325,7764,7262,6934,6716,6506,6308,
6072,5743,5360,5122,5006,4830,4617,4463,4412,4576,4968,5348,5566,5729,5909,5979,6057,
6424,6872,7015,7081,7322,7406,7164,6861,6659,6453,6283,6179,6196,6338,6374,6051,5482,
4998,4656,4224,3568,2703,1775,827,-126,-902,-1487,-2288,-3517,-4904,-6244,-7475,-8374,-9037,
-9968,-11351,-12876,-14365,-15645,-16484,-17049,-17491,-17646,-17730,-18051,-18256,-17943,-17269,-16302,-15113,-14155,
-13675,-13202,-12342,-11378,-10487,-9316,-7961,-7030,-6496,-5802,-4814,-3610,-2219,-1039,-441,-170,75,
315,679,1020,1032,831,678,363,-106,-248,37,379,518,396,71,-193,-325,-321,
-257,-198,-332,-741,-1185,-1396,-1247,-804,-422,-318,-382,-532,-823,-1005,-947,-1035,-1493,
-2038,-2423,-2603,-2577,-2533,-2570,-2554,-2611,-3088,-3746,-4121,-4373,-4750,-4953,-4720,-4320,-4045,
-3798,-3406,-2964,-2568,-2254,-2078,-2029,-2026,-1985,-1727,-1119,-390,57,227,411,725,1120,
1657,2278,2681,2799,2922,3142,3267,3356,3622,3772,3486,3096,3002,3117,3276,3439,3468,
3335,3283,3428,3536,3529,3529,3588,3635});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 35;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 188,30,35,35,47,134,159,106,229,130,154,245,209,227,183,48,172,241,243,85,82,23,115,93,204,204,204,204,204,204,204,204,204,
204,204});
            through_enc.storage = 0x23U;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 233;
            through_enc.offs = 0x18U;
            through_enc.rng = 0x1a8c676U;
            through_enc.val = 0x35a30df4U;
            through_enc.ext = 0x0U;
            through_enc.rem = 94;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 188,30,35,35,47,134,159,106,229,130,154,245,209,227,183,48,172,241,243,85,82,23,115,93,94,109,157,134,149,194,55,179,228,
9,172});
            expected_enc.storage = 0x23U;
            expected_enc.end_offs = 0x4U;
            expected_enc.end_window = 0x37b3U;
            expected_enc.nend_bits = 15;
            expected_enc.nbits_total = 304;
            expected_enc.offs = 0x1eU;
            expected_enc.rng = 0x2d75e00U;
            expected_enc.val = 0x6064a600U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 35;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_manual_8()
        {
            #region autogen
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 1;
            through_st.stream_channels = 1;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 10;
            through_st.upsample = 1;
            through_st.start = 17;
            through_st.end = 19;
            through_st.bitrate = -1;
            through_st.vbr = 0;
            through_st.signalling = 0;
            through_st.constrained_vbr = 1;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x2d75e00U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 0;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 19;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 1;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3ec257c4U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3d1bb49dU), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3eed7045U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f3eba64U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x3f7094a9U), 0);
            through_st.analysis.bandwidth = 20;
            through_st.preemph_memE = new Pointer<int>(new int[] { 12655706, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 18256;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 306;
            through_st.in_mem = new Pointer<int>(new int[] { -12284911,-11380913,-11185325,-12207684,-11929763,-9933982,-8263026,-6648809,-5145397,-5361081,-6730398,-6464170,-4588418,
-3634072,-3340822,-1646534,-173437,-1077663,-2131792,-1148356,482245,1973983,3479643,3469982,1811073,839077,
899077,1029119,1684473,1813897,675815,-189261,-116142,-873693,-1698005,-646755,1014995,1423564,802193,
-181465,-1087907,-1037723,-659246,-183287,64930,83770,-670510,-1879236,-2273875,-1592290,-247363,1048403,
1070715,166718,-457515,-849091,-1518783,-1251102,-379878,-942261,-2511846,-3149581,-2829056,-2225910,-1492722,
-1403020,-1707763,-1513407,-1802585,-3557925,-4592358,-3837448,-3564031,-4230853,-3749769,-2088631,-1261450,-1527700,
-1473434,-727764,-282129,-198991,-291571,-663905,-1075967,-1234278,-1076787,-162766,1429343,2298499,1591306,
731340,893128,1538653,2063342,2887652,3561636,3050235,2130468,2223444,2696324,2442367,2371708,3151379,
2839667,1145967,544272,1517081,2315394,2566271,2680341,2231620,1585885,1835949,2610914,2548446,2143758,
2168130,2409794,2396890});
            through_st.prefilter_mem = new Pointer<int>(new int[] { -4805719,-5933982,-6695028,-6510506,-5970043,-4350900,-2234513,-1115102,-517729,46057,762215,2279141,4523511,
5668711,5857495,6455064,6792334,6128750,5550781,5894420,6692919,7327576,7760504,8071985,8474194,8374029,
7963391,8096705,8696760,8836627,8316015,7452777,6393347,5901014,6408108,6216419,5422005,5120139,4683105,
2957880,1656396,2243173,3266780,3291365,2412985,1109444,524758,888092,829532,107624,349303,991976,
-51680,-1801685,-1660558,123471,915436,116099,-255201,-12508,-588813,-1840545,-1264635,225702,150947,
-929580,-1037505,64119,1303156,1816784,1707410,1514479,1975682,1883718,1124313,365938,293033,706528,
867911,494560,268258,784971,1414730,1546822,1920168,2840738,4097994,5176249,5342321,4378923,3639995,
4329962,5149359,4551946,3732330,3709187,3493328,3392363,4345914,5305397,5450591,5627324,5838259,5454660,
4788850,4110962,3707305,3941602,3654886,1965905,335916,472130,956091,120724,-1236880,-1839585,-1277796,
-243541,-189877,-926947,-608064,824108,1759016,1980191,1709846,1160976,1232654,1812441,1489057,668011,
894523,1350204,964973,1060001,2155272,2710683,2796690,3190103,3071719,2417785,2491101,2940226,2604554,
1779413,1306738,1213969,718973,903096,1306967,673113,-555886,-1125013,-1770938,-3084919,-3820949,-3973912,
-4803332,-5113172,-4383858,-3890277,-4572253,-5154078,-5810654,-6906729,-7951804,-9757502,-11868140,-12040543,-11677808,
-13473878,-15096679,-14155789,-13046361,-13354364,-13337554,-12637944,-12370469,-11988103,-10901842,-10659569,-11429419,-11448671,
-11112389,-11677230,-11975008,-10681898,-9920866,-10806021,-10759943,-8712765,-6784792,-5694051,-4679909,-3601256,-2251451,
-1146795,-1295516,-1363335,635078,2885592,2392596,359104,225764,2116260,3335208,3279271,3335364,3368113,
3237434,2478023,1621952,2223245,3839318,3512444,1183244,227859,713246,22667,-661151,595720,964977,
-377077,-690618,319260,416337,42168,495189,1243937,1727056,2014997,1791758,1027234,841481,1632215,
2276102,2105906,1929159,2252330,2628748,2868358,3165925,3294737,3038115,2712274,2730294,1744590,657926,
1223185,2464892,2573638,2048938,1773892,2123078,3523705,5161891,5526418,4996378,5306844,5810640,5827421,
5688760,5574678,5358812,5688536,6224082,5897623,5545772,6196420,6925092,7553819,8406595,9168026,9426671,
9561208,9413532,8484548,7479590,7270696,7097029,6442902,5889540,5730829,5510064,5998521,6597976,6100722,
4985589,4223538,3726911,3326131,3211662,3153307,2379994,1667509,1564511,1871521,2032914,2359987,2634629,
2214587,1687231,1814624,2225049,2499483,2863412,2733157,2112407,2193306,3329129,4126410,5023834,6144282,
5548295,4099324,4322554,5127621,5135191,5617899,6286153,5996965,5632413,5513216,4476106,3568026,4188989,
4509914,3406043,2759702,3028206,3040092,2470549,2469124,2499647,1603653,63363,-820740,-1392521,-2869312,
-4132287,-3813177,-3025288,-3000491,-3622250,-4714229,-5820129,-7040509,-8513608,-9705717,-10294482,-10823448,-11641797,
-12348735,-13020653,-14063464,-14834504,-14446785,-14496526,-15084076,-14115555,-11823216,-11442086,-12969285,-12835340,-11155363,
-10644189,-9837491,-7809574,-7585137,-8948921,-7924726,-5615211,-4311071,-2597335,-464175,274086,133961,56307,
-136234,661848,3061874,4513870,3946535,3100272,2680411,2147507,2140125,2646588,2372965,1588370,1681758,
2310493,2578366,2151557,2651062,3134999,3034026,2682379,1442517,-414604,-543817,558226,219492,-776648,
-422947,-824756,-2052523,-2734492,-2139531,-1408589,-1088891,-842719,-1055506,-1933892,-2524528,-2490932,-2889055,
-4203248,-5570887,-6102936,-6327784,-6191163,-5477829,-5053269,-5292880,-5831703,-6691649,-7117416,-7045518,-8073809,
-9241563,-8610963,-7455059,-7375183,-7120204,-6274788,-6142287,-6677229,-6849876,-6730681,-6525677,-5741704,-4726516,
-4633753,-4552253,-3242566,-1716822,-1130297,-691024,135322,258588,-35731,936848,2438422,2761776,2739428,
2969603,2537252,1426813,773087,996320,1376837,1314574,1652697,2712533,3166564,3123545,3491356,3675257,
2923631,2133918,1822419,1757091,1915405,1826728,944862,-4379,183639,840851,736612,515226,823045,
1226298,1590637,2051639,2403070,2390366,2089100,1763055,1123464,-68468,-451434,407508,907634,216025,
180189,1610107,2634921,2712939,3062319,3244580,3240270,4497529,5871722,5554466,5149355,5116576,4276478,
3649377,4118576,4733589,5398364,6213870,6440981,6145648,6176769,6444845,6821260,6820432,6119394,4728595,
3580288,3681267,4311242,3910044,2774230,2454754,2485692,658886,-2734425,-4477850,-3660655,-2800873,-3371834,
-4363249,-5489010,-6890019,-7223607,-6669798,-6903863,-6454717,-4300821,-5261949,-8313259,-7978798,-5953923,-5908660,
-5336038,-3626779,-4118106,-6128840,-6301480,-4687855,-2580058,-1090564,93566,963734,1782701,2747075,3363902,
3976839,5641014,7296173,7449119,7290160,7651193,6638226,5580623,6675886,7424826,6399172,6714557,8005813,
7409626,6551505,7359234,8140744,7822475,6946538,6118121,5220487,4004190,3356627,3864548,4056662,3233989,
2097976,824342,259116,982288,1487544,1140008,1254501,1825082,1724119,1382516,1551071,1521583,762188,
-96327,-639650,-919803,-444860,295500,971138,1485798,1856276,1628737,834928,1053450,2095882,1536567,
250625,762631,2168176,2378703,2902575,3540108,3415782,3589853,3948449,3279358,2445203,2629524,2912558,
2075334,737994,799036,1849055,2173254,1019615,169497,1177533,2949466,3973867,4416631,4684086,4706396,
4464925,4299847,4611342,4655981,3878145,3595110,3971739,3692390,3567053,4572008,5568560,6036517,6159591,
5336489,4297329,4643854,5094005,3868069,2568004,2546923,2409103,1725081,1241561,330829,-1038651,-1567012,
-1205108,-1171913,-1734075,-2016274,-1169001,-208891,-625044,-1699422,-2010299,-1551742,-1123910,-988740,-1190467,
-1755098,-2339797,-2129050,-1566664,-1047290,308074,1629434,1297232,517956,470027,709843,1206888,2381818,
2243155,612526,-474551,-910358,-1437504,-1232489,-510356,-604971,-1303132,-2223497,-3147543,-4050491,-4623708,
-5796988,-6547557,-6644608,-7092074,-7597500,-7737153,-8173153,-8954242,-9526433,-9896076,-11227256,-13118559,-14406308,
-15188404,-15972138,-15723681,-14621829,-14078887,-13866703,-13712480,-14295335,-14644306,-13334190,-11989064,-12039248,-12393149,
-12111757,-11907372,-11857406,-11135081,-10010532,-9485644,-9564507,-9342311,-8522099,-7286761,-5409789,-2916788,-1216782,
-710561,-643222,-502355,391157,1838652,2248831,1680273,1659564,1922917,2100869,2378560,3125654,3727748,
3524567,3432391,4015649,4190125,4342893,5564103,6375298,4998408,3730482,3395840,3262517,2663480,1526437,
691889,1173594,2062846,1881806,1451934,1999780,2405695,2665585,2935919,2905810,2435381,1977448,1824671,
1750332,1419788,1285854,1731708,1697713,886092,834899,729432,190609,447026,844753,-206688,-1638027,
-1959957,-1195424,-301054,-417583,-1262586,-731738,403881,687319,107115,393629,2327962,3980684,3477673,
2379110,2659065,3230654,3012737,3688570,5255075,6298513,6473186,6184194,5935347,6651112,7928845,8421574,
8465587,8501205,7754694,6502334,6466700,7572007,8248865,7494168,6162555,5045581,4416037,4958976,5977454,
6060809,5975203,6258237,5889800,4753162,4228882,4110108,3527051,2816816,2713816,3118104,3367149,3265983,
3186116,2908822,2382901,1959588,2318202,2671693,2354666,2094984,2205786,2533060,3382367,4417012,4608695,
4178606,4087260,4257035,3917062,3992837,5224502,5781753,4807713,4580177,5337526,4842518,3558830,3160295,
3387835,3247348,3268242,3434135,3865856,4388300,4041365,2593019,1386960,1385540,1669815,1091058,-91856,
-1350950,-2140432,-2792492,-3395399,-3255907,-2950326,-4194471,-6439674,-7841908,-8501535,-8878333,-8274757,-7860424,
-9365482,-11788858,-13220170,-14009636,-14068376,-13048440,-12441597,-12284911,-11380913,-11185325,-12207684,-11929763,-9933982,
-8263026,-6648809,-5145397,-5361081,-6730398,-6464170,-4588418,-3634072,-3340822,-1646534,-173437,-1077663,-2131792,
-1148356,482245,1973983,3479643,3469982,1811073,839077,899077,1029119,1684473,1813897,675815,-189261,
-116142,-873693,-1698005,-646755,1014995,1423564,802193,-181465,-1087907,-1037723,-659246,-183287,64930,
83770,-670510,-1879236,-2273875,-1592290,-247363,1048403,1070715,166718,-457515,-849091,-1518783,-1251102,
-379878,-942261,-2511846,-3149581,-2829056,-2225910,-1492722,-1403020,-1707763,-1513407,-1802585,-3557925,-4592358,
-3837448,-3564031,-4230853,-3749769,-2088631,-1261450,-1527700,-1473434,-727764,-282129,-198991,-291571,-663905,
-1075967,-1234278,-1076787,-162766,1429343,2298499,1591306,731340,893128,1538653,2063342,2887652,3561636,
3050235,2130468,2223444,2696324,2442367,2371708,3151379,2839667,1145967,544272,1517081,2315394,2566271,
2680341,2231620,1585885,1835949,2610914,2548446,2143758,2168130,2409794,2396890});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1401,1671,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1401,1671,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
1393,1896,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 3723,3902,4111,4356,4621,4767,4831,5053,5495,5904,6102,6117,6097,6123,6072,5864,5689,
5698,5822,6032,6259,6478,6763,7195,7713,8139,8303,8266,8215,8088,7794,7499,7307,6977,
6450,5795,5136,4706,4594,4409,3718,2630,1530,572,-362,-1376,-2535,-3818,-5278,-6924,-8499,
-9643,-10251,-10514,-10747,-11220,-11944,-12509,-12750,-12683,-12239,-11477,-10889,-10829,-10997,-10955,-10540,-9668,
-8373,-6972,-6071,-5581,-4870,-3792,-2656,-1434,-83,927,1444,2092,3220,4428,5551,6805,7997,
8578,8609,8643,8771,8743,8718,8974,9293,9425,9475,9680,9869,9918,10026,10253,10243,9806,
9232,8780,8426,8186,8004,7763,7360,6870,6485,6324,6258,6075,5773,5430,4941,4180,3303,
2588,1871,907,-111,-897,-1535,-2061,-2424,-2889,-3560,-4043,-4221,-4298,-4356,-4332,-4414,-4655,
-4761,-4563,-4213,-3852,-3407,-2880,-2520,-2259,-1789,-1086,-527,-232,45,440,829,1059,1134,
1230,1558,2043,2326,2317,2357,2594,2842,3077,3361,3603,3760,3772,3472,3023,2799,2769,
2636,2378,2196,2212,2350,2502,2630,2602,2311,2031,1955,1768,1312,876,563,192,-269,
-650,-783,-702,-559,-330,7,205,270,463,857,1299,1605,1657,1478,1136,788,812,
1356,1943,2372,2590,2477,2232,2220,2309,2214,1923,1455,871,281,-492,-1183,-1530,-1918,
-2681,-3482,-4194,-5163,-6379,-7462,-8321,-9179,-10307,-11619,-12965,-14260,-15409,-16382,-17183,-17699,-18171,
-19143,-20357,-21036,-21246,-21441,-21555,-21600,-21751,-21783,-21535,-21167,-20595,-19781,-19144,-18797,-18291,-17499,
-16742,-16014,-15097,-14266,-13843,-13429,-12585,-11581,-10630,-9494,-8216,-7096,-5917,-4672,-3819,-3354,-2821,
-2278,-1979,-1649,-955,-91,640,1226,1710,2283,2855,3086,2899,2673,2630,2533,2200,1778,
1435,1187,959,874,933,996,1030,1166,1416,1610,1664,1676,1733,1657,1307,955,940,
1099,1161,1209,1302,1410,1681,2043,2079,1791,1621,1811,2004,2072,2265,2728,3189,3375,
3436,3605,3832,4062,4405,5036,5748,6349,6897,7522,8150,8693,9213,9645,9837,9900,10046,
10388,10857,11389,11808,11977,12052,12294,12677,12923,12918,12750,12453,12077,11921,11985,12128,12328,
12477,12374,12183,12184,12189,11984,11750,11472,11010,10536,10340,10267,10209,10365,10712,11010,11220,
11338,11256,11090,11041,11046,11057,11119,11080,10817,10605,10660,10736,10646,10575,10549,10267,9728,
9190,8677,8085,7408,6560,5537,4605,3852,2979,1921,1037,394,-298,-1157,-2114,-3303,-4821,
-6518,-8311,-10090,-11483,-12433,-13439,-14529,-15335,-15742,-15964,-16086,-16213,-16471,-16725,-16862,-17090,-17439,
-17632,-17489,-17253,-16821,-16037,-15233,-14614,-13678,-12154,-10472,-8820,-6962,-5061,-3556,-2494,-1596,-598,
570,1770,2870,3833,4718,5686,6679,7295,7503,7650,7898,7934,7733,7613,7622,7466,6997,
6390,5795,5187,4630,4053,3562,3200,2854,2417,2067,1875,1647,1399,1190,814,317,-13,
-286,-575,-697,-811,-1286,-1917,-2242,-2321,-2495,-2798,-3110,-3530,-4019,-4358,-4527,-4715,-4809,
-4753,-4853,-5072,-5039,-4863,-4898,-5079,-5144,-5118,-5121,-5141,-5025,-4782,-4530,-4124,-3402,-2604,
-1999,-1624,-1461,-1338,-1001,-481,93,647,983,1052,1118,1300,1498,1748,2102,2380,2410,
2291,2237,2163,1858,1397,912,415,89,22,-54,-227,-220,12,295,486,461,256,
-14,-425,-896,-1070,-887,-611,-360,-121,144,510,975,1410,1666,1680,1538,1329,984,
511,45,-187,-110,147,390,617,907,1241,1591,1927,2241,2663,2964,2773,2246,1959,
1905,1705,1372,1024,591,191,-5,-266,-971,-2010,-3097,-4229,-5382,-6298,-6967,-7696,-8572,
-9474,-10353,-11116,-11663,-11863,-11740,-11687,-12088,-12534,-12443,-12003,-11444,-10487,-9287,-8488,-8178,-7842,
-7269,-6399,-5121,-3671,-2579,-1872,-1072,-55,957,2036,3162,3919,4203,4369,4612,4986,5496,
5880,5992,6097,6236,6157,5975,5999,6008,5739,5397,5327,5397,5291,5078,4948,4832,4663,
4454,4162,3808,3500,3128,2737,2579,2563,2401,2160,2001,1928,1990,2127,2202,2220,2237,
2056,1679,1434,1310,915,220,-382,-727,-945,-1082,-1122,-1238,-1272,-943,-487,-169,272,
819,929,630,437,398,466,730,1059,1342,1894,2728,3391,3878,4471,4952,5095,5150,
5182,4809,4232,4027,4012,3704,3397,3464,3588,3599,3791,4097,4300,4541,4803,4807,4696,
4803,5002,4992,4739,4450,4368,4562,4894,5169,5143,4780,4395,4167,3996,3981,4224,4432,
4416,4318,4166,3975,4053,4373,4495,4323,4135,3958,3700,3618,3894,4138,4060,3735,3231,
2487,1975,1959,1906,1512,998,317,-477,-932,-1134,-1578,-2372,-3344,-4617,-6032,-7133,-7831,
-8461,-9340,-10517,-11924,-13457,-14816,-15784,-16646,-17545,-18293,-19049,-19972,-20657,-20962,-21155,-21070,-20599,
-20245,-20098,-19878,-19601,-19320,-18765,-17847,-16878,-16137,-15494,-14622,-13492,-12216,-10720,-9091,-7659,-6485,
-5579,-4842,-3794,-2439,-1430,-764,-38,538,960,1572,2311,2896,3519,4241,4878,5432,5929,
6326,6563,6518,6356,6258,6241,6160,6064,5908,5713,5695,5815,5838,5680,5329,4914,4612,
4267,3736,3144,2563,1998,1430,667,-163,-654,-993,-1514,-1931,-1927,-1808,-1762,-1852,-2109,
-2274,-2154,-1919,-1788,-1821,-1843,-1602,-1023,-383,291,914,1370,1777,2192,2593,3158,3878,
4515,4996,5390,5624,5950,6530,7176,7809,8441,8966,9426,9887,10303,10789,11379,11871,12060,
12009,11889,11924,12131,12349,12525,12564,12384,12245,12256,12182,11948,11742,11446,10982,10632,10596,
10700,10640,10368,10137,9988,9777,9512,9362,9197,8895,8609,8503,8611,8800,8869,8845,8864,
8857,8749,8671,8677,8653,8577,8540,8557,8557,8536,8573,8633,8628,8557,8425,8074,7505,
6986,6606,6124,5485,4885,4169,2998,1698,800,47,-1046,-2521,-4283,-6006,-7144,-7785,-8331,
-8642,-8851,-9679,-11020,-11912,-12188,-12274,-12333});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 960;
            int in_nbCompressedBytes = 43;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 187,252,138,80,182,70,250,46,157,35,167,29,131,197,39,55,67,2,82,142,55,134,73,183,8,3,147,131,17,36,194,130,204,
204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x2bU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 297;
            through_enc.offs = 0x20U;
            through_enc.rng = 0x381ffdc8U;
            through_enc.val = 0x3ece1400U;
            through_enc.ext = 0x0U;
            through_enc.rem = 179;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 187,252,138,80,182,70,250,46,157,35,167,29,131,197,39,55,67,2,82,142,55,134,73,183,8,3,147,131,17,36,194,130,179,
184,101,63,233,22,9,216,190,231,131});
            expected_enc.storage = 0x2bU;
            expected_enc.end_offs = 0x5U;
            expected_enc.end_window = 0x1609d8U;
            expected_enc.nend_bits = 21;
            expected_enc.nbits_total = 374;
            expected_enc.offs = 0x26U;
            expected_enc.rng = 0x3876b000U;
            expected_enc.val = 0x7ea1a000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            #endregion
            int expected_returnVal = 43;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }
    }
}
