using Concentus.Common;
using Concentus.Common.CPlusPlus;
using Concentus.Silk;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace NailTests
{
    [TestClass]
    public class TestEntropyCoder
    {
        [TestMethod]
        public void Test_ec_enc_carry_out_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x1c8000U;
            through_ec_ctx.val = 0x15d8000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__c = 2;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x1c8000U;
            expected_ec_ctx.val = 0x15d8000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 2;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_carry_out(through_ec_ctx, in__c);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_carry_out_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x72000U;
            through_ec_ctx.val = 0x642a7000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 2;
            through_ec_ctx.error = 0;
            int in__c = 200;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x1U;
            expected_ec_ctx.rng = 0x72000U;
            expected_ec_ctx.val = 0x642a7000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 200;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_carry_out(through_ec_ctx, in__c);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_carry_out_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 49;
            through_ec_ctx.offs = 0x1U;
            through_ec_ctx.rng = 0x2ac000U;
            through_ec_ctx.val = 0x2a700000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 200;
            through_ec_ctx.error = 0;
            int in__c = 84;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x2U;
            expected_ec_ctx.rng = 0x2ac000U;
            expected_ec_ctx.val = 0x2a700000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 84;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_carry_out(through_ec_ctx, in__c);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_carry_out_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 57;
            through_ec_ctx.offs = 0x2U;
            through_ec_ctx.rng = 0x221100U;
            through_ec_ctx.val = 0x702c1600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 84;
            through_ec_ctx.error = 0;
            int in__c = 224;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 57;
            expected_ec_ctx.offs = 0x3U;
            expected_ec_ctx.rng = 0x221100U;
            expected_ec_ctx.val = 0x702c1600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_carry_out(through_ec_ctx, in__c);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_carry_out_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 65;
            through_ec_ctx.offs = 0x3U;
            through_ec_ctx.rng = 0x61e2c6U;
            through_ec_ctx.val = 0x2d0df82dU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            int in__c = 90;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 65;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x61e2c6U;
            expected_ec_ctx.val = 0x2d0df82dU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_carry_out(through_ec_ctx, in__c);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_normalize_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x10000000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x10000000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_normalize_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x1800000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x1800000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_normalize_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x1c8000U;
            through_ec_ctx.val = 0x15d8000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x1c800000U;
            expected_ec_ctx.val = 0x5d800000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 2;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_normalize_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x3900000U;
            through_ec_ctx.val = 0x61100000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 2;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x3900000U;
            expected_ec_ctx.val = 0x61100000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 2;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_normalize_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x72000U;
            through_ec_ctx.val = 0x642a7000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 2;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x1U;
            expected_ec_ctx.rng = 0x7200000U;
            expected_ec_ctx.val = 0x2a700000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 200;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_write_byte_at_end_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x20U;
            through_ec_ctx.nend_bits = 8;
            through_ec_ctx.nbits_total = 129;
            through_ec_ctx.offs = 0xcU;
            through_ec_ctx.rng = 0x1fb6aa0U;
            through_ec_ctx.val = 0x25602840U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__value = 0x20U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x1U;
            expected_ec_ctx.end_window = 0x20U;
            expected_ec_ctx.nend_bits = 8;
            expected_ec_ctx.nbits_total = 129;
            expected_ec_ctx.offs = 0xcU;
            expected_ec_ctx.rng = 0x1fb6aa0U;
            expected_ec_ctx.val = 0x25602840U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            int returnVal = EntropyCoder.ec_write_byte_at_end(through_ec_ctx, in__value);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(0, returnVal);
        }

        [TestMethod]
        public void Test_ec_write_byte_at_end_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x31U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x154c8670U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 127;
            through_ec_ctx.offs = 0x7U;
            through_ec_ctx.rng = 0x6588500U;
            through_ec_ctx.val = 0x4d7d2300U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 196;
            through_ec_ctx.error = 0;
            uint in__value = 0x70U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112});
            expected_ec_ctx.storage = 0x31U;
            expected_ec_ctx.end_offs = 0x1U;
            expected_ec_ctx.end_window = 0x154c8670U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 127;
            expected_ec_ctx.offs = 0x7U;
            expected_ec_ctx.rng = 0x6588500U;
            expected_ec_ctx.val = 0x4d7d2300U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 196;
            expected_ec_ctx.error = 0;
            int returnVal = EntropyCoder.ec_write_byte_at_end(through_ec_ctx, in__value);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(0, returnVal);
        }

        [TestMethod]
        public void Test_ec_write_byte_at_end_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112});
            through_ec_ctx.storage = 0x31U;
            through_ec_ctx.end_offs = 0x1U;
            through_ec_ctx.end_window = 0x154c8670U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 127;
            through_ec_ctx.offs = 0x7U;
            through_ec_ctx.rng = 0x6588500U;
            through_ec_ctx.val = 0x4d7d2300U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 196;
            through_ec_ctx.error = 0;
            uint in__value = 0x86U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,112});
            expected_ec_ctx.storage = 0x31U;
            expected_ec_ctx.end_offs = 0x2U;
            expected_ec_ctx.end_window = 0x154c8670U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 127;
            expected_ec_ctx.offs = 0x7U;
            expected_ec_ctx.rng = 0x6588500U;
            expected_ec_ctx.val = 0x4d7d2300U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 196;
            expected_ec_ctx.error = 0;
            int returnVal = EntropyCoder.ec_write_byte_at_end(through_ec_ctx, in__value);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(0, returnVal);
        }

        [TestMethod]
        public void Test_ec_write_byte_at_end_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,112});
            through_ec_ctx.storage = 0x31U;
            through_ec_ctx.end_offs = 0x2U;
            through_ec_ctx.end_window = 0x154c8670U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 127;
            through_ec_ctx.offs = 0x7U;
            through_ec_ctx.rng = 0x6588500U;
            through_ec_ctx.val = 0x4d7d2300U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 196;
            through_ec_ctx.error = 0;
            uint in__value = 0x4cU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,76,134,112});
            expected_ec_ctx.storage = 0x31U;
            expected_ec_ctx.end_offs = 0x3U;
            expected_ec_ctx.end_window = 0x154c8670U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 127;
            expected_ec_ctx.offs = 0x7U;
            expected_ec_ctx.rng = 0x6588500U;
            expected_ec_ctx.val = 0x4d7d2300U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 196;
            expected_ec_ctx.error = 0;
            int returnVal = EntropyCoder.ec_write_byte_at_end(through_ec_ctx, in__value);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(0, returnVal);
        }

        [TestMethod]
        public void Test_ec_write_byte_at_end_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,196,167,131,96,170,159,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,76,134,112});
            through_ec_ctx.storage = 0x31U;
            through_ec_ctx.end_offs = 0x3U;
            through_ec_ctx.end_window = 0x3095dd5U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 204;
            through_ec_ctx.offs = 0xeU;
            through_ec_ctx.rng = 0x7dbd500U;
            through_ec_ctx.val = 0xc17f100U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 69;
            through_ec_ctx.error = 0;
            uint in__value = 0xd5U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127,146,78,72,214,43,173,196,167,131,96,170,159,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,213,76,134,112});
            expected_ec_ctx.storage = 0x31U;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x3095dd5U;
            expected_ec_ctx.nend_bits = 27;
            expected_ec_ctx.nbits_total = 204;
            expected_ec_ctx.offs = 0xeU;
            expected_ec_ctx.rng = 0x7dbd500U;
            expected_ec_ctx.val = 0xc17f100U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 69;
            expected_ec_ctx.error = 0;
            int returnVal = EntropyCoder.ec_write_byte_at_end(through_ec_ctx, in__value);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(0, returnVal);
        }

        [TestMethod]
        public void Test_ec_enc_done_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 130,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,43,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 201;
            through_ec_ctx.offs = 0x14U;
            through_ec_ctx.rng = 0x3025d5b2U;
            through_ec_ctx.val = 0xb0906c00U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 98;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,43,99,128,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 201;
            expected_ec_ctx.offs = 0x16U;
            expected_ec_ctx.rng = 0x3025d5b2U;
            expected_ec_ctx.val = 0xb0906c00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_done(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_done_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,105,171,30,218,159,198,195,224,213,26,16,102,194,248,136,222,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 249;
            through_ec_ctx.offs = 0x1aU;
            through_ec_ctx.rng = 0x2172f723U;
            through_ec_ctx.val = 0x7ce66600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 216;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,105,171,30,218,159,198,195,224,213,26,16,102,194,248,136,222,217,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 249;
            expected_ec_ctx.offs = 0x1cU;
            expected_ec_ctx.rng = 0x2172f723U;
            expected_ec_ctx.val = 0x7ce66600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_done(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_done_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,20,231,28,64,30,208,221,121,84,184,192,76,115,138,166,50,184,16,231,195,27,21,29,87,210,169,154,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 265;
            through_ec_ctx.offs = 0x1cU;
            through_ec_ctx.rng = 0x1eb38df3U;
            through_ec_ctx.val = 0x52a60100U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 234;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,20,231,28,64,30,208,221,121,84,184,192,76,115,138,166,50,184,16,231,195,27,21,29,87,210,169,154,234,192,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 265;
            expected_ec_ctx.offs = 0x1eU;
            expected_ec_ctx.rng = 0x1eb38df3U;
            expected_ec_ctx.val = 0x52a60100U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_done(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_done_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,7,209,41,54,42,209,22,205,169,223,134,223,242,177,53,90,154,4,191,91,250,225,251,39,255,167,154,234,192,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 257;
            through_ec_ctx.offs = 0x1bU;
            through_ec_ctx.rng = 0x28c3a935U;
            through_ec_ctx.val = 0x391d7300U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 26;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,7,209,41,54,42,209,22,205,169,223,134,223,242,177,53,90,154,4,191,91,250,225,251,39,255,167,26,128,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 257;
            expected_ec_ctx.offs = 0x1dU;
            expected_ec_ctx.rng = 0x28c3a935U;
            expected_ec_ctx.val = 0x391d7300U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_done(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_done_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,25,89,230,101,213,183,242,249,7,90,231,22,180,165,128,158,129,212,44,208,169,83,251,39,255,167,26,128,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 225;
            through_ec_ctx.offs = 0x17U;
            through_ec_ctx.rng = 0x34b5016U;
            through_ec_ctx.val = 0x6d351700U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,25,89,230,101,213,183,242,249,7,90,231,22,180,165,128,158,129,212,44,208,169,83,219,220,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 225;
            expected_ec_ctx.offs = 0x19U;
            expected_ec_ctx.rng = 0x34b5016U;
            expected_ec_ctx.val = 0x6d351700U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_done(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x12U;
            uint in__fh = 0x13U;
            uint in__ft = 0x14U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 86;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x3710b59U;
            expected_ec_ctx.val = 0x4d23e24eU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x3710b59U;
            through_ec_ctx.val = 0x4d23e24eU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x8U;
            uint in__fh = 0x9U;
            uint in__ft = 0xcU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 94;
            expected_ec_ctx.offs = 0x6U;
            expected_ec_ctx.rng = 0x496b9c00U;
            expected_ec_ctx.val = 0x6f3f3700U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 158;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0x6U;
            through_ec_ctx.rng = 0x496b9c00U;
            through_ec_ctx.val = 0x6f3f3700U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 158;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5U;
            uint in__fh = 0x6U;
            uint in__ft = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 94;
            expected_ec_ctx.offs = 0x6U;
            expected_ec_ctx.rng = 0x92d7380U;
            expected_ec_ctx.val = 0x9d227880U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 158;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0x6U;
            through_ec_ctx.rng = 0x92d7380U;
            through_ec_ctx.val = 0x9d227880U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 158;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1U;
            uint in__ft = 0x10U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 94;
            expected_ec_ctx.offs = 0x6U;
            expected_ec_ctx.rng = 0x92d738U;
            expected_ec_ctx.val = 0x9d227880U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 158;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0x6U;
            through_ec_ctx.rng = 0x92d738U;
            through_ec_ctx.val = 0x9d227880U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 158;
            through_ec_ctx.error = 0;
            uint in__fl = 0x6U;
            uint in__fh = 0x7U;
            uint in__ft = 0x10U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 102;
            expected_ec_ctx.offs = 0x7U;
            expected_ec_ctx.rng = 0x92d7300U;
            expected_ec_ctx.val = 0x59893a00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 58;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_bin_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0xfffe00U;
            through_ec_ctx.val = 0x3eff8200U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5eb7U;
            uint in__fh = 0x64acU;
            uint in__bits = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0xbe40b00U;
            expected_ec_ctx.val = 0x3d0f4900U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 127;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode_bin(through_ec_ctx, in__fl, in__fh, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_bin_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0xbe40b00U;
            through_ec_ctx.val = 0x3d0f4900U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 127;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1b00U;
            uint in__bits = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x2822300U;
            expected_ec_ctx.val = 0x3d0f4900U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 127;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode_bin(through_ec_ctx, in__fl, in__fh, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_bin_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x2822300U;
            through_ec_ctx.val = 0x3d0f4900U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 127;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1f80U;
            uint in__bits = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x9e2100U;
            expected_ec_ctx.val = 0x3d0f4900U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 127;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode_bin(through_ec_ctx, in__fl, in__fh, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_bin_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x9e2100U;
            through_ec_ctx.val = 0x3d0f4900U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 127;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x2100U;
            uint in__bits = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x1U;
            expected_ec_ctx.rng = 0x28dd0000U;
            expected_ec_ctx.val = 0xf490000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 122;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode_bin(through_ec_ctx, in__fl, in__fh, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_encode_bin_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0xfffe00U;
            through_ec_ctx.val = 0x3eff8200U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5030U;
            uint in__fh = 0x58c2U;
            uint in__bits = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x111b6e00U;
            expected_ec_ctx.val = 0x200fd000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 127;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_encode_bin(through_ec_ctx, in__fl, in__fh, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bit_logp_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 193,106,11,137,232,156,214,38,39,97,93,160,49,216,229,165,125,127,24,17,127,39,51,30,211,218,188,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 217;
            through_ec_ctx.offs = 0x16U;
            through_ec_ctx.rng = 0xe1b3910U;
            through_ec_ctx.val = 0x9cadebdbU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 18;
            through_ec_ctx.error = 0;
            int in__val = 0;
            uint in__logp = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 193,106,11,137,232,156,214,38,39,97,93,160,49,216,229,165,125,127,24,17,127,39,51,30,211,218,188,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 217;
            expected_ec_ctx.offs = 0x16U;
            expected_ec_ctx.rng = 0x70d9c88U;
            expected_ec_ctx.val = 0x9cadebdbU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 18;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bit_logp(through_ec_ctx, in__val, in__logp);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bit_logp_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204, 204 });
            through_ec_ctx.storage = 0x2U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x80000000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__val = 0;
            uint in__logp = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204, 204 });
            expected_ec_ctx.storage = 0x2U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x7fff0000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bit_logp(through_ec_ctx, in__val, in__logp);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bit_logp_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204, 204 });
            through_ec_ctx.storage = 0x2U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x7fff0000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__val = 1;
            uint in__logp = 0x3U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204, 204 });
            expected_ec_ctx.storage = 0x2U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0xfffe000U;
            expected_ec_ctx.val = 0x6fff2000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bit_logp(through_ec_ctx, in__val, in__logp);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bit_logp_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x80000000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__val = 0;
            uint in__logp = 0xfU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x7fff0000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bit_logp(through_ec_ctx, in__val, in__logp);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bit_logp_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x7fff0000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__val = 0;
            uint in__logp = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x3fff8000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bit_logp(through_ec_ctx, in__val, in__logp);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bits_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 0, 0 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 57;
            through_ec_ctx.offs = 0x2U;
            through_ec_ctx.rng = 0x3aab000U;
            through_ec_ctx.val = 0x6f59e000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 37;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__bits = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 0, 0 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 1;
            expected_ec_ctx.nbits_total = 58;
            expected_ec_ctx.offs = 0x2U;
            expected_ec_ctx.rng = 0x3aab000U;
            expected_ec_ctx.val = 0x6f59e000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 37;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bits(through_ec_ctx, in__fl, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bits_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 81;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__bits = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 1;
            expected_ec_ctx.nbits_total = 82;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0xf311600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bits(through_ec_ctx, in__fl, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bits_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 1;
            through_ec_ctx.nbits_total = 82;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__bits = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 2;
            expected_ec_ctx.nbits_total = 83;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0xf311600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bits(through_ec_ctx, in__fl, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bits_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 2;
            through_ec_ctx.nbits_total = 83;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__bits = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 3;
            expected_ec_ctx.nbits_total = 84;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0xf311600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bits(through_ec_ctx, in__fl, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bits_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 3;
            through_ec_ctx.nbits_total = 84;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x1U;
            uint in__bits = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 4;
            expected_ec_ctx.nbits_total = 85;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0xf311600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bits(through_ec_ctx, in__fl, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_bits_5()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 4;
            through_ec_ctx.nbits_total = 85;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__bits = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 86;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0xf311600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_bits(through_ec_ctx, in__fl, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_patch_initial_bits_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,43,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 201;
            through_ec_ctx.offs = 0x14U;
            through_ec_ctx.rng = 0x3025d5b2U;
            through_ec_ctx.val = 0xb0906c00U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 98;
            through_ec_ctx.error = 0;
            uint in__val = 0x4U;
            uint in__nbits = 0x3U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130,200,84,224,90,140,40,20,166,119,40,181,26,88,238,23,116,255,58,43,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 201;
            expected_ec_ctx.offs = 0x14U;
            expected_ec_ctx.rng = 0x3025d5b2U;
            expected_ec_ctx.val = 0xb0906c00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 98;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_patch_initial_bits(through_ec_ctx, in__val, in__nbits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_patch_initial_bits_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,105,171,30,218,159,198,195,224,213,26,16,102,194,248,136,222,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 249;
            through_ec_ctx.offs = 0x1aU;
            through_ec_ctx.rng = 0x2172f723U;
            through_ec_ctx.val = 0x7ce66600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 216;
            through_ec_ctx.error = 0;
            uint in__val = 0x0U;
            uint in__nbits = 0x3U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,39,36,229,234,232,107,27,186,80,105,171,30,218,159,198,195,224,213,26,16,102,194,248,136,222,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 249;
            expected_ec_ctx.offs = 0x1aU;
            expected_ec_ctx.rng = 0x2172f723U;
            expected_ec_ctx.val = 0x7ce66600U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 216;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_patch_initial_bits(through_ec_ctx, in__val, in__nbits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_patch_initial_bits_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,20,231,28,64,30,208,221,121,84,184,192,76,115,138,166,50,184,16,231,195,27,21,29,87,210,169,154,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 265;
            through_ec_ctx.offs = 0x1cU;
            through_ec_ctx.rng = 0x1eb38df3U;
            through_ec_ctx.val = 0x52a60100U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 234;
            through_ec_ctx.error = 0;
            uint in__val = 0x0U;
            uint in__nbits = 0x3U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,20,231,28,64,30,208,221,121,84,184,192,76,115,138,166,50,184,16,231,195,27,21,29,87,210,169,154,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 265;
            expected_ec_ctx.offs = 0x1cU;
            expected_ec_ctx.rng = 0x1eb38df3U;
            expected_ec_ctx.val = 0x52a60100U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 234;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_patch_initial_bits(through_ec_ctx, in__val, in__nbits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_patch_initial_bits_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,7,209,41,54,42,209,22,205,169,223,134,223,242,177,53,90,154,4,191,91,250,225,251,39,255,167,154,234,192,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 257;
            through_ec_ctx.offs = 0x1bU;
            through_ec_ctx.rng = 0x28c3a935U;
            through_ec_ctx.val = 0x391d7300U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 26;
            through_ec_ctx.error = 0;
            uint in__val = 0x0U;
            uint in__nbits = 0x3U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,7,209,41,54,42,209,22,205,169,223,134,223,242,177,53,90,154,4,191,91,250,225,251,39,255,167,154,234,192,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 257;
            expected_ec_ctx.offs = 0x1bU;
            expected_ec_ctx.rng = 0x28c3a935U;
            expected_ec_ctx.val = 0x391d7300U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 26;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_patch_initial_bits(through_ec_ctx, in__val, in__nbits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_patch_initial_bits_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,25,89,230,101,213,183,242,249,7,90,231,22,180,165,128,158,129,212,44,208,169,83,251,39,255,167,26,128,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 225;
            through_ec_ctx.offs = 0x17U;
            through_ec_ctx.rng = 0x34b5016U;
            through_ec_ctx.val = 0x6d351700U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__val = 0x0U;
            uint in__nbits = 0x3U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 30,25,89,230,101,213,183,242,249,7,90,231,22,180,165,128,158,129,212,44,208,169,83,251,39,255,167,26,128,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 225;
            expected_ec_ctx.offs = 0x17U;
            expected_ec_ctx.rng = 0x34b5016U;
            expected_ec_ctx.val = 0x6d351700U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_patch_initial_bits(through_ec_ctx, in__val, in__nbits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_tell_frac_0()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 204, 204 });
            in_ec_ctx.storage = 0x2U;
            in_ec_ctx.end_offs = 0x0U;
            in_ec_ctx.end_window = 0x0U;
            in_ec_ctx.nend_bits = 0;
            in_ec_ctx.nbits_total = 41;
            in_ec_ctx.offs = 0x0U;
            in_ec_ctx.rng = 0x1fffc00U;
            in_ec_ctx.val = 0xdb144800U;
            in_ec_ctx.ext = 0x0U;
            in_ec_ctx.rem = 234;
            in_ec_ctx.error = 0;
            uint expected_returnVal = 0x79U;
            uint returnVal = EntropyCoder.ec_tell_frac(in_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_tell_frac_1()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 108, 104, 39, 224 });
            in_ec_ctx.storage = 0x4U;
            in_ec_ctx.end_offs = 0x0U;
            in_ec_ctx.end_window = 0x0U;
            in_ec_ctx.nend_bits = 0;
            in_ec_ctx.nbits_total = 57;
            in_ec_ctx.offs = 0x4U;
            in_ec_ctx.rng = 0x1f82bc0U;
            in_ec_ctx.val = 0x16113bfU;
            in_ec_ctx.ext = 0x1d2U;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint expected_returnVal = 0xf9U;
            uint returnVal = EntropyCoder.ec_tell_frac(in_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_tell_frac_2()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 34, 0, 0 });
            in_ec_ctx.storage = 0x4U;
            in_ec_ctx.end_offs = 0x0U;
            in_ec_ctx.end_window = 0x0U;
            in_ec_ctx.nend_bits = 0;
            in_ec_ctx.nbits_total = 57;
            in_ec_ctx.offs = 0x2U;
            in_ec_ctx.rng = 0x171b400U;
            in_ec_ctx.val = 0x99803000U;
            in_ec_ctx.ext = 0x0U;
            in_ec_ctx.rem = 171;
            in_ec_ctx.error = 0;
            uint expected_returnVal = 0xfcU;
            uint returnVal = EntropyCoder.ec_tell_frac(in_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_tell_frac_3()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 102;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0x92d7300U;
            in_ec_ctx.val = 0x548c159U;
            in_ec_ctx.ext = 0x92d73U;
            in_ec_ctx.rem = 76;
            in_ec_ctx.error = 0;
            uint expected_returnVal = 0x24fU;
            uint returnVal = EntropyCoder.ec_tell_frac(in_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_enc_shrink_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 188,235,95,53,168,149,227,107,214,216,144,223,83,195,128,85,200,9,128,43,86,234,216,192,200,18,174,170,27,164,226,69,109,
250,63,211,87,13,92,9,124,37,173,81,187,213,157,148,124,114,240,215,200,201,152,34,132,14,143,109,209,202,62,148,155,55,
239,101,247,22,239,218,138,155,68,171,92,95,138,192,89,165,253,141,173,41,43,26,43,137,31,60,109,224,18,73,248,248,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 225;
            through_ec_ctx.offs = 0x17U;
            through_ec_ctx.rng = 0x19747deU;
            through_ec_ctx.val = 0x3dcf8218U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 229;
            through_ec_ctx.error = 0;
            uint in__size = 0x27U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 188,235,95,53,168,149,227,107,214,216,144,223,83,195,128,85,200,9,128,43,86,234,216,192,200,18,174,170,27,164,226,69,109,
250,63,211,87,13,92});
            expected_ec_ctx.storage = 0x27U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 225;
            expected_ec_ctx.offs = 0x17U;
            expected_ec_ctx.rng = 0x19747deU;
            expected_ec_ctx.val = 0x3dcf8218U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 229;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_shrink(through_ec_ctx, in__size);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_shrink_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 63,97,224,4,159,255,58,153,13,134,172,15,31,195,128,85,200,9,128,43,86,234,216,229,126,103,171,59,198,21,141,180,44,
215,56,34,240,181,102,9,124,37,173,81,187,213,157,148,124,114,240,215,200,201,152,34,132,14,143,109,209,202,62,148,155,55,
239,101,247,22,239,218,138,155,68,171,92,95,138,192,89,165,253,141,173,41,43,26,43,137,31,60,109,224,18,73,248,248,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 145;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x3fe91443U;
            through_ec_ctx.val = 0x22060100U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 15;
            through_ec_ctx.error = 0;
            uint in__size = 0x1bU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 63, 97, 224, 4, 159, 255, 58, 153, 13, 134, 172, 15, 31, 195, 128, 85, 200, 9, 128, 43, 86, 234, 216, 229, 126, 103, 171 });
            expected_ec_ctx.storage = 0x1bU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 145;
            expected_ec_ctx.offs = 0xdU;
            expected_ec_ctx.rng = 0x3fe91443U;
            expected_ec_ctx.val = 0x22060100U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 15;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_shrink(through_ec_ctx, in__size);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_shrink_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 57,194,172,209,233,146,250,45,234,68,203,32,77,73,78,41,136,176,116,164,3,44,202,180,91,235,189,145,41,16,64,149,114,
89,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 321;
            through_ec_ctx.offs = 0x23U;
            through_ec_ctx.rng = 0x1e6d2610U;
            through_ec_ctx.val = 0x99cc300U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 112;
            through_ec_ctx.error = 0;
            uint in__size = 0x33U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 57,194,172,209,233,146,250,45,234,68,203,32,77,73,78,41,136,176,116,164,3,44,202,180,91,235,189,145,41,16,64,149,114,
89,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            expected_ec_ctx.storage = 0x33U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 321;
            expected_ec_ctx.offs = 0x23U;
            expected_ec_ctx.rng = 0x1e6d2610U;
            expected_ec_ctx.val = 0x99cc300U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 112;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_shrink(through_ec_ctx, in__size);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_shrink_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 57,194,111,227,191,246,101,142,107,217,91,221,181,23,36,252,172,221,217,204,229,179,3,203,177,39,21,180,43,13,90,159,41,
64,120,112,65,209,201,123,29,128,72,192,138,254,10,5,169,46,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 313;
            through_ec_ctx.offs = 0x22U;
            through_ec_ctx.rng = 0x2906194eU;
            through_ec_ctx.val = 0x69363000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 205;
            through_ec_ctx.error = 0;
            uint in__size = 0x32U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 57,194,111,227,191,246,101,142,107,217,91,221,181,23,36,252,172,221,217,204,229,179,3,203,177,39,21,180,43,13,90,159,41,
64,120,112,65,209,201,123,29,128,72,192,138,254,10,5,169,46});
            expected_ec_ctx.storage = 0x32U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 313;
            expected_ec_ctx.offs = 0x22U;
            expected_ec_ctx.rng = 0x2906194eU;
            expected_ec_ctx.val = 0x69363000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 205;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_shrink(through_ec_ctx, in__size);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_shrink_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 57,195,30,169,104,15,82,38,232,234,60,90,100,221,47,187,31,227,155,21,181,222,187,92,75,159,41,184,10,77,10,159,41,
64,205,210,153,203,182,51,165,67,203,93,239,96,23,40,125,144,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 289;
            through_ec_ctx.offs = 0x1fU;
            through_ec_ctx.rng = 0x14e269aU;
            through_ec_ctx.val = 0x6c5c789aU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 38;
            through_ec_ctx.error = 0;
            uint in__size = 0x2fU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 57,195,30,169,104,15,82,38,232,234,60,90,100,221,47,187,31,227,155,21,181,222,187,92,75,159,41,184,10,77,10,159,41,
64,205,210,153,203,182,51,165,67,203,93,239,96,23});
            expected_ec_ctx.storage = 0x2fU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 289;
            expected_ec_ctx.offs = 0x1fU;
            expected_ec_ctx.rng = 0x14e269aU;
            expected_ec_ctx.val = 0x6c5c789aU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 38;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_shrink(through_ec_ctx, in__size);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_uint_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0xf311600U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x12U;
            uint in__ft = 0x14U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 86;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x3710b59U;
            expected_ec_ctx.val = 0x4d23e24eU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 62;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_uint(through_ec_ctx, in__fl, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_uint_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 0, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x3710b59U;
            through_ec_ctx.val = 0x4d23e24eU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 62;
            through_ec_ctx.error = 0;
            uint in__fl = 0x8U;
            uint in__ft = 0xcU;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 94;
            expected_ec_ctx.offs = 0x6U;
            expected_ec_ctx.rng = 0x496b9c00U;
            expected_ec_ctx.val = 0x6f3f3700U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 158;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_uint(through_ec_ctx, in__fl, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_uint_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0x6U;
            through_ec_ctx.rng = 0x496b9c00U;
            through_ec_ctx.val = 0x6f3f3700U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 158;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5U;
            uint in__ft = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 94;
            expected_ec_ctx.offs = 0x6U;
            expected_ec_ctx.rng = 0x92d7380U;
            expected_ec_ctx.val = 0x9d227880U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 158;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_uint(through_ec_ctx, in__fl, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_uint_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0x6U;
            through_ec_ctx.rng = 0x92d7380U;
            through_ec_ctx.val = 0x9d227880U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 158;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__ft = 0x10U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 94;
            expected_ec_ctx.offs = 0x6U;
            expected_ec_ctx.rng = 0x92d738U;
            expected_ec_ctx.val = 0x9d227880U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 158;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_uint(through_ec_ctx, in__fl, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_uint_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 0, 0, 0, 0, 0, 0, 0 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x8U;
            through_ec_ctx.nend_bits = 5;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0x6U;
            through_ec_ctx.rng = 0x92d738U;
            through_ec_ctx.val = 0x9d227880U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 158;
            through_ec_ctx.error = 0;
            uint in__fl = 0x6U;
            uint in__ft = 0x10U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 0, 0, 0, 0, 0, 0 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x8U;
            expected_ec_ctx.nend_bits = 5;
            expected_ec_ctx.nbits_total = 102;
            expected_ec_ctx.offs = 0x7U;
            expected_ec_ctx.rng = 0x92d7300U;
            expected_ec_ctx.val = 0x59893a00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 58;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_uint(through_ec_ctx, in__fl, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_normalize_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_ec_ctx.storage = 0x16U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 9;
            through_ec_ctx.offs = 0x1U;
            through_ec_ctx.rng = 0x80U;
            through_ec_ctx.val = 0x3eU;
            through_ec_ctx.ext = 0xccccccccU;
            through_ec_ctx.rem = 130;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_ec_ctx.storage = 0x16U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x80000000U;
            expected_ec_ctx.val = 0x3e9bd58fU;
            expected_ec_ctx.ext = 0xccccccccU;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_normalize_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_ec_ctx.storage = 0x16U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x40000000U;
            through_ec_ctx.val = 0x3e9bd58fU;
            through_ec_ctx.ext = 0xccccccccU;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_ec_ctx.storage = 0x16U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x40000000U;
            expected_ec_ctx.val = 0x3e9bd58fU;
            expected_ec_ctx.ext = 0xccccccccU;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_normalize_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_ec_ctx.storage = 0x16U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x20000000U;
            through_ec_ctx.val = 0x1e9bd58fU;
            through_ec_ctx.ext = 0xccccccccU;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_ec_ctx.storage = 0x16U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x20000000U;
            expected_ec_ctx.val = 0x1e9bd58fU;
            expected_ec_ctx.ext = 0xccccccccU;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_normalize_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_ec_ctx.storage = 0x16U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x10000000U;
            through_ec_ctx.val = 0xe9bd58fU;
            through_ec_ctx.ext = 0xccccccccU;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_ec_ctx.storage = 0x16U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x10000000U;
            expected_ec_ctx.val = 0xe9bd58fU;
            expected_ec_ctx.ext = 0xccccccccU;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_normalize_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            through_ec_ctx.storage = 0x16U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x1800000U;
            through_ec_ctx.val = 0x1bd58fU;
            through_ec_ctx.ext = 0xccccccccU;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 130, 200, 84, 224, 90, 140, 40, 20, 166, 119, 40, 181, 26, 88, 238, 23, 116, 255, 58, 43, 99, 128 });
            expected_ec_ctx.storage = 0x16U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x1800000U;
            expected_ec_ctx.val = 0x1bd58fU;
            expected_ec_ctx.ext = 0xccccccccU;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_normalize(through_ec_ctx);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_decode_0()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 86;
            in_ec_ctx.offs = 0xaU;
            in_ec_ctx.rng = 0x44d4e300U;
            in_ec_ctx.val = 0x4689b92U;
            in_ec_ctx.ext = 0x194U;
            in_ec_ctx.rem = 219;
            in_ec_ctx.error = 0;
            uint in__ft = 20;
            uint expected_returnVal = 0x12U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_1()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 86;
            in_ec_ctx.offs = 0xaU;
            in_ec_ctx.rng = 0x3710b59U;
            in_ec_ctx.val = 0xf79039U;
            in_ec_ctx.ext = 0x3710b59U;
            in_ec_ctx.rem = 219;
            in_ec_ctx.error = 0;
            uint in__ft = 12;
            uint expected_returnVal = 0x8U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_2()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 94;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0x496b9c00U;
            in_ec_ctx.val = 0x1b4d6514U;
            in_ec_ctx.ext = 0x496b9cU;
            in_ec_ctx.rem = 215;
            in_ec_ctx.error = 0;
            uint in__ft = 8;
            uint expected_returnVal = 0x5U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_3()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 94;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0x92d7380U;
            in_ec_ctx.val = 0x8f27e14U;
            in_ec_ctx.ext = 0x92d7380U;
            in_ec_ctx.rem = 215;
            in_ec_ctx.error = 0;
            uint in__ft = 16;
            uint expected_returnVal = 0x0U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_4()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 94;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0x92d738U;
            in_ec_ctx.val = 0x57e1ccU;
            in_ec_ctx.ext = 0x92d738U;
            in_ec_ctx.rem = 215;
            in_ec_ctx.error = 0;
            uint in__ft = 16;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_5()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 102;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0x92d7300U;
            in_ec_ctx.val = 0x548c159U;
            in_ec_ctx.ext = 0x92d73U;
            in_ec_ctx.rem = 76;
            in_ec_ctx.error = 0;
            uint in__ft = 8;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_6()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 102;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0x125ae60U;
            in_ec_ctx.val = 0xb207d9U;
            in_ec_ctx.ext = 0x125ae60U;
            in_ec_ctx.rem = 76;
            in_ec_ctx.error = 0;
            uint in__ft = 8;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_7()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 110;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x24b5cc00U;
            in_ec_ctx.val = 0x1f30a9dbU;
            in_ec_ctx.ext = 0x24b5ccU;
            in_ec_ctx.rem = 72;
            in_ec_ctx.error = 0;
            uint in__ft = 8;
            uint expected_returnVal = 0x1U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_8()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 110;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x496b980U;
            in_ec_ctx.val = 0x3a850dbU;
            in_ec_ctx.ext = 0x496b980U;
            in_ec_ctx.rem = 72;
            in_ec_ctx.error = 0;
            uint in__ft = 32;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_9()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 118;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x24b5cc00U;
            in_ec_ctx.val = 0x128fefffU;
            in_ec_ctx.ext = 0x24b5ccU;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint in__ft = 32;
            uint expected_returnVal = 0xfU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_10()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 118;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x125ae60U;
            in_ec_ctx.val = 0x3509ffU;
            in_ec_ctx.ext = 0x125ae60U;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint in__ft = 8;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_11()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6deba62U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 126;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x24b5cc00U;
            in_ec_ctx.val = 0x105433ffU;
            in_ec_ctx.ext = 0x24b5ccU;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint in__ft = 8;
            uint expected_returnVal = 0x4U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_97()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 95;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0x310e915U;
            in_ec_ctx.val = 0x1dcef2U;
            in_ec_ctx.ext = 0x310e915U;
            in_ec_ctx.rem = 241;
            in_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0xbU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_98()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 103;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0x4168c100U;
            in_ec_ctx.val = 0x1dcef259U;
            in_ec_ctx.ext = 0x4168c1U;
            in_ec_ctx.rem = 76;
            in_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_99()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 103;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0x573656aU;
            in_ec_ctx.val = 0x28df747U;
            in_ec_ctx.ext = 0x573656aU;
            in_ec_ctx.rem = 76;
            in_ec_ctx.error = 0;
            uint in__ft = 0x58U;
            uint expected_returnVal = 0x2eU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_100()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 111;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0xfdb5500U;
            in_ec_ctx.val = 0x3d6aaefU;
            in_ec_ctx.ext = 0xfdb55U;
            in_ec_ctx.rem = 32;
            in_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0x18U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_101()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 119;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x7edaa800U;
            in_ec_ctx.val = 0x5eb057ffU;
            in_ec_ctx.ext = 0x7edaa8U;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0x8U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_102()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 119;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x3f6d540U;
            in_ec_ctx.val = 0x3832f3fU;
            in_ec_ctx.ext = 0x3f6d540U;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_103()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 103, 112, 118, 101, 139, 102, 52, 39, 99, 101, 241, 76, 32 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x197c530U;
            in_ec_ctx.nend_bits = 26;
            in_ec_ctx.nbits_total = 127;
            in_ec_ctx.offs = 0xdU;
            in_ec_ctx.rng = 0x1fb6aa00U;
            in_ec_ctx.val = 0xb34a7ffU;
            in_ec_ctx.ext = 0x1fb6aaU;
            in_ec_ctx.rem = 0;
            in_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0xaU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_104()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 78;
            in_ec_ctx.offs = 0x9U;
            in_ec_ctx.rng = 0xbec6d7U;
            in_ec_ctx.val = 0x20e0dcU;
            in_ec_ctx.ext = 0x6afU;
            in_ec_ctx.rem = 205;
            in_ec_ctx.error = 0;
            uint in__ft = 0x18U;
            uint expected_returnVal = 0x13U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_105()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 86;
            in_ec_ctx.offs = 0xaU;
            in_ec_ctx.rng = 0x7f2f300U;
            in_ec_ctx.val = 0x1151018U;
            in_ec_ctx.ext = 0x7f2f3U;
            in_ec_ctx.rem = 207;
            in_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0xdU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_106()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 94;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0x7f2f3000U;
            in_ec_ctx.val = 0x16b1b87fU;
            in_ec_ctx.ext = 0x7f2f30U;
            in_ec_ctx.rem = 1;
            in_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x9U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_107()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 94;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0xa994400U;
            in_ec_ctx.val = 0x17f307fU;
            in_ec_ctx.ext = 0xa994400U;
            in_ec_ctx.rem = 1;
            in_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0xdU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_108()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 94;
            in_ec_ctx.offs = 0xbU;
            in_ec_ctx.rng = 0xa99440U;
            in_ec_ctx.val = 0x2c07ffU;
            in_ec_ctx.ext = 0xa99440U;
            in_ec_ctx.rem = 1;
            in_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0xbU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_109()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 102;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0xa994400U;
            in_ec_ctx.val = 0x1a2ef4cU;
            in_ec_ctx.ext = 0xa9944U;
            in_ec_ctx.rem = 102;
            in_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0xaU;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_decode_110()
        {
            ec_ctx in_ec_ctx = new ec_ctx();
            in_ec_ctx.buf = new Pointer<byte>(new byte[] { 104, 125, 131, 17, 5, 18, 182, 113, 205, 207, 1, 102, 150 });
            in_ec_ctx.storage = 0xdU;
            in_ec_ctx.end_offs = 0x4U;
            in_ec_ctx.end_window = 0x6780b34U;
            in_ec_ctx.nend_bits = 27;
            in_ec_ctx.nbits_total = 102;
            in_ec_ctx.offs = 0xcU;
            in_ec_ctx.rng = 0xe21b00U;
            in_ec_ctx.val = 0xc0d44cU;
            in_ec_ctx.ext = 0xe21b00U;
            in_ec_ctx.rem = 102;
            in_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x1U;
            uint returnVal = EntropyCoder.ec_decode(in_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_update_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0xfffe00U;
            through_ec_ctx.val = 0x42690dU;
            through_ec_ctx.ext = 0x1ffU;
            through_ec_ctx.rem = 229;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5eb7U;
            uint in__fh = 0x64acU;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0xbe40b00U;
            expected_ec_ctx.val = 0xbdc617fU;
            expected_ec_ctx.ext = 0x1ffU;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0xbe40b00U;
            through_ec_ctx.val = 0xbdc617fU;
            through_ec_ctx.ext = 0x17c8U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1b00U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x2822300U;
            expected_ec_ctx.val = 0x27a797fU;
            expected_ec_ctx.ext = 0x17c8U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x2822300U;
            through_ec_ctx.val = 0x27a797fU;
            through_ec_ctx.ext = 0x504U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1f80U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x9e2100U;
            expected_ec_ctx.val = 0x96777fU;
            expected_ec_ctx.ext = 0x504U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x9e2100U;
            through_ec_ctx.val = 0x96777fU;
            through_ec_ctx.ext = 0x13cU;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x2100U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x28dd0000U;
            expected_ec_ctx.val = 0x21337fffU;
            expected_ec_ctx.ext = 0x13cU;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0xfffe00U;
            through_ec_ctx.val = 0x42690dU;
            through_ec_ctx.ext = 0x1ffU;
            through_ec_ctx.rem = 229;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5eb7U;
            uint in__fh = 0x64acU;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0xbe40b00U;
            expected_ec_ctx.val = 0xbdc617fU;
            expected_ec_ctx.ext = 0x1ffU;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_5()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0xbe40b00U;
            through_ec_ctx.val = 0xbdc617fU;
            through_ec_ctx.ext = 0x17c8U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1b00U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x2822300U;
            expected_ec_ctx.val = 0x27a797fU;
            expected_ec_ctx.ext = 0x17c8U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_6()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x2822300U;
            through_ec_ctx.val = 0x27a797fU;
            through_ec_ctx.ext = 0x504U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1f80U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x9e2100U;
            expected_ec_ctx.val = 0x96777fU;
            expected_ec_ctx.ext = 0x504U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_7()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x9e2100U;
            through_ec_ctx.val = 0x96777fU;
            through_ec_ctx.ext = 0x13cU;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x2100U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 122, 45, 229 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x28dd0000U;
            expected_ec_ctx.val = 0x21337fffU;
            expected_ec_ctx.ext = 0x13cU;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_8()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0xfffe00U;
            through_ec_ctx.val = 0x5f6d0fU;
            through_ec_ctx.ext = 0x1ffU;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            uint in__fl = 0x5030U;
            uint in__fh = 0x58c2U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x111b6e00U;
            expected_ec_ctx.val = 0x11184dffU;
            expected_ec_ctx.ext = 0x1ffU;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_9()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x111b6e00U;
            through_ec_ctx.val = 0x11184dffU;
            through_ec_ctx.ext = 0x2236U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1b00U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x39c2000U;
            expected_ec_ctx.val = 0x398ffffU;
            expected_ec_ctx.ext = 0x2236U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_10()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x39c2000U;
            through_ec_ctx.val = 0x398ffffU;
            through_ec_ctx.ext = 0x738U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x1f80U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0xe38400U;
            expected_ec_ctx.val = 0xe063ffU;
            expected_ec_ctx.ext = 0x738U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_update_11()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0xe38400U;
            through_ec_ctx.val = 0xe063ffU;
            through_ec_ctx.ext = 0x1c7U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__fl = 0x0U;
            uint in__fh = 0x2100U;
            uint in__ft = 0x8000U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x3aab0000U;
            expected_ec_ctx.val = 0x378affffU;
            expected_ec_ctx.ext = 0x1c7U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_dec_update(through_ec_ctx, in__fl, in__fh, in__ft);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_dec_uint_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__ft = 0x14U;
            uint expected_returnVal = 0x12U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x3710b59U;
            through_ec_ctx.val = 0xf79039U;
            through_ec_ctx.ext = 0x3710b59U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x8U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x496b9c00U;
            through_ec_ctx.val = 0x1b4d6514U;
            through_ec_ctx.ext = 0x496b9cU;
            through_ec_ctx.rem = 215;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x5U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x92d7380U;
            through_ec_ctx.val = 0x8f27e14U;
            through_ec_ctx.ext = 0x92d7380U;
            through_ec_ctx.rem = 215;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x0U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x92d738U;
            through_ec_ctx.val = 0x57e1ccU;
            through_ec_ctx.ext = 0x92d738U;
            through_ec_ctx.rem = 215;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_5()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 102;
            through_ec_ctx.offs = 0xcU;
            through_ec_ctx.rng = 0x92d7300U;
            through_ec_ctx.val = 0x548c159U;
            through_ec_ctx.ext = 0x92d73U;
            through_ec_ctx.rem = 76;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_6()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 102;
            through_ec_ctx.offs = 0xcU;
            through_ec_ctx.rng = 0x125ae60U;
            through_ec_ctx.val = 0xb207d9U;
            through_ec_ctx.ext = 0x125ae60U;
            through_ec_ctx.rem = 76;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_7()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 110;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x24b5cc00U;
            through_ec_ctx.val = 0x1f30a9dbU;
            through_ec_ctx.ext = 0x24b5ccU;
            through_ec_ctx.rem = 72;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x1U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_8()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 110;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x496b980U;
            through_ec_ctx.val = 0x3a850dbU;
            through_ec_ctx.ext = 0x496b980U;
            through_ec_ctx.rem = 72;
            through_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_9()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 118;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x24b5cc00U;
            through_ec_ctx.val = 0x128fefffU;
            through_ec_ctx.ext = 0x24b5ccU;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0xfU;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_10()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 118;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x125ae60U;
            through_ec_ctx.val = 0x3509ffU;
            through_ec_ctx.ext = 0x125ae60U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_11()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 126;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x24b5cc00U;
            through_ec_ctx.val = 0x105433ffU;
            through_ec_ctx.ext = 0x24b5ccU;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x4U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_12()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 126;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x496b980U;
            through_ec_ctx.val = 0x290077fU;
            through_ec_ctx.ext = 0x496b980U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x7U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_13()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__ft = 0x14U;
            uint expected_returnVal = 0x12U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_14()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x3710b59U;
            through_ec_ctx.val = 0xf79039U;
            through_ec_ctx.ext = 0x3710b59U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x8U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_15()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x496b9c00U;
            through_ec_ctx.val = 0x1b4d6514U;
            through_ec_ctx.ext = 0x496b9cU;
            through_ec_ctx.rem = 215;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x5U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_16()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x92d7380U;
            through_ec_ctx.val = 0x8f27e14U;
            through_ec_ctx.ext = 0x92d7380U;
            through_ec_ctx.rem = 215;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x0U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_17()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x92d738U;
            through_ec_ctx.val = 0x57e1ccU;
            through_ec_ctx.ext = 0x92d738U;
            through_ec_ctx.rem = 215;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_18()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 102;
            through_ec_ctx.offs = 0xcU;
            through_ec_ctx.rng = 0x92d7300U;
            through_ec_ctx.val = 0x548c159U;
            through_ec_ctx.ext = 0x92d73U;
            through_ec_ctx.rem = 76;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_19()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 102;
            through_ec_ctx.offs = 0xcU;
            through_ec_ctx.rng = 0x125ae60U;
            through_ec_ctx.val = 0xb207d9U;
            through_ec_ctx.ext = 0x125ae60U;
            through_ec_ctx.rem = 76;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x3U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_20()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 110;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x24b5cc00U;
            through_ec_ctx.val = 0x1f30a9dbU;
            through_ec_ctx.ext = 0x24b5ccU;
            through_ec_ctx.rem = 72;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x1U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_21()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 110;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x496b980U;
            through_ec_ctx.val = 0x3a850dbU;
            through_ec_ctx.ext = 0x496b980U;
            through_ec_ctx.rem = 72;
            through_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_22()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 118;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x24b5cc00U;
            through_ec_ctx.val = 0x128fefffU;
            through_ec_ctx.ext = 0x24b5ccU;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x20U;
            uint expected_returnVal = 0xfU;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_23()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 118;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x125ae60U;
            through_ec_ctx.val = 0x3509ffU;
            through_ec_ctx.ext = 0x125ae60U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x6U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_24()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 126;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x24b5cc00U;
            through_ec_ctx.val = 0x105433ffU;
            through_ec_ctx.ext = 0x24b5ccU;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x8U;
            uint expected_returnVal = 0x4U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_25()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 126;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x496b980U;
            through_ec_ctx.val = 0x290077fU;
            through_ec_ctx.ext = 0x496b980U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x7U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_26()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 78;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__ft = 0x18U;
            uint expected_returnVal = 0xcU;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_27()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 78;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x2e19dcaU;
            through_ec_ctx.val = 0x1b61221U;
            through_ec_ctx.ext = 0x2e19dcaU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__ft = 0x14U;
            uint expected_returnVal = 0x8U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_28()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x24e17d00U;
            through_ec_ctx.val = 0x2061c23fU;
            through_ec_ctx.ext = 0x24e17dU;
            through_ec_ctx.rem = 129;
            through_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x1U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_29()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 86;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x312ca6aU;
            through_ec_ctx.val = 0x1a5da1bU;
            through_ec_ctx.ext = 0x312ca6aU;
            through_ec_ctx.rem = 129;
            through_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x5U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_30()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x4190de00U;
            through_ec_ctx.val = 0x1c74e741U;
            through_ec_ctx.ext = 0x4190deU;
            through_ec_ctx.rem = 125;
            through_ec_ctx.error = 0;
            uint in__ft = 0x10U;
            uint expected_returnVal = 0x9U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_uint_31()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 94;
            through_ec_ctx.offs = 0xbU;
            through_ec_ctx.rng = 0x4190de0U;
            through_ec_ctx.val = 0x3de9401U;
            through_ec_ctx.ext = 0x4190de0U;
            through_ec_ctx.rem = 125;
            through_ec_ctx.error = 0;
            uint in__ft = 0xcU;
            uint expected_returnVal = 0x0U;
            uint returnVal = EntropyCoder.ec_dec_uint(through_ec_ctx, in__ft);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            through_ec_ctx.storage = 0x4U;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 57;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x3aab000U;
            through_ec_ctx.val = 0x3048fffU;
            through_ec_ctx.ext = 0x1c7U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 127, 64, 37, 224 });
            expected_ec_ctx.storage = 0x4U;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x3fa012f0U;
            expected_ec_ctx.nend_bits = 31;
            expected_ec_ctx.nbits_total = 58;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x3aab000U;
            expected_ec_ctx.val = 0x3048fffU;
            expected_ec_ctx.ext = 0x1c7U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 81;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x6deba624U;
            expected_ec_ctx.nend_bits = 31;
            expected_ec_ctx.nbits_total = 82;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba624U;
            through_ec_ctx.nend_bits = 31;
            through_ec_ctx.nbits_total = 82;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x36f5d312U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 83;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x36f5d312U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 83;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x1b7ae989U;
            expected_ec_ctx.nend_bits = 29;
            expected_ec_ctx.nbits_total = 84;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x1b7ae989U;
            through_ec_ctx.nend_bits = 29;
            through_ec_ctx.nbits_total = 84;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0xdbd74c4U;
            expected_ec_ctx.nend_bits = 28;
            expected_ec_ctx.nbits_total = 85;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_5()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0xdbd74c4U;
            through_ec_ctx.nend_bits = 28;
            through_ec_ctx.nbits_total = 85;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x6deba62U;
            expected_ec_ctx.nend_bits = 27;
            expected_ec_ctx.nbits_total = 86;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_6()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 134;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x496b9800U;
            through_ec_ctx.val = 0x44aabfffU;
            through_ec_ctx.ext = 0x496b98U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x36f5d31U;
            expected_ec_ctx.nend_bits = 26;
            expected_ec_ctx.nbits_total = 135;
            expected_ec_ctx.offs = 0xdU;
            expected_ec_ctx.rng = 0x496b9800U;
            expected_ec_ctx.val = 0x44aabfffU;
            expected_ec_ctx.ext = 0x496b98U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_7()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 81;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x6deba624U;
            expected_ec_ctx.nend_bits = 31;
            expected_ec_ctx.nbits_total = 82;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_8()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba624U;
            through_ec_ctx.nend_bits = 31;
            through_ec_ctx.nbits_total = 82;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x36f5d312U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 83;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_9()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x36f5d312U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 83;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x1b7ae989U;
            expected_ec_ctx.nend_bits = 29;
            expected_ec_ctx.nbits_total = 84;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_10()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x1b7ae989U;
            through_ec_ctx.nend_bits = 29;
            through_ec_ctx.nbits_total = 84;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0xdbd74c4U;
            expected_ec_ctx.nend_bits = 28;
            expected_ec_ctx.nbits_total = 85;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_11()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0xdbd74c4U;
            through_ec_ctx.nend_bits = 28;
            through_ec_ctx.nbits_total = 85;
            through_ec_ctx.offs = 0xaU;
            through_ec_ctx.rng = 0x44d4e300U;
            through_ec_ctx.val = 0x4689b92U;
            through_ec_ctx.ext = 0x194U;
            through_ec_ctx.rem = 219;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x6deba62U;
            expected_ec_ctx.nend_bits = 27;
            expected_ec_ctx.nbits_total = 86;
            expected_ec_ctx.offs = 0xaU;
            expected_ec_ctx.rng = 0x44d4e300U;
            expected_ec_ctx.val = 0x4689b92U;
            expected_ec_ctx.ext = 0x194U;
            expected_ec_ctx.rem = 219;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_12()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x6deba62U;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 134;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x496b9800U;
            through_ec_ctx.val = 0x44aabfffU;
            through_ec_ctx.ext = 0x496b98U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 105, 225, 87, 157, 66, 62, 159, 58, 186, 219, 215, 76, 72 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x36f5d31U;
            expected_ec_ctx.nend_bits = 26;
            expected_ec_ctx.nbits_total = 135;
            expected_ec_ctx.offs = 0xdU;
            expected_ec_ctx.rng = 0x496b9800U;
            expected_ec_ctx.val = 0x44aabfffU;
            expected_ec_ctx.ext = 0x496b98U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_13()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x40bee0e4U;
            expected_ec_ctx.nend_bits = 31;
            expected_ec_ctx.nbits_total = 74;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_14()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0e4U;
            through_ec_ctx.nend_bits = 31;
            through_ec_ctx.nbits_total = 74;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x205f7072U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 75;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_15()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x205f7072U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 75;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x102fb839U;
            expected_ec_ctx.nend_bits = 29;
            expected_ec_ctx.nbits_total = 76;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_16()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x102fb839U;
            through_ec_ctx.nend_bits = 29;
            through_ec_ctx.nbits_total = 76;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x817dc1cU;
            expected_ec_ctx.nend_bits = 28;
            expected_ec_ctx.nbits_total = 77;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_17()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x817dc1cU;
            through_ec_ctx.nend_bits = 28;
            through_ec_ctx.nbits_total = 77;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x40bee0eU;
            expected_ec_ctx.nend_bits = 27;
            expected_ec_ctx.nbits_total = 78;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_18()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 134;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x54c5a000U;
            through_ec_ctx.val = 0x3fa5dfffU;
            through_ec_ctx.ext = 0x54c5a0U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x205f707U;
            expected_ec_ctx.nend_bits = 26;
            expected_ec_ctx.nbits_total = 135;
            expected_ec_ctx.offs = 0xdU;
            expected_ec_ctx.rng = 0x54c5a000U;
            expected_ec_ctx.val = 0x3fa5dfffU;
            expected_ec_ctx.ext = 0x54c5a0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_19()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x40bee0e4U;
            expected_ec_ctx.nend_bits = 31;
            expected_ec_ctx.nbits_total = 74;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_20()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0e4U;
            through_ec_ctx.nend_bits = 31;
            through_ec_ctx.nbits_total = 74;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x205f7072U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 75;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_21()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x205f7072U;
            through_ec_ctx.nend_bits = 30;
            through_ec_ctx.nbits_total = 75;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x102fb839U;
            expected_ec_ctx.nend_bits = 29;
            expected_ec_ctx.nbits_total = 76;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_22()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x102fb839U;
            through_ec_ctx.nend_bits = 29;
            through_ec_ctx.nbits_total = 76;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x817dc1cU;
            expected_ec_ctx.nend_bits = 28;
            expected_ec_ctx.nbits_total = 77;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_23()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x817dc1cU;
            through_ec_ctx.nend_bits = 28;
            through_ec_ctx.nbits_total = 77;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x4526cb00U;
            through_ec_ctx.val = 0x2167d9cfU;
            through_ec_ctx.ext = 0x12eU;
            through_ec_ctx.rem = 97;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x40bee0eU;
            expected_ec_ctx.nend_bits = 27;
            expected_ec_ctx.nbits_total = 78;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x4526cb00U;
            expected_ec_ctx.val = 0x2167d9cfU;
            expected_ec_ctx.ext = 0x12eU;
            expected_ec_ctx.rem = 97;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_24()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x40bee0eU;
            through_ec_ctx.nend_bits = 27;
            through_ec_ctx.nbits_total = 134;
            through_ec_ctx.offs = 0xdU;
            through_ec_ctx.rng = 0x54c5a000U;
            through_ec_ctx.val = 0x3fa5dfffU;
            through_ec_ctx.ext = 0x54c5a0U;
            through_ec_ctx.rem = 0;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 109, 243, 140, 232, 11, 173, 113, 146, 97, 129, 125, 193, 200 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x205f707U;
            expected_ec_ctx.nend_bits = 26;
            expected_ec_ctx.nbits_total = 135;
            expected_ec_ctx.offs = 0xdU;
            expected_ec_ctx.rng = 0x54c5a000U;
            expected_ec_ctx.val = 0x3fa5dfffU;
            expected_ec_ctx.ext = 0x54c5a0U;
            expected_ec_ctx.rem = 0;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_25()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 126, 244, 49, 221, 251, 143, 143, 179, 150, 46, 47, 25, 129 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x12b9cf00U;
            through_ec_ctx.val = 0x8ba7c34U;
            through_ec_ctx.ext = 0xef10U;
            through_ec_ctx.rem = 150;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x1U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 126, 244, 49, 221, 251, 143, 143, 179, 150, 46, 47, 25, 129 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0x17178cc0U;
            expected_ec_ctx.nend_bits = 31;
            expected_ec_ctx.nbits_total = 74;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x12b9cf00U;
            expected_ec_ctx.val = 0x8ba7c34U;
            expected_ec_ctx.ext = 0xef10U;
            expected_ec_ctx.rem = 150;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_dec_bits_26()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 126, 244, 49, 221, 251, 143, 143, 179, 150, 46, 47, 25, 129 });
            through_ec_ctx.storage = 0xdU;
            through_ec_ctx.end_offs = 0x4U;
            through_ec_ctx.end_window = 0x17178cc0U;
            through_ec_ctx.nend_bits = 31;
            through_ec_ctx.nbits_total = 74;
            through_ec_ctx.offs = 0x9U;
            through_ec_ctx.rng = 0x12b9cf00U;
            through_ec_ctx.val = 0x8ba7c34U;
            through_ec_ctx.ext = 0xef10U;
            through_ec_ctx.rem = 150;
            through_ec_ctx.error = 0;
            uint in__bits = 0x1U;
            uint expected_returnVal = 0x0U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 126, 244, 49, 221, 251, 143, 143, 179, 150, 46, 47, 25, 129 });
            expected_ec_ctx.storage = 0xdU;
            expected_ec_ctx.end_offs = 0x4U;
            expected_ec_ctx.end_window = 0xb8bc660U;
            expected_ec_ctx.nend_bits = 30;
            expected_ec_ctx.nbits_total = 75;
            expected_ec_ctx.offs = 0x9U;
            expected_ec_ctx.rng = 0x12b9cf00U;
            expected_ec_ctx.val = 0x8ba7c34U;
            expected_ec_ctx.ext = 0xef10U;
            expected_ec_ctx.rem = 150;
            expected_ec_ctx.error = 0;
            uint returnVal = EntropyCoder.ec_dec_bits(through_ec_ctx, in__bits);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
            Assert.AreEqual(expected_returnVal, returnVal);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_0()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x80000000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 224, 0, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 0, 0, 0, 0, 204, 204, 204, 204 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x10000000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_1()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x10000000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 232, 158, 10, 0, 230, 0, 0, 0, 92, 202, 190, 216, 182, 223, 154, 226, 156, 230, 120, 236, 122, 244, 204, 252, 52, 3, 134, 11, 136, 19, 100, 25 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 33;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x1800000U;
            expected_ec_ctx.val = 0x0U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = -1;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_2()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 33;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x1800000U;
            through_ec_ctx.val = 0x0U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = -1;
            through_ec_ctx.error = 0;
            int in__s = 6;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 254, 237, 192, 132, 70, 23, 4, 0, 255, 252, 226, 155, 61, 11, 2, 0, 250, 245, 234, 203, 71, 50, 42, 38, 35, 33, 31, 29, 28, 27, 26, 25 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x1c800000U;
            expected_ec_ctx.val = 0x5d800000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 2;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_3()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x1c800000U;
            through_ec_ctx.val = 0x5d800000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 2;
            through_ec_ctx.error = 0;
            int in__s = 1;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 224, 192, 160, 128, 96, 64, 32, 0, 100, 40, 16, 7, 3, 1, 0, 0, 128, 64, 0, 0, 205, 60, 0, 48, 0, 32, 0, 0, 232, 158, 10, 0 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 41;
            expected_ec_ctx.offs = 0x0U;
            expected_ec_ctx.rng = 0x3900000U;
            expected_ec_ctx.val = 0x61100000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 2;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_4()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 41;
            through_ec_ctx.offs = 0x0U;
            through_ec_ctx.rng = 0x3900000U;
            through_ec_ctx.val = 0x61100000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 2;
            through_ec_ctx.error = 0;
            int in__s = 10;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 250, 245, 234, 203, 71, 50, 42, 38, 35, 33, 31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 49;
            expected_ec_ctx.offs = 0x1U;
            expected_ec_ctx.rng = 0x7200000U;
            expected_ec_ctx.val = 0x2a700000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 200;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_5()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 49;
            through_ec_ctx.offs = 0x1U;
            through_ec_ctx.rng = 0x7200000U;
            through_ec_ctx.val = 0x2a700000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 200;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 250, 245, 234, 203, 71, 50, 42, 38, 35, 33, 31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 57;
            expected_ec_ctx.offs = 0x2U;
            expected_ec_ctx.rng = 0x2ac00000U;
            expected_ec_ctx.val = 0x70000000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 84;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_6()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 57;
            through_ec_ctx.offs = 0x2U;
            through_ec_ctx.rng = 0x2ac00000U;
            through_ec_ctx.val = 0x70000000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 84;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 250, 245, 234, 203, 71, 50, 42, 38, 35, 33, 31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 57;
            expected_ec_ctx.offs = 0x2U;
            expected_ec_ctx.rng = 0x1008000U;
            expected_ec_ctx.val = 0x70000000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 84;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_7()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 57;
            through_ec_ctx.offs = 0x2U;
            through_ec_ctx.rng = 0x1008000U;
            through_ec_ctx.val = 0x70000000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 84;
            through_ec_ctx.error = 0;
            int in__s = 1;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 212, 178, 148, 129, 108, 96, 85, 82, 79, 77, 61, 59, 57, 56, 51, 49, 48, 45, 42, 41, 40, 38, 36, 34, 31, 30, 21, 12, 10, 3, 1, 0 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 65;
            expected_ec_ctx.offs = 0x3U;
            expected_ec_ctx.rng = 0x22110000U;
            expected_ec_ctx.val = 0x2c160000U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_8()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 65;
            through_ec_ctx.offs = 0x3U;
            through_ec_ctx.rng = 0x22110000U;
            through_ec_ctx.val = 0x2c160000U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            int in__s = 3;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 65;
            expected_ec_ctx.offs = 0x3U;
            expected_ec_ctx.rng = 0x4864200U;
            expected_ec_ctx.val = 0x2c9e4400U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_9()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 65;
            through_ec_ctx.offs = 0x3U;
            through_ec_ctx.rng = 0x4864200U;
            through_ec_ctx.val = 0x2c9e4400U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            int in__s = 3;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82, 8, 2, 1, 0, 255, 252, 235, 180, 90, 17, 2, 1, 0, 255, 248, 224, 171, 97 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 65;
            expected_ec_ctx.offs = 0x3U;
            expected_ec_ctx.rng = 0xeb4568U;
            expected_ec_ctx.val = 0x2ccb8294U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_10()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 65;
            through_ec_ctx.offs = 0x3U;
            through_ec_ctx.rng = 0xeb4568U;
            through_ec_ctx.val = 0x2ccb8294U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 65;
            expected_ec_ctx.offs = 0x3U;
            expected_ec_ctx.rng = 0xa82e53U;
            expected_ec_ctx.val = 0x2cee6f3aU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 224;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_11()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 65;
            through_ec_ctx.offs = 0x3U;
            through_ec_ctx.rng = 0xa82e53U;
            through_ec_ctx.val = 0x2cee6f3aU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 224;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82, 8, 2, 1, 0, 255, 252, 235, 180, 90 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x61e2c600U;
            expected_ec_ctx.val = 0xdf82d00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_12()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x61e2c600U;
            through_ec_ctx.val = 0xdf82d00U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82, 8, 2, 1, 0, 255, 252, 235, 180, 90 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x38f8fd3eU;
            expected_ec_ctx.val = 0x2052b220U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_13()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x38f8fd3eU;
            through_ec_ctx.val = 0x2052b220U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x28b9fcdbU;
            expected_ec_ctx.val = 0x28c7a7ecU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_14()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x28b9fcdbU;
            through_ec_ctx.val = 0x28c7a7ecU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82, 8, 2, 1, 0, 255, 252, 235, 180, 90 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x17b43facU;
            expected_ec_ctx.val = 0x306a8807U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_15()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x17b43facU;
            through_ec_ctx.val = 0x306a8807U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 5;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x2f687e0U;
            expected_ec_ctx.val = 0x44e12316U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_16()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x2f687e0U;
            through_ec_ctx.val = 0x44e12316U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x21e3a81U;
            expected_ec_ctx.val = 0x4551bc00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_17()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x21e3a81U;
            through_ec_ctx.val = 0x4551bc00U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 255, 254, 252, 218, 35, 3, 2, 1, 0, 255, 254, 250, 208, 59, 4, 2, 1, 0, 255, 254, 246, 194, 71, 10, 2, 1, 0, 255, 252, 236, 183, 82 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x1839b76U;
            expected_ec_ctx.val = 0x45a2391dU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_18()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x1839b76U;
            through_ec_ctx.val = 0x45a2391dU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 4;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 243, 221, 192, 181, 0, 0, 0, 0, 0, 0, 0, 0, 64, 31, 0, 0, 184, 36, 0, 0, 236, 44, 0, 0, 188, 52, 0, 0, 92, 68, 0, 0 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 73;
            expected_ec_ctx.offs = 0x4U;
            expected_ec_ctx.rng = 0x1120c97U;
            expected_ec_ctx.val = 0x4613c7fcU;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 90;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_19()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 73;
            through_ec_ctx.offs = 0x4U;
            through_ec_ctx.rng = 0x1120c97U;
            through_ec_ctx.val = 0x4613c7fcU;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 90;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 192, 128, 64, 0, 205, 154, 102, 51, 0, 0, 0, 0, 213, 171, 128, 85, 43, 0, 0, 0, 224, 192, 160, 128, 96, 64, 32, 0, 100, 40, 16, 7 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 81;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x44839700U;
            expected_ec_ctx.val = 0x13c7fc00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 140;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_20()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 81;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x44839700U;
            through_ec_ctx.val = 0x13c7fc00U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 140;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 241, 190, 178, 132, 87, 74, 41, 14, 0, 223, 193, 157, 140, 106, 57, 39, 18, 0, 0, 0, 31, 57, 107, 160, 205, 205, 255, 255, 255, 255, 255, 255 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 81;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x403b5d9U;
            expected_ec_ctx.val = 0x13c7fc00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 140;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }

        [TestMethod]
        public void Test_ec_enc_icdf_21()
        {
            ec_ctx through_ec_ctx = new ec_ctx();
            through_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_ec_ctx.storage = 0x4fbU;
            through_ec_ctx.end_offs = 0x0U;
            through_ec_ctx.end_window = 0x0U;
            through_ec_ctx.nend_bits = 0;
            through_ec_ctx.nbits_total = 81;
            through_ec_ctx.offs = 0x5U;
            through_ec_ctx.rng = 0x403b5d9U;
            through_ec_ctx.val = 0x13c7fc00U;
            through_ec_ctx.ext = 0x0U;
            through_ec_ctx.rem = 140;
            through_ec_ctx.error = 0;
            int in__s = 0;
            Pointer<byte> in__icdf = Helpers.WrapWithArrayPointer<byte>(
            new byte[] { 125, 51, 26, 18, 15, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 198, 105, 45, 22, 15, 12, 11, 10, 9, 8, 7, 6, 5, 4 });
            uint in__ftb = 0x8U;
            ec_ctx expected_ec_ctx = new ec_ctx();
            expected_ec_ctx.buf = new Pointer<byte>(new byte[] { 2,200,84,224,90,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
                204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            expected_ec_ctx.storage = 0x4fbU;
            expected_ec_ctx.end_offs = 0x0U;
            expected_ec_ctx.end_window = 0x0U;
            expected_ec_ctx.nend_bits = 0;
            expected_ec_ctx.nbits_total = 81;
            expected_ec_ctx.offs = 0x5U;
            expected_ec_ctx.rng = 0x20de678U;
            expected_ec_ctx.val = 0x13c7fc00U;
            expected_ec_ctx.ext = 0x0U;
            expected_ec_ctx.rem = 140;
            expected_ec_ctx.error = 0;
            EntropyCoder.ec_enc_icdf(through_ec_ctx, in__s, in__icdf, in__ftb);
            Helpers.AssertEcCtxEquals(expected_ec_ctx, through_ec_ctx);
        }
    }
}