using Concentus.Celt;
using Concentus.Celt.Structs;
using Concentus.Common;
using Concentus.Common.CPlusPlus;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NailTests
{
    [TestClass]
    public class TestCeltEncodeFrame
    {
        [TestMethod]   
        public void Test_celt_encode_with_ec_0()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 19;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x0U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 1;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 0;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 0;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 0;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { 0, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 0;
            through_st.overlap_max = 0;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = 0;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0});
            through_st.oldBandE = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 255, 254 });
            expected_enc.storage = 0x2U;
            expected_enc.end_offs = 0x0U;
            expected_enc.end_window = 0x0U;
            expected_enc.nend_bits = 0;
            expected_enc.nbits_total = 41;
            expected_enc.offs = 0x2U;
            expected_enc.rng = 0x1000000U;
            expected_enc.val = 0x7f000000U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 2;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_1()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 17;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 12;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x1000000U;
            through_st.spread_decision = 2;
            through_st.delayedIntra = 200;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 1;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 1;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { 0, 0 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 1;
            through_st.overlap_max = 0;
            through_st.stereo_saving = 0;
            through_st.intensity = 0;
            through_st.energy_mask = null;
            through_st.spec_avg = -31;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0});
            through_st.oldBandE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,0,0,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,7616,7639,18432,18391,22587,22571,23639,23754,23392,
23531,22581,22706,21524,21535,20296,20293,19168,19141,18058,17883,16839,16717,15783,15770,14802,14825,
13882,13772,12880,12670,11942,11766,11150,10973,10298,10182,9476,9425,8773,8743,8041,8105,7253,
7418,6660,6772,6191,6223,5633,5721,5120,5214,4772,4675,4219,4144,3629,3667,3075,3144,
2542,2627,2232,2256,2005,1941,1655,1580,1293,1226,918,956,591,673,337,389,2,
82,-191,-340,-371,-588,-649,-653,-915,-779,-1117,-978,-1315,-1182,-1489,-1456,-1624,-1654,
-1763,-1727});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 1,255,254,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 120,21,112,125,161,89,143,186,240,63,170,103,152,199,94,103,216,188,134,114,34,28,63,105,130,49,95,77,86,234,147,21,101,
176,15,250,15,170,79,234,250,176,250,250});
            expected_enc.storage = 0x2cU;
            expected_enc.end_offs = 0x13U;
            expected_enc.end_window = 0x2315f4dU;
            expected_enc.nend_bits = 26;
            expected_enc.nbits_total = 379;
            expected_enc.offs = 0x19U;
            expected_enc.rng = 0x51f1100U;
            expected_enc.val = 0x3ed3cf00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 44;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_2()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 13;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x51f1100U;
            through_st.spread_decision = 0;
            through_st.delayedIntra = 200;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 2;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 2;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { -6138105, -6012767 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 2;
            through_st.overlap_max = 23754;
            through_st.stereo_saving = 64;
            through_st.intensity = 17;
            through_st.energy_mask = null;
            through_st.spec_avg = 26;
            through_st.in_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,31195136,48981416,28343040,18185881,13511499,11049604,
9543730,8193920,7849067,7229780,6101360,6020085,5678505,5325659,4424562,4071102,4092835,3360490,2959922,
2942330,2391640,1712542,2027134,2170714,1518028,1359527,1720192,666710,175409,-39617,-293964,291982,
441493,-201778,-465961,-741613,-775395,-677288,-1165115,-789299,-854625,-1366621,-1488265,-1389545,-1497264,
-1520607,-1467764,-1567089,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,31289344,48733403,28420251,
18712627,13680456,11077659,9153583,8143334,7748920,6606984,6210933,6391595,5817974,4795022,3947381,4081348,
3980609,3501601,3154895,2997013,2758233,2165558,1911418,1911844,1767064,1438168,995608,697228,592178,
110706,-186037,94348,95790,-286154,-479271,-352696,-571825,-749789,-1018480,-1678133,-1224695,-627492,
-917282,-1293702,-1436442,-1848495,-1705538,-1315184});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,31195136,48981416,28343040,18185881,13511499,11049604,9543730,8193920,7849067,7229780,6101360,6020085,
5678505,5325659,4424562,4071102,4092835,3360490,2959922,2942330,2391640,1712542,2027134,2170714,1518028,
1359527,1720192,666710,175409,-39617,-293964,291982,441493,-201778,-465961,-741613,-775395,-677288,
-1165115,-789299,-854625,-1366621,-1488265,-1389545,-1497264,-1520607,-1467764,-1567089,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,31289344,48733403,
28420251,18712627,13680456,11077659,9153583,8143334,7748920,6606984,6210933,6391595,5817974,4795022,3947381,
4081348,3980609,3501601,3154895,2997013,2758233,2165558,1911418,1911844,1767064,1438168,995608,697228,
592178,110706,-186037,94348,95790,-286154,-479271,-352696,-571825,-749789,-1018480,-1678133,-1224695,
-627492,-917282,-1293702,-1436442,-1848495,-1705538,-1315184});
            through_st.oldBandE = new Pointer<int>(new int[] { 2176,2125,1869,-947,1818,3149,3763,3866,3610,2586,1971,3405,3610,2586,4019,3098,3610,
0,0,0,0,2176,2125,1869,-947,1818,2893,3763,3866,3610,2842,1971,3661,3610,
2586,4019,3098,3610,0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { 2176,2125,1869,-947,1818,3149,3763,3866,3610,2586,1971,3405,3610,2586,4019,3098,3610,
-28672,-28672,-28672,-28672,2176,2125,1869,-947,1818,2893,3763,3866,3610,2842,1971,3661,3610,
2586,4019,3098,3610,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { -28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -1919,-1945,-2141,-2221,-2308,-2279,-2460,-2384,-2615,-2549,-2709,-2619,-2822,-2721,-2850,-2775,-2843,
-2775,-2853,-2927,-2847,-3032,-2956,-3030,-3076,-3156,-3113,-3259,-3187,-3261,-3388,-3304,-3534,-3387,
-3607,-3464,-3573,-3454,-3597,-3445,-3693,-3590,-3753,-3698,-3863,-3786,-3888,-3838,-3847,-3838,-3843,
-3826,-3945,-3849,-4003,-3937,-4054,-4048,-4095,-4138,-3955,-4107,-3756,-4012,-3755,-3887,-3873,-3788,
-3984,-3773,-3993,-3865,-3897,-3907,-3908,-3908,-3897,-3947,-3815,-3989,-3772,-4069,-3823,-4032,-3832,
-3990,-3796,-3871,-3806,-3766,-3830,-3844,-3876,-3875,-3850,-3869,-3834,-3874,-3824,-3838,-3701,-3800,
-3725,-3763,-3805,-3757,-3766,-3680,-3723,-3608,-3694,-3669,-3587,-3756,-3509,-3753,-3533,-3677,-3603,
-3561,-3541,-3492,-3490,-3568,-3608,-3631,-3577,-3640,-3614,-3621,-3613,-3659,-3507,-3613,-3485,-3452,
-3411,-3300,-3457,-3277,-3541,-3311,-3521,-3318,-3455,-3392,-3335,-3362,-3282,-3325,-3236,-3375,-3279,
-3287,-3319,-3225,-3148,-3330,-3015,-3366,-3056,-3215,-3114,-3025,-3122,-3036,-3156,-3047,-3152,-3022,
-3051,-3040,-2951,-3027,-2913,-2990,-2893,-2922,-2865,-2902,-2925,-2910,-2975,-2975,-2863,-2934,-2752,
-2822,-2698,-2855,-2649,-2843,-2683,-2742,-2693,-2708,-2664,-2653,-2682,-2661,-2696,-2795,-2682,-2749,
-2663,-2541,-2563,-2417,-2422,-2431,-2333,-2452,-2253,-2398,-2360,-2325,-2437,-2290,-2376,-2363,-2309,
-2433,-2296,-2405,-2294,-2300,-2336,-2245,-2519,-2321,-2594,-2332,-2508,-2270,-2365,-2186,-2184,-2115,
-2145,-2186});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 120,21,112,125,161,89,143,186,240,63,170,103,152,199,94,103,216,188,134,114,34,28,63,105,130,49,95,77,86,234,147,21,101,
176,15,250,15,170,79,234,250,176,250,250,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 120,48,148,45,41,81,156,33,66,30,200,82,99,39,16,87,64,177,85,124,238,104,235,171,5,192,12,204,50,196,28,93,41,
188,231,189,205,237,17,174,17,34,204});
            expected_enc.storage = 0x2bU;
            expected_enc.end_offs = 0x12U;
            expected_enc.end_window = 0x1c0U;
            expected_enc.nend_bits = 9;
            expected_enc.nbits_total = 370;
            expected_enc.offs = 0x19U;
            expected_enc.rng = 0x6ede500U;
            expected_enc.val = 0xaebf00U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 43;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }

        [TestMethod]
        public void Test_celt_encode_with_ec_3()
        {
            CELTEncoder through_st = new CELTEncoder();
            through_st.mode = modes.mode48000_960_120;
            through_st.channels = 2;
            through_st.stream_channels = 2;
            through_st.force_intra = 0;
            through_st.clip = 1;
            through_st.disable_pf = 0;
            through_st.complexity = 0;
            through_st.upsample = 1;
            through_st.start = 0;
            through_st.end = 21;
            through_st.bitrate = 145560;
            through_st.vbr = 1;
            through_st.signalling = 0;
            through_st.constrained_vbr = 0;
            through_st.loss_rate = 0;
            through_st.lsb_depth = 16;
            through_st.variable_duration = 0;
            through_st.lfe = 0;
            through_st.arch = 0;
            through_st.rng = 0x6ede500U;
            through_st.spread_decision = 0;
            through_st.delayedIntra = 156;
            through_st.tonal_average = 256;
            through_st.lastCodedBands = 3;
            through_st.hf_average = 0;
            through_st.tapset_decision = 0;
            through_st.prefilter_period = 15;
            through_st.prefilter_gain = 0;
            through_st.prefilter_tapset = 0;
            through_st.consec_transient = 3;
            through_st.analysis = new AnalysisInfo();
            through_st.analysis.valid = 0;
            through_st.analysis.tonality = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.tonality_slope = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.noisiness = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.activity = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.music_prob = BitConverter.ToSingle(BitConverter.GetBytes((uint)0x0U), 0);
            through_st.analysis.bandwidth = 0;
            through_st.preemph_memE = new Pointer<int>(new int[] { -7468086, -7610833 });
            through_st.preemph_memD = new Pointer<int>(new int[] { 0, 0 });
            through_st.vbr_reservoir = 0;
            through_st.vbr_drift = 0;
            through_st.vbr_offset = 0;
            through_st.vbr_count = 3;
            through_st.overlap_max = 4138;
            through_st.stereo_saving = 128;
            through_st.intensity = 13;
            through_st.energy_mask = null;
            through_st.spec_avg = 87;
            through_st.in_mem = new Pointer<int>(new int[] { -1722119,-2088297,-1999408,-2040569,-2146242,-1991614,-2127189,-1848454,-1722296,-1787628,-1728235,-2195589,-2307612,
-2041369,-2215653,-2781309,-2679518,-2470209,-2076786,-2293465,-2603122,-2514646,-2756309,-2475730,-2220754,-2347116,
-2778835,-2661277,-2668239,-2658612,-1942425,-1614749,-2303496,-2790306,-2834130,-2484534,-2059983,-2439275,-2355921,
-2058347,-2167712,-2526318,-2385619,-2206829,-2373127,-2436615,-2541472,-2274821,-2299807,-2314553,-1845562,-2372105,
-2616226,-2177952,-2137608,-2168534,-1831229,-1884275,-2254145,-2457306,-1959641,-1966605,-2627496,-2089689,-2349171,
-2216255,-1785560,-2064501,-1837992,-2284049,-2467958,-2093581,-1892878,-1631145,-1831852,-1827962,-2164245,-2178375,
-1338694,-1389284,-2020276,-2115098,-1945931,-2057342,-1922583,-1522814,-1464858,-1657372,-1707754,-1662698,-2005944,
-2001846,-1369013,-1304299,-1469576,-1456879,-1766743,-1689328,-1535727,-1710423,-1705097,-1599011,-1569929,-1226480,
-997107,-1123472,-1105656,-1822458,-1765317,-1247375,-1185323,-1365343,-1402413,-1581408,-2184748,-1854810,-1241432,
-955124,-711620,-1182051,-1953953,-2325455,-1602094,-1830240,-2140510,-1852761,-2026840,-1892898,-1704890,-2327482,
-2228355,-1854593,-2377652,-2360855,-2010440,-2179604,-2369863,-2396280,-2087235,-2085187,-2710441,-2647974,-2632406,
-2539015,-2357971,-2308819,-2444806,-2725177,-2873450,-2855630,-2415307,-2134118,-1952872,-1982571,-2265812,-2694868,
-2546591,-2404459,-2560721,-2596970,-2778421,-2348339,-2305128,-1963932,-1948165,-2633224,-2488633,-2356127,-2397496,
-2232632,-2202323,-2183073,-2287317,-1992814,-1965988,-2466521,-2610493,-2295304,-1994453,-1783920,-1905165,-2456693,
-2450138,-2267659,-2158501,-2380299,-2059582,-1560280,-1498230,-1933229,-2152570,-2062867,-2341600,-1961080,-1913976,
-2247596,-1713067,-1765498,-2411439,-2193324,-1449490,-1196975,-1903540,-1910298,-1769600,-1930369,-1814452,-1708161,
-1558453,-1713283,-1815684,-2054071,-1659829,-1343824,-1868934,-1704888,-1332972,-1545352,-1438447,-1662704,-2183715,
-1528762,-836948,-1053222,-1542288,-1579561,-1285263,-1174263,-1285061,-1705926,-1738488,-1380086,-1047491,-1187782,
-1690567,-1471020,-1178770,-1050567,-1052207,-1590219});
            through_st.prefilter_mem = new Pointer<int>(new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,31195136,48981416,
28343040,18185881,13511499,11049604,9543730,8193920,7849067,7229780,6101360,6020085,5678505,5325659,4424562,
4071102,4092835,3360490,2959922,2942330,2391640,1712542,2027134,2170714,1518028,1359527,1720192,666710,
175409,-39617,-293964,291982,441493,-201778,-465961,-741613,-775395,-677288,-1165115,-789299,-854625,
-1366621,-1488265,-1389545,-1497264,-1520607,-1467764,-1567089,-1722119,-2088297,-1999408,-2040569,-2146242,-1991614,
-2127189,-1848454,-1722296,-1787628,-1728235,-2195589,-2307612,-2041369,-2215653,-2781309,-2679518,-2470209,-2076786,
-2293465,-2603122,-2514646,-2756309,-2475730,-2220754,-2347116,-2778835,-2661277,-2668239,-2658612,-1942425,-1614749,
-2303496,-2790306,-2834130,-2484534,-2059983,-2439275,-2355921,-2058347,-2167712,-2526318,-2385619,-2206829,-2373127,
-2436615,-2541472,-2274821,-2299807,-2314553,-1845562,-2372105,-2616226,-2177952,-2137608,-2168534,-1831229,-1884275,
-2254145,-2457306,-1959641,-1966605,-2627496,-2089689,-2349171,-2216255,-1785560,-2064501,-1837992,-2284049,-2467958,
-2093581,-1892878,-1631145,-1831852,-1827962,-2164245,-2178375,-1338694,-1389284,-2020276,-2115098,-1945931,-2057342,
-1922583,-1522814,-1464858,-1657372,-1707754,-1662698,-2005944,-2001846,-1369013,-1304299,-1469576,-1456879,-1766743,
-1689328,-1535727,-1710423,-1705097,-1599011,-1569929,-1226480,-997107,-1123472,-1105656,-1822458,-1765317,-1247375,
-1185323,-1365343,-1402413,-1581408,-2184748,-1854810,-1241432,-955124,-711620,-1182051,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,31289344,48733403,28420251,18712627,13680456,
11077659,9153583,8143334,7748920,6606984,6210933,6391595,5817974,4795022,3947381,4081348,3980609,3501601,
3154895,2997013,2758233,2165558,1911418,1911844,1767064,1438168,995608,697228,592178,110706,-186037,
94348,95790,-286154,-479271,-352696,-571825,-749789,-1018480,-1678133,-1224695,-627492,-917282,-1293702,
-1436442,-1848495,-1705538,-1315184,-1953953,-2325455,-1602094,-1830240,-2140510,-1852761,-2026840,-1892898,-1704890,
-2327482,-2228355,-1854593,-2377652,-2360855,-2010440,-2179604,-2369863,-2396280,-2087235,-2085187,-2710441,-2647974,
-2632406,-2539015,-2357971,-2308819,-2444806,-2725177,-2873450,-2855630,-2415307,-2134118,-1952872,-1982571,-2265812,
-2694868,-2546591,-2404459,-2560721,-2596970,-2778421,-2348339,-2305128,-1963932,-1948165,-2633224,-2488633,-2356127,
-2397496,-2232632,-2202323,-2183073,-2287317,-1992814,-1965988,-2466521,-2610493,-2295304,-1994453,-1783920,-1905165,
-2456693,-2450138,-2267659,-2158501,-2380299,-2059582,-1560280,-1498230,-1933229,-2152570,-2062867,-2341600,-1961080,
-1913976,-2247596,-1713067,-1765498,-2411439,-2193324,-1449490,-1196975,-1903540,-1910298,-1769600,-1930369,-1814452,
-1708161,-1558453,-1713283,-1815684,-2054071,-1659829,-1343824,-1868934,-1704888,-1332972,-1545352,-1438447,-1662704,
-2183715,-1528762,-836948,-1053222,-1542288,-1579561,-1285263,-1174263,-1285061,-1705926,-1738488,-1380086,-1047491,
-1187782,-1690567,-1471020,-1178770,-1050567,-1052207,-1590219});
            through_st.oldBandE = new Pointer<int>(new int[] { 2336,3437,4090,4304,4128,3696,2858,-2093,3491,4451,4592,3888,3552,0,0,0,0,
0,0,0,0,2336,3437,4090,4272,4128,3696,2922,-1389,3466,4451,4624,3920,3616,
0,0,0,0,0,0,0,0});
            through_st.oldLogE = new Pointer<int>(new int[] { 2336,3437,4090,4304,4128,3696,2858,-2093,3491,4451,4592,3888,3552,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,2336,3437,4090,4272,4128,3696,2922,-1389,3466,4451,4624,3920,3616,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            through_st.oldLogE2 = new Pointer<int>(new int[] { 2176,2125,1869,-947,1818,3149,3763,3866,3610,2586,1971,3405,3610,-28672,-28672,-28672,-28672,
-28672,-28672,-28672,-28672,2176,2125,1869,-947,1818,2893,3763,3866,3610,2842,1971,3661,3610,
-28672,-28672,-28672,-28672,-28672,-28672,-28672,-28672});
            Pointer<short> in_pcm_short = Helpers.WrapWithArrayPointer<short>(
            new short[] { -2183,-2315,-2195,-2213,-2232,-2139,-2139,-2181,-2070,-2126,-2140,-2038,-2189,-1873,-2186,-1751,-2075,
-1808,-2058,-1876,-2043,-1846,-1987,-1837,-2029,-1804,-2003,-1817,-1956,-1903,-1876,-1807,-1734,-1735,
-1700,-1795,-1838,-1872,-1806,-1790,-1739,-1724,-1713,-1835,-1767,-1790,-1888,-1592,-1877,-1598,-1722,
-1734,-1583,-1654,-1586,-1505,-1505,-1419,-1334,-1412,-1324,-1538,-1353,-1647,-1422,-1651,-1579,-1502,
-1457,-1371,-1218,-1447,-1313,-1483,-1388,-1476,-1373,-1498,-1396,-1438,-1247,-1437,-1157,-1542,-1227,
-1472,-1259,-1354,-1282,-1269,-1259,-1146,-1156,-1174,-1172,-1227,-1269,-1116,-1275,-1063,-1177,-1122,
-1141,-1202,-1114,-1167,-1086,-1030,-1171,-1095,-1258,-1090,-1139,-1001,-981,-998,-952,-1040,-869,
-975,-832,-832,-891,-838,-882,-875,-897,-888,-1000,-892,-946,-813,-847,-691,-777,-708,
-733,-769,-747,-719,-844,-582,-967,-611,-898,-743,-820,-754,-852,-656,-806,-548,-736,
-620,-772,-674,-772,-670,-622,-631,-531,-596,-629,-662,-699,-662,-682,-580,-675,-489,
-631,-603,-623,-642,-558,-515,-498,-504,-486,-466,-506,-429,-504,-419,-418,-458,-417,
-496,-382,-489,-431,-589,-371,-610,-181,-626,-111,-673,-134,-592,-247,-488,-345,-486,
-332,-567,-227,-550,-180,-505,-245,-420,-222,-331,-190,-323,-162,-286,-113,-299,-262,
-376,-413,-316,-384,-203,-410,-220,-362,-249,-210,-156,-220,-70,-344,-174,-456,-296,
-356,-223});
            int[] in_pcm = new int[in_pcm_short.Length];
            for (int c = 0; c < in_pcm_short.Length; c++)
                in_pcm[c] = (int)in_pcm_short[c];
            int in_frame_size = 120;
            int in_nbCompressedBytes = 1275;
            ec_ctx through_enc = new ec_ctx();
            through_enc.buf = new Pointer<byte>(new byte[] { 120,48,148,45,41,81,156,33,66,30,200,82,99,39,16,87,64,177,85,124,238,104,235,171,5,192,12,204,50,196,28,93,41,
188,231,189,205,237,17,174,17,34,204,250,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204});
            through_enc.storage = 0x4fbU;
            through_enc.end_offs = 0x0U;
            through_enc.end_window = 0x0U;
            through_enc.nend_bits = 0;
            through_enc.nbits_total = 33;
            through_enc.offs = 0x0U;
            through_enc.rng = 0x80000000U;
            through_enc.val = 0x0U;
            through_enc.ext = 0x0U;
            through_enc.rem = -1;
            through_enc.error = 0;
            Pointer<byte> out_compressed = Pointer.Malloc<byte>(1250);
            ec_ctx expected_enc = new ec_ctx();
            expected_enc.buf = new Pointer<byte>(new byte[] { 120,30,121,26,143,167,249,41,114,10,232,29,134,60,107,32,183,29,244,248,185,101,44,90,78,125,20,88,96,130,106,106,191,
199,189,169,101,232,206,93,12,88,63,0,165});
            expected_enc.storage = 0x2dU;
            expected_enc.end_offs = 0xbU;
            expected_enc.end_window = 0x7bda965U;
            expected_enc.nend_bits = 29;
            expected_enc.nbits_total = 390;
            expected_enc.offs = 0x22U;
            expected_enc.rng = 0x43a56b00U;
            expected_enc.val = 0x43fb0700U;
            expected_enc.ext = 0x0U;
            expected_enc.rem = 0;
            expected_enc.error = 0;
            int expected_returnVal = 45;
            int returnVal = celt_encoder.celt_encode_with_ec(through_st, new Pointer<int>(in_pcm), in_frame_size, out_compressed, in_nbCompressedBytes, through_enc);
            Assert.AreEqual(expected_returnVal, returnVal);
            Helpers.AssertEcCtxEquals(expected_enc, through_enc);
        }
    }
}
