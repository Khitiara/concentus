using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Concentus.Silk;
using Concentus.Common.CPlusPlus;
using Concentus.Silk.Structs;

namespace NailTests
{
    [TestClass]
    public class TestStereo
    {
        [TestMethod]
        public void Test_silk_stereo_quant_pred()
        {
            Pointer<int> pred_q3 = new Pointer<int>(new int[] { 2, 6 });
            Pointer<Pointer<sbyte>> ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);

            Stereo.silk_stereo_quant_pred(pred_q3, ix);

            Assert.AreEqual(0, pred_q3[0]);
            Assert.AreEqual(0, pred_q3[1]);

            Assert.AreEqual(1, ix[0][0]);
            Assert.AreEqual(2, ix[0][1]);
            Assert.AreEqual(2, ix[0][2]);
            Assert.AreEqual(1, ix[1][0]);
            Assert.AreEqual(2, ix[1][1]);
            Assert.AreEqual(2, ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_0()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -8230, -2052 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,19658,18314,17288,13355,10773,9452,6902,5644,4833,-1295,-23542,-21193,-17080,-15211,-12051,
                -8958,-6573,-5335,-4846,1127,22204,20360,16544,14795,11962,9099,7830,5944,5565,-1795,-22655,-20583,
                -16922,-14411,-11079,-8573,-7914,-1186,20032,18361,16014,13366,10769,8721,6811,5364,4918,-1590,-22979,
                -20440,-16804,-14521,-11606,-8884,-7561,-5347,-5338,1485,22210,20148,16961,15106,11320,9342,7844,5509,
                5293,-1775,-22130,-19809,-16274,-13212,-11539,-8959,-7750,-597,20472,17929,14276,12499,10262,8722,7215,
                5641,4940,-1935,-22729,-19431,-16472,-13672,-12860,11710,29610,18677,19373,12796,12646,8188,8400,5673,
                5068,2615,2132,72,12,-1433,-1789,-2447,-2002,-2379,-2521,-2667,-2235,-2765,-2887,-2589,-2737,
                -2857,-2561,-3152,-3742,-3349,-3307,-3861,-3721,-3743,-3752,-2824,-2458,-2360,-2666,-2492,-2712,-2628,
                -2416,-2315,-1656,-1669,-1578,-2185,-1831,-1646,-2202,-2403,-2359,-2050,-2262,-1782,-1935,-2015,-1758,
                -990,-1118,-934,-770,-530,-657,-968,-964,-409,-13108,-13108,1,-1,-1,-1,1,1,
                -1,1,1,-1,1,-1,-1,-1,1,1,-1,1,1,1,1,1,0,
                1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,
                0,-1,1,-1,1,1,1,0,0,1,-1,-1,-1,1,1,-1,1,
                -1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,0,-1,-1,-1,-1,
                -1,-1,-1,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,
                -1,-1,-1,0,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,0,
                0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,1,-1,-1,-1,1,1,-1,1,1,-1,1,-1,-1,-1,1,
                1,-1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,
                1,1,1,1,1,1,1,0,0,-1,1,-1,1,1,1,0,0,
                1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,
                -1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,-1,0,
                -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,
                0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0, 0 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -8230,-2052,19659,18313,17287,13354,10774,9453,6901,5645,4834,-1296,-23541,-21194,-17081,-15212,-12050,
                -8957,-6574,-5334,-4845,1128,22205,20361,16544,14796,11963,9100,7831,5945,5565,-1794,-22655,-20583,
                -16921,-14410,-11078,-8572,-7913,-1185,20033,18361,16014,13365,10770,8720,6812,5365,4919,-1590,-22979,
                -20439,-16805,-14522,-11607,-8883,-7560,-5348,-5337,1484,22209,20149,16960,15107,11321,9341,7845,5508,
                5292,-1776,-22131,-19809,-16275,-13213,-11540,-8960,-7751,-598,20471,17929,14276,12498,10262,8721,7215,
                5640,4939,-1936,-22730,-19432,-16473,-13673,-12861,11709,29609,18676,19373,12795,12645,8187,8399,5672,
                5068,2615,2131,72,12,-1433,-1789,-2447,-2002,-2380,-2521,-2667,-2235,-2765,-2887,-2589,-2737,
                -2857,-2561,-3152,-3742,-3349,-3307,-3861,-3721,-3743,-3752,-2824,-2458,-2360,-2666,-2492,-2712,-2628,
                -2416,-2315,-1656,-1669,-1578,-2185,-1831,-1646,-2202,-2403,-2359,-2050,-2262,-1782,-1935,-2015,-1758,
                -990,-1118,-934,-770,-530,-657,-968,-964,-409,0,-2052,19657,18315,17289,13356,10772,9451,
                6903,5643,4832,-1294,-23543,-21192,-17079,-15210,-12052,-8959,-6572,-5336,-4847,1126,22203,20359,16544,
                14794,11961,9098,7829,5943,5565,-1796,-22655,-20583,-16923,-14412,-11080,-8574,-7915,-1187,20031,18361,
                16014,13367,10768,8722,6810,5363,4917,-1590,-22979,-20441,-16803,-14520,-11605,-8885,-7562,-5346,-5339,
                1486,22211,20147,16962,15105,11319,9343,7843,5510,5294,-1774,-22129,-19809,-16273,-13211,-11538,-8958,
                -7749,-596,20473,17929,14276,12500,10262,8723,7215,5642,4941,-1934,-22728,-19430,-16471,-13671,-12859,
                11711,29611,18678,19373,12797,12647,8189,8401,5674,5068,2615,2133,72,12,-1433,-1789,-2447,
                -2002,-2378,-2521,-2667,-2235,-2765,-2887,-2589,-2737,-2857,-2561,-3152,-3742,-3349,-3307,-3861,-3721,
                -3743,-3752,-2824,-2458,-2360,-2666,-2492,-2712,-2628,-2416,-2315,-1656,-1669,-1578,-2185,-1831,-1646,
                -2202,-2403,-2359,-2050,-2262,-1782,-1935,-2015,-1758,-990,-1118,-934,-770,-530};
            short[] expected_x2 =
            new short[] { 0,-2052,19657,18315,17289,13356,10772,9451,6903,5643,4832,-1294,-23543,-21192,-17079,-15210,-12052,
                -8959,-6572,-5336,-4847,1126,22203,20359,16544,14794,11961,9098,7829,5943,5565,-1796,-22655,-20583,
                -16923,-14412,-11080,-8574,-7915,-1187,20031,18361,16014,13367,10768,8722,6810,5363,4917,-1590,-22979,
                -20441,-16803,-14520,-11605,-8885,-7562,-5346,-5339,1486,22211,20147,16962,15105,11319,9343,7843,5510,
                5294,-1774,-22129,-19809,-16273,-13211,-11538,-8958,-7749,-596,20473,17929,14276,12500,10262,8723,7215,
                5642,4941,-1934,-22728,-19430,-16471,-13671,-12859,11711,29611,18678,19373,12797,12647,8189,8401,5674,
                5068,2615,2133,72,12,-1433,-1789,-2447,-2002,-2378,-2521,-2667,-2235,-2765,-2887,-2589,-2737,
                -2857,-2561,-3152,-3742,-3349,-3307,-3861,-3721,-3743,-3752,-2824,-2458,-2360,-2666,-2492,-2712,-2628,
                -2416,-2315,-1656,-1669,-1578,-2185,-1831,-1646,-2202,-2403,-2359,-2050,-2262,-1782,-1935,-2015,-1758,
                -990,-1118,-934,-770,-530,-657,-968,-964,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -964, -409 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_1()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 7059, 6108 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,3581,760,522,63,883,302,-1347,473,480,1596,1319,-293,-1852,-9584,-6333,
                393,1322,760,820,653,617,1301,1537,784,161,-405,-3301,-6660,-2541,7358,6319,3258,
                1303,2073,1099,-1073,-1138,1260,1116,1637,1536,812,-466,-8099,-14205,-6458,2145,2513,1195,
                1171,1635,2033,2181,1469,497,-105,-478,-2185,-4130,-486,6446,5560,3239,647,466,126,
                885,303,-1197,479,1138,2028,1277,-337,-1788,-9512,-6451,241,1269,734,368,575,698,
                1083,1258,985,144,-235,-377,-2303,-5171,-2362,5769,5286,3407,1696,1989,909,-1108,-1154,
                1028,1019,1464,1840,1061,-449,-7167,-12361,-5574,1824,2074,872,896,1419,1846,1973,1331,
                454,-120,-471,-1913,-3549,-401,6103,5739,2781,105,205,570,1165,809,-742,769,1192,
                1636,931,-474,-1732,-8425,-5768,51,1069,-370,-545,355,712,1072,1229,965,196,-40,
                -142,-1872,-4427,-2010,5032,5152,3452,1612,1713,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0, 0 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { 7059,6108,3581,760,522,63,883,302,-1347,473,480,1596,1319,-293,-1852,-9584,-6333,
                393,1322,760,820,653,617,1301,1537,784,161,-405,-3301,-6660,-2541,7358,6319,3258,
                1303,2073,1099,-1073,-1138,1260,1116,1637,1536,812,-466,-8099,-14205,-6458,2145,2513,1195,
                1171,1635,2033,2181,1469,497,-105,-478,-2185,-4130,-486,6446,5560,3239,647,466,126,
                885,303,-1197,479,1138,2028,1277,-337,-1788,-9512,-6451,241,1269,734,368,575,698,
                1083,1258,985,144,-235,-377,-2303,-5171,-2362,5769,5286,3407,1696,1989,909,-1108,-1154,
                1028,1019,1464,1840,1061,-449,-7167,-12361,-5574,1824,2074,872,896,1419,1846,1973,1331,
                454,-120,-471,-1913,-3549,-401,6103,5739,2781,105,205,570,1165,809,-742,769,1192,
                1636,931,-474,-1732,-8425,-5768,51,1069,-370,-545,355,712,1072,1229,965,196,-40,
                -142,-1872,-4427,-2010,5032,5152,3452,1612,1713,0,6108,3581,760,522,63,883,302,
                -1347,473,480,1596,1319,-293,-1852,-9584,-6333,393,1322,760,820,653,617,1301,1537,
                784,161,-405,-3301,-6660,-2541,7358,6319,3258,1303,2073,1099,-1073,-1138,1260,1116,1637,
                1536,812,-466,-8099,-14205,-6458,2145,2513,1195,1171,1635,2033,2181,1469,497,-105,-478,
                -2185,-4130,-486,6446,5560,3239,647,466,126,885,303,-1197,479,1138,2028,1277,-337,
                -1788,-9512,-6451,241,1269,734,368,575,698,1083,1258,985,144,-235,-377,-2303,-5171,
                -2362,5769,5286,3407,1696,1989,909,-1108,-1154,1028,1019,1464,1840,1061,-449,-7167,-12361,
                -5574,1824,2074,872,896,1419,1846,1973,1331,454,-120,-471,-1913,-3549,-401,6103,5739,
                2781,105,205,570,1165,809,-742,769,1192,1636,931,-474,-1732,-8425,-5768,51,1069,
                -370,-545,355,712,1072,1229,965,196,-40,-142,-1872,-4427,-2010,5032};
            short[] expected_x2 =
            new short[] { 0,6108,3581,760,522,63,883,302,-1347,473,480,1596,1319,-293,-1852,-9584,-6333,
                393,1322,760,820,653,617,1301,1537,784,161,-405,-3301,-6660,-2541,7358,6319,3258,
                1303,2073,1099,-1073,-1138,1260,1116,1637,1536,812,-466,-8099,-14205,-6458,2145,2513,1195,
                1171,1635,2033,2181,1469,497,-105,-478,-2185,-4130,-486,6446,5560,3239,647,466,126,
                885,303,-1197,479,1138,2028,1277,-337,-1788,-9512,-6451,241,1269,734,368,575,698,
                1083,1258,985,144,-235,-377,-2303,-5171,-2362,5769,5286,3407,1696,1989,909,-1108,-1154,
                1028,1019,1464,1840,1061,-449,-7167,-12361,-5574,1824,2074,872,896,1419,1846,1973,1331,
                454,-120,-471,-1913,-3549,-401,6103,5739,2781,105,205,570,1165,809,-742,769,1192,
                1636,931,-474,-1732,-8425,-5768,51,1069,-370,-545,355,712,1072,1229,965,196,-40,
                -142,-1872,-4427,-2010,5032,5152,3452,1612,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 1612, 1713 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_2()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -964, -409 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-572,-655,-722,-661,-669,-721,-748,-564,-685,-768,-813,-662,-572,-503,-660,
                -526,-667,-524,-398,-310,-436,-279,-390,-228,-93,-234,-267,-309,-92,-191,-9,-127,
                30,-96,-189,15,-122,68,-57,113,212,274,120,257,143,304,460,322,517,
                382,551,431,595,490,425,402,582,719,547,471,616,708,779,858,700,847,
                713,644,847,958,829,748,916,763,908,996,838,758,674,620,611,581,662,
                697,688,671,651,632,637,540,736,629,690,490,457,550,579,498,429,379,
                432,463,346,276,333,232,291,193,240,263,140,70,244,110,270,267,139,
                202,97,52,17,232,125,189,94,14,90,-14,-47,-85,7,50,72,-44,
                -6,18,34,79,-9,75,126,168,-34,78,21,105,54,6,-14,-66,-96,
                -142,-54,98,-37,-120,-186,-2,-121,-179,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { -328, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -964,-409,-572,-655,-722,-661,-669,-721,-748,-564,-685,-768,-813,-662,-572,-503,-660,
                -526,-667,-524,-398,-310,-437,-278,-391,-228,-92,-234,-267,-310,-91,-192,-8,-128,
                31,-96,-190,16,-123,69,-58,113,212,275,119,258,142,304,461,321,519,
                381,552,430,596,490,425,401,582,721,546,470,616,708,779,859,698,849,
                713,642,848,960,829,746,918,761,908,998,837,758,674,620,611,580,662,
                697,688,671,651,632,638,538,739,628,692,489,456,551,580,498,429,378,
                432,464,346,275,335,230,293,192,240,264,139,67,247,107,272,268,137,
                204,96,52,14,236,123,191,94,12,92,-15,-47,-86,7,50,73,-46,
                -6,18,34,80,-11,75,126,170,-37,80,20,106,54,6,-14,-66,-96,
                -143,-55,101,-38,-120,-189,1,-122,-179,0,-409,-572,-655,-722,-661,-669,-721,
                -748,-564,-685,-768,-813,-662,-572,-503,-660,-526,-667,-524,-398,-310,-435,-280,-389,
                -228,-94,-234,-267,-308,-93,-190,-10,-126,29,-96,-188,14,-121,67,-56,113,
                212,273,121,256,144,304,459,323,515,383,550,432,594,490,425,403,582,
                717,548,472,616,708,779,857,702,845,713,646,846,956,829,750,914,765,
                908,994,839,758,674,620,611,582,662,697,688,671,651,632,636,542,733,
                630,688,491,458,549,578,498,429,380,432,462,346,277,331,234,289,194,
                240,262,141,73,241,113,268,266,141,200,98,52,20,228,127,187,94,
                16,88,-13,-47,-84,7,50,71,-42,-6,18,34,78,-7,75,126,166,
                -31,76,22,104,54,6,-14,-66,-96,-141,-53,95,-36,-120};
            short[] expected_x2 =
            new short[] { 0,-409,-572,-655,-722,-661,-669,-721,-748,-564,-685,-768,-813,-662,-572,-503,-660,
                -526,-667,-524,-398,-310,-435,-280,-389,-228,-94,-234,-267,-308,-93,-190,-10,-126,
                29,-96,-188,14,-121,67,-56,113,212,273,121,256,144,304,459,323,515,
                383,550,432,594,490,425,403,582,717,548,472,616,708,779,857,702,845,
                713,646,846,956,829,750,914,765,908,994,839,758,674,620,611,582,662,
                697,688,671,651,632,636,542,733,630,688,491,458,549,578,498,429,380,
                432,462,346,277,331,234,289,194,240,262,141,73,241,113,268,266,141,
                200,98,52,20,228,127,187,94,16,88,-13,-47,-84,7,50,71,-42,
                -6,18,34,78,-7,75,126,166,-31,76,22,104,54,6,-14,-66,-96,
                -141,-53,95,-36,-120,-183,-5,-120,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { -328, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { -121, -179 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_3()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 1612, 1713 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,2777,1392,-914,-1604,311,468,1183,1637,981,-539,-6304,-10677,-4746,1716,1926,
                770,674,1122,1562,1772,1258,442,-104,2,-1218,-2443,-20,5401,4943,2174,-116,-2,
                337,849,595,-1531,-145,835,1454,913,-313,-1380,-6903,-4684,116,989,-193,-375,-513,
                -75,850,1186,1002,299,-9,-148,-1528,-3584,-1580,4158,4199,2805,1325,1432,2343,1182,
                -789,-1360,248,406,1399,1672,812,-546,-5268,-8817,-3935,1398,1573,1035,893,1273,1501,
                1410,901,229,-216,-130,-1035,-1929,3,4265,4210,1951,-120,-123,149,609,440,-1210,
                -118,661,1157,738,127,-767,-5393,-3779,-40,696,-155,-258,-389,-87,617,923,1124,
                532,29,-187,-1297,-2875,-1257,3249,3254,2474,1280,1471,2082,933,-673,-1150,96,234,
                1045,246,-235,-511,-3950,-6689,-2937,1140,1544,1119,785,1352,1435,1129,636,435,106,
                -25,-820,-1609,-117,3226,3224,1452,-147,-135,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0, 0 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { 1612,1713,2777,1392,-914,-1604,311,468,1183,1637,981,-539,-6304,-10677,-4746,1716,1926,
                770,674,1122,1562,1772,1258,442,-104,2,-1218,-2443,-20,5401,4943,2174,-116,-2,
                337,849,595,-1531,-145,835,1454,913,-313,-1380,-6903,-4684,116,989,-193,-375,-513,
                -75,850,1186,1002,299,-9,-148,-1528,-3584,-1580,4158,4199,2805,1325,1432,2343,1182,
                -789,-1360,248,406,1399,1672,812,-546,-5268,-8817,-3935,1398,1573,1035,893,1273,1501,
                1410,901,229,-216,-130,-1035,-1929,3,4265,4210,1951,-120,-123,149,609,440,-1210,
                -118,661,1157,738,127,-767,-5393,-3779,-40,696,-155,-258,-389,-87,617,923,1124,
                532,29,-187,-1297,-2875,-1257,3249,3254,2474,1280,1471,2082,933,-673,-1150,96,234,
                1045,246,-235,-511,-3950,-6689,-2937,1140,1544,1119,785,1352,1435,1129,636,435,106,
                -25,-820,-1609,-117,3226,3224,1452,-147,-135,0,1713,2777,1392,-914,-1604,311,468,
                1183,1637,981,-539,-6304,-10677,-4746,1716,1926,770,674,1122,1562,1772,1258,442,-104,
                2,-1218,-2443,-20,5401,4943,2174,-116,-2,337,849,595,-1531,-145,835,1454,913,
                -313,-1380,-6903,-4684,116,989,-193,-375,-513,-75,850,1186,1002,299,-9,-148,-1528,
                -3584,-1580,4158,4199,2805,1325,1432,2343,1182,-789,-1360,248,406,1399,1672,812,-546,
                -5268,-8817,-3935,1398,1573,1035,893,1273,1501,1410,901,229,-216,-130,-1035,-1929,3,
                4265,4210,1951,-120,-123,149,609,440,-1210,-118,661,1157,738,127,-767,-5393,-3779,
                -40,696,-155,-258,-389,-87,617,923,1124,532,29,-187,-1297,-2875,-1257,3249,3254,
                2474,1280,1471,2082,933,-673,-1150,96,234,1045,246,-235,-511,-3950,-6689,-2937,1140,
                1544,1119,785,1352,1435,1129,636,435,106,-25,-820,-1609,-117,3226};
            short[] expected_x2 =
            new short[] { 0,1713,2777,1392,-914,-1604,311,468,1183,1637,981,-539,-6304,-10677,-4746,1716,1926,
                770,674,1122,1562,1772,1258,442,-104,2,-1218,-2443,-20,5401,4943,2174,-116,-2,
                337,849,595,-1531,-145,835,1454,913,-313,-1380,-6903,-4684,116,989,-193,-375,-513,
                -75,850,1186,1002,299,-9,-148,-1528,-3584,-1580,4158,4199,2805,1325,1432,2343,1182,
                -789,-1360,248,406,1399,1672,812,-546,-5268,-8817,-3935,1398,1573,1035,893,1273,1501,
                1410,901,229,-216,-130,-1035,-1929,3,4265,4210,1951,-120,-123,149,609,440,-1210,
                -118,661,1157,738,127,-767,-5393,-3779,-40,696,-155,-258,-389,-87,617,923,1124,
                532,29,-187,-1297,-2875,-1257,3249,3254,2474,1280,1471,2082,933,-673,-1150,96,234,
                1045,246,-235,-511,-3950,-6689,-2937,1140,1544,1119,785,1352,1435,1129,636,435,106,
                -25,-820,-1609,-117,3226,3224,1452,-147,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -147, -135 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_4()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { -328, 328 });
            through_state.sMid = new Pointer<short>(new short[] { -121, -179 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-34,-29,-29,-95,-26,-89,-27,-91,-31,-28,-87,-92,-25,-19,50,
                -65,-1,-1,-61,-68,-70,-133,-18,-11,-69,57,-55,6,-62,-61,-7,-1,
                -62,-2,-59,-61,-67,2,4,-58,70,-51,13,-53,13,78,27,31,-32,
                98,-23,41,-84,37,-29,37,39,-17,-85,-33,-38,21,-104,17,-48,-51,
                9,14,-46,-54,9,10,12,83,-34,-38,-107,-55,-60,-60,-80,129,40,
                13,-22,-89,-4,-41,-41,-12,32,-140,99,10,-89,-70,-1,-7,25,-65,
                -2,0,-31,-72,-5,-36,-7,-38,65,-29,7,-28,-99,-42,24,-1,-35,
                36,-26,5,-28,-28,2,6,-64,-1,-65,-70,137,85,25,-119,15,77,
                -17,17,-13,-12,16,-49,-17,-18,-17,-58,4,77,17,-14,52,-13,51,
                -48,-51,-60,-29,-31,37,15,-51,-24,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 705, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -121,-181,-33,-29,-29,-97,-25,-91,-26,-93,-31,-28,-88,-94,-25,-20,52,
                -67,-1,-1,-62,-69,-71,-137,-18,-11,-71,59,-57,7,-64,-63,-7,-1,
                -64,-2,-61,-63,-70,2,4,-60,73,-53,13,-55,14,81,28,32,-33,
                102,-24,43,-88,38,-30,39,41,-18,-89,-35,-40,21,-109,17,-51,-54,
                9,14,-49,-57,9,11,13,88,-36,-41,-114,-60,-65,-65,-84,136,44,
                14,-24,-95,-6,-44,-44,-13,32,-147,104,11,-96,-76,-2,-7,26,-69,
                -3,0,-34,-78,-7,-39,-9,-40,69,-30,7,-32,-108,-47,25,-1,-37,
                38,-27,4,-31,-31,2,5,-69,-4,-72,-74,149,96,26,-128,15,83,
                -16,18,-14,-13,16,-53,-20,-20,-20,-63,5,84,20,-14,56,-12,54,
                -52,-58,-67,-33,-33,40,16,-55,-24,0,-177,-35,-29,-29,-93,-27,-87,
                -28,-89,-31,-28,-86,-90,-25,-18,48,-63,-1,-1,-60,-67,-69,-129,-18,
                -11,-67,55,-53,5,-60,-59,-7,-1,-60,-2,-57,-59,-64,2,4,-56,
                67,-49,13,-51,12,75,26,30,-31,94,-22,39,-80,36,-28,35,37,
                -16,-81,-31,-36,21,-99,17,-45,-48,9,14,-43,-51,9,9,11,78,
                -32,-35,-100,-50,-55,-55,-76,122,36,12,-20,-83,-2,-38,-38,-11,32,
                -133,94,9,-82,-64,0,-7,24,-61,-1,0,-28,-66,-3,-33,-5,-36,
                61,-28,7,-24,-90,-37,23,-1,-33,34,-25,6,-25,-25,2,7,-59,
                2,-58,-66,125,74,24,-110,15,71,-18,16,-12,-11,16,-45,-14,-16,
                -14,-53,3,70,14,-14,48,-14,48,-44,-44,-53,-25,-29};
            short[] expected_x2 =
            new short[] { 0,-177,-35,-29,-29,-93,-27,-87,-28,-89,-31,-28,-86,-90,-25,-18,48,
                -63,-1,-1,-60,-67,-69,-129,-18,-11,-67,55,-53,5,-60,-59,-7,-1,
                -60,-2,-57,-59,-64,2,4,-56,67,-49,13,-51,12,75,26,30,-31,
                94,-22,39,-80,36,-28,35,37,-16,-81,-31,-36,21,-99,17,-45,-48,
                9,14,-43,-51,9,9,11,78,-32,-35,-100,-50,-55,-55,-76,122,36,
                12,-20,-83,-2,-38,-38,-11,32,-133,94,9,-82,-64,0,-7,24,-61,
                -1,0,-28,-66,-3,-33,-5,-36,61,-28,7,-24,-90,-37,23,-1,-33,
                34,-25,6,-25,-25,2,7,-59,2,-58,-66,125,74,24,-110,15,71,
                -18,16,-12,-11,16,-45,-14,-16,-14,-53,3,70,14,-14,48,-14,48,
                -44,-44,-53,-25,-29,34,14,-47,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { -51, -24 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_5()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -147, -135 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,525,432,431,296,483,298,462,346,543,534,319,233,357,354,522,
                212,367,360,192,165,148,-30,258,263,98,411,107,258,74,68,205,212,
                47,195,39,25,4,173,172,9,333,16,177,2,168,329,193,198,31,
                357,39,199,-132,178,4,169,171,19,-162,-32,-45,108,-219,94,-73,-60,
                94,113,-87,-66,56,97,64,286,-18,-69,-252,-75,-86,-45,-174,407,175,
                64,-32,-211,-29,-49,-44,-4,185,-333,323,43,-215,-130,51,1,125,-149,
                13,12,-25,-128,3,4,3,-38,188,-16,117,-7,-188,-82,174,28,-19,
                81,-2,35,-10,-10,31,-5,-150,10,-119,-213,398,220,68,-266,82,196,
                -42,76,6,-2,126,-119,-52,-102,-57,-163,10,166,158,16,159,-33,90,
                -121,-135,-156,-67,-25,22,126,-116,-111,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 705, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -147,-135,526,433,433,298,486,301,466,350,549,540,323,237,362,360,530,
                217,374,367,197,169,151,-29,264,269,103,420,113,264,77,71,211,219,
                51,201,41,26,5,179,178,13,343,21,183,5,176,343,204,207,37,
                371,46,206,-133,184,8,178,180,20,-169,-36,-46,110,-227,95,-76,-63,
                99,119,-91,-70,59,104,73,302,-16,-77,-268,-84,-93,-52,-179,432,193,
                70,-36,-225,-35,-53,-48,-2,192,-347,340,48,-232,-142,52,4,131,-157,
                11,13,-29,-138,1,4,3,-37,202,-11,126,-9,-206,-89,188,34,-18,
                88,0,38,-10,-10,33,-8,-164,5,-135,-225,431,248,73,-285,87,213,
                -40,82,8,1,134,-127,-61,-113,-67,-178,11,183,175,24,172,-30,94,
                -132,-152,-173,-76,-28,26,134,-125,-111,0,-135,524,431,429,294,480,295,
                458,342,537,528,315,229,352,348,514,207,360,353,187,161,145,-31,252,
                257,93,402,101,252,71,65,199,205,43,189,37,24,3,167,166,5,
                323,11,171,-1,160,315,182,189,25,343,32,192,-131,172,0,160,162,
                18,-155,-28,-44,106,-211,93,-70,-57,89,107,-83,-62,53,90,55,270,
                -20,-61,-236,-66,-79,-38,-169,382,157,58,-28,-197,-23,-45,-40,-6,178,
                -319,306,38,-198,-118,50,-2,119,-141,15,11,-21,-118,5,4,3,-39,
                174,-21,108,-5,-170,-75,160,22,-20,74,-4,32,-10,-10,29,-2,-136,
                15,-103,-201,365,192,63,-247,77,179,-44,70,4,-5,118,-111,-43,-91,
                -47,-148,9,149,141,8,146,-36,86,-110,-118,-139,-58,-22};
            short[] expected_x2 =
            new short[] { 0,-135,524,431,429,294,480,295,458,342,537,528,315,229,352,348,514,
                207,360,353,187,161,145,-31,252,257,93,402,101,252,71,65,199,205,
                43,189,37,24,3,167,166,5,323,11,171,-1,160,315,182,189,25,
                343,32,192,-131,172,0,160,162,18,-155,-28,-44,106,-211,93,-70,-57,
                89,107,-83,-62,53,90,55,270,-20,-61,-236,-66,-79,-38,-169,382,157,
                58,-28,-197,-23,-45,-40,-6,178,-319,306,38,-198,-118,50,-2,119,-141,
                15,11,-21,-118,5,4,3,-39,174,-21,108,-5,-170,-75,160,22,-20,
                74,-4,32,-10,-10,29,-2,-136,15,-103,-201,365,192,63,-247,77,179,
                -44,70,4,-5,118,-111,-43,-91,-47,-148,9,149,141,8,146,-36,86,
                -110,-118,-139,-58,-22,18,118,-107,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { -116, -111 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_6()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            through_state.sMid = new Pointer<short>(new short[] { -51, -24 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-29,-14,-12,-26,26,14,-39,-43,10,-6,28,-4,-4,-43,127,
                159,-2,27,4,-23,-135,-87,21,-8,-99,-8,78,-4,90,25,-111,-13,
                -10,6,124,-129,-46,18,46,-49,-86,102,68,20,19,4,-137,-5,-22,
                58,-12,-40,-50,-34,61,-26,-43,-12,-29,24,150,-5,8,0,54,11,
                92,-15,13,-10,4,-134,-64,5,-103,-13,-41,-52,-37,24,103,22,-46,
                90,42,118,-36,21,-51,0,91,-4,111,-38,-5,-4,-74,115,3,-24,
                59,-32,-69,-29,39,-2,-1,-3,44,-19,-118,-26,-14,-119,61,88,-75,
                8,-16,-95,-36,1,-81,-14,131,104,29,92,50,33,-69,22,42,98,
                -42,-38,-55,-40,4,51,41,37,1,-54,53,-12,100,-30,0,12,7,
                -6,96,-17,5,1,-15,-22,-31,29,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 0, 0 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -51,-28,-32,-16,-14,-28,28,15,-43,-47,10,-6,30,-4,-5,-44,138,
                173,1,29,4,-27,-146,-95,21,-10,-106,-9,83,-2,96,26,-117,-16,
                -11,8,129,-135,-50,19,48,-52,-90,107,73,22,20,3,-144,-7,-22,
                60,-12,-43,-53,-35,63,-27,-45,-13,-30,26,156,-4,8,1,56,13,
                95,-15,13,-10,3,-138,-67,4,-106,-14,-43,-54,-38,25,106,23,-46,
                92,44,120,-36,21,-52,0,92,-3,112,-38,-5,-4,-74,116,3,-24,
                59,-32,-70,-29,39,-2,-1,-3,44,-19,-118,-26,-14,-119,61,88,-75,
                8,-16,-94,-36,1,-80,-14,130,103,28,92,50,33,-69,22,42,98,
                -42,-38,-55,-40,4,51,41,37,1,-54,53,-12,100,-30,0,12,7,
                -6,96,-17,5,1,-15,-22,-31,29,0,-20,-26,-12,-10,-24,24,13,
                -35,-39,10,-6,26,-4,-3,-42,116,145,-5,25,4,-19,-124,-79,21,
                -6,-92,-7,73,-6,84,24,-105,-10,-9,4,119,-123,-42,17,44,-46,
                -82,97,63,18,18,5,-130,-3,-22,56,-12,-37,-47,-33,59,-25,-41,
                -11,-28,22,144,-6,8,-1,52,9,89,-15,13,-10,5,-130,-61,6,
                -100,-12,-39,-50,-36,23,100,21,-46,88,40,116,-36,21,-50,0,90,
                -5,110,-38,-5,-4,-74,114,3,-24,59,-32,-68,-29,39,-2,-1,-3,
                44,-19,-118,-26,-14,-119,61,88,-75,8,-16,-96,-36,1,-82,-14,132,
                105,30,92,50,33,-69,22,42,98,-42,-38,-55,-40,4,51,41,37,
                1,-54,53,-12,100,-30,0,12,7,-6,96,-17,5,1};
            short[] expected_x2 =
            new short[] { 0,-20,-26,-12,-10,-24,24,13,-35,-39,10,-6,26,-4,-3,-42,116,
                145,-5,25,4,-19,-124,-79,21,-6,-92,-7,73,-6,84,24,-105,-10,
                -9,4,119,-123,-42,17,44,-46,-82,97,63,18,18,5,-130,-3,-22,
                56,-12,-37,-47,-33,59,-25,-41,-11,-28,22,144,-6,8,-1,52,9,
                89,-15,13,-10,5,-130,-61,6,-100,-12,-39,-50,-36,23,100,21,-46,
                88,40,116,-36,21,-50,0,90,-5,110,-38,-5,-4,-74,114,3,-24,
                59,-32,-68,-29,39,-2,-1,-3,44,-19,-118,-26,-14,-119,61,88,-75,
                8,-16,-96,-36,1,-82,-14,132,105,30,92,50,33,-69,22,42,98,
                -42,-38,-55,-40,4,51,41,37,1,-54,53,-12,100,-30,0,12,7,
                -6,96,-17,5,1,-15,-22,-31,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -31, 29 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_7()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            through_state.sMid = new Pointer<short>(new short[] { -116, -111 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,56,0,-187,-24,-46,-44,-22,73,-180,47,-31,57,-182,45,-36,
                -100,-46,-130,-50,-52,-50,-54,-142,51,-27,-47,45,-124,-114,-69,119,133,
                -171,-103,-110,40,-107,42,-97,-48,-21,-21,50,1,-24,64,-21,67,72,
                22,-187,-25,66,-15,-21,163,0,21,106,-56,22,-66,80,300,54,142,
                34,-22,-48,39,-48,379,-35,131,128,145,48,-105,-152,25,90,-50,28,
                -50,0,-7,84,-6,-73,3,4,-82,-172,-123,46,-14,-191,33,-105,-114,
                -34,-113,56,-110,127,54,155,105,27,-58,171,17,128,-42,20,-137,174,
                197,63,64,65,-28,-67,-268,65,-169,54,64,-7,16,-12,82,79,-66,
                -108,58,-23,66,11,84,27,0,92,-60,84,0,-65,-80,4,-168,-95,
                -38,-7,-14,271,-152,-19,-86,-31,50,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 705, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -116,-122,58,-3,-203,-31,-51,-49,-23,75,-192,46,-31,57,-195,44,-40,
                -110,-55,-143,-58,-58,-56,-63,-154,52,-29,-51,45,-136,-128,-75,130,143,
                -185,-118,-120,39,-114,41,-105,-55,-24,-22,54,2,-25,68,-20,74,80,
                21,-203,-30,71,-15,-20,176,4,25,114,-58,21,-69,92,328,68,156,
                39,-24,-52,40,-43,409,-27,144,145,161,53,-116,-166,26,97,-52,28,
                -54,-1,-6,91,-6,-79,2,3,-92,-191,-136,47,-18,-206,29,-115,-126,
                -42,-122,56,-115,136,65,171,118,30,-59,184,25,138,-42,18,-144,190,
                218,74,72,71,-30,-79,-290,61,-180,56,70,-6,17,-11,90,86,-72,
                -117,60,-22,71,15,92,31,3,98,-61,90,0,-72,-88,-1,-184,-107,
                -43,-9,-9,290,-159,-26,-94,-34,50,0,-100,54,3,-171,-17,-41,-39,
                -21,71,-168,48,-31,57,-169,46,-32,-90,-37,-117,-42,-46,-44,-45,-130,
                50,-25,-43,45,-112,-100,-63,108,123,-157,-88,-100,41,-100,43,-89,-41,
                -18,-20,46,0,-23,60,-22,60,64,23,-171,-20,61,-15,-22,150,-4,
                17,98,-54,23,-63,68,272,40,128,29,-20,-44,38,-53,349,-43,118,
                111,129,43,-94,-138,24,83,-48,28,-46,1,-8,77,-6,-67,4,5,
                -72,-153,-110,45,-10,-176,37,-95,-102,-26,-104,56,-105,118,43,139,92,
                24,-57,158,9,118,-42,22,-130,158,176,52,56,59,-26,-55,-246,69,
                -158,52,58,-8,15,-13,74,72,-60,-99,56,-24,61,7,76,23,-3,
                86,-59,78,0,-58,-72,9,-152,-83,-33,-5,-19,252,-145};
            short[] expected_x2 =
            new short[] { 0,-100,54,3,-171,-17,-41,-39,-21,71,-168,48,-31,57,-169,46,-32,
                -90,-37,-117,-42,-46,-44,-45,-130,50,-25,-43,45,-112,-100,-63,108,123,
                -157,-88,-100,41,-100,43,-89,-41,-18,-20,46,0,-23,60,-22,60,64,
                23,-171,-20,61,-15,-22,150,-4,17,98,-54,23,-63,68,272,40,128,
                29,-20,-44,38,-53,349,-43,118,111,129,43,-94,-138,24,83,-48,28,
                -46,1,-8,77,-6,-67,4,5,-72,-153,-110,45,-10,-176,37,-95,-102,
                -26,-104,56,-105,118,43,139,92,24,-57,158,9,118,-42,22,-130,158,
                176,52,56,59,-26,-55,-246,69,-158,52,58,-8,15,-13,74,72,-60,
                -99,56,-24,61,7,76,23,-3,86,-59,78,0,-58,-72,9,-152,-83,
                -33,-5,-19,252,-145,-12,-78,-28,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { -31, 50 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_8()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -31, 29 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,13,-62,-114,-14,40,5,-7,48,47,-112,-4,-58,-44,5,-28,
                -26,7,17,-107,39,177,60,4,-16,-76,-24,15,-28,-25,6,5,9,
                63,15,-36,-16,83,-108,-10,-6,31,-5,-37,23,-27,-27,67,161,-10,
                27,4,-18,-147,-43,-105,-66,-8,22,7,38,79,29,-24,-4,105,33,
                48,-17,-4,-101,19,-30,0,31,-3,50,84,-10,-7,-116,-21,6,17,
                40,-42,43,42,-14,77,32,3,42,-41,-118,-150,-19,-6,19,29,45,
                -12,17,-7,-109,51,23,-76,62,1,55,-222,-8,70,93,-2,3,162,
                -8,-2,-57,121,13,-20,29,-76,-41,-36,-11,-4,58,-8,3,16,30,
                23,7,107,6,-45,-26,-62,-127,-33,-172,-59,64,17,36,4,-72,-18,
                160,53,3,54,-21,-53,-56,55,-25,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 984, -656 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -31,29,13,-62,-114,-14,40,5,-7,48,47,-112,-4,-58,-44,5,-28,
                -26,7,16,-106,39,177,61,4,-16,-76,-24,15,-28,-25,6,5,10,
                63,15,-36,-16,81,-107,-11,-6,31,-5,-37,22,-27,-26,68,161,-8,
                27,4,-20,-147,-46,-106,-67,-9,22,8,39,79,30,-23,-3,105,35,
                48,-16,-6,-100,17,-29,0,31,-1,51,84,-8,-9,-115,-23,6,18,
                39,-40,43,42,-11,77,33,5,41,-42,-121,-151,-22,-6,19,30,45,
                -10,16,-9,-106,48,22,-73,59,4,48,-218,-12,71,94,1,8,160,
                -3,-4,-53,118,16,-18,26,-75,-44,-37,-12,-3,56,-6,3,17,31,
                24,11,105,8,-45,-29,-65,-127,-41,-171,-61,61,20,36,3,-71,-15,
                158,57,6,52,-21,-54,-55,51,-25,0,29,13,-62,-114,-14,40,5,
                -7,48,47,-112,-4,-58,-44,5,-28,-26,7,18,-108,39,177,59,4,
                -16,-76,-24,15,-28,-25,6,5,8,63,15,-36,-16,85,-109,-9,-6,
                31,-5,-37,24,-27,-28,66,161,-12,27,4,-16,-147,-40,-104,-65,-7,
                22,6,37,79,28,-25,-5,105,31,48,-18,-2,-102,21,-31,0,31,
                -5,49,84,-12,-5,-117,-19,6,16,41,-44,43,42,-17,77,31,1,
                43,-40,-115,-149,-16,-6,19,28,45,-14,18,-5,-112,54,24,-79,65,
                -2,62,-226,-4,69,92,-5,-2,164,-13,0,-61,124,10,-22,32,-77,
                -38,-35,-10,-5,60,-10,3,15,29,22,3,109,4,-45,-23,-59,-127,
                -25,-173,-57,67,14,36,5,-73,-21,162,49,0,56,-21};
            short[] expected_x2 =
            new short[] { 0,29,13,-62,-114,-14,40,5,-7,48,47,-112,-4,-58,-44,5,-28,
                -26,7,18,-108,39,177,59,4,-16,-76,-24,15,-28,-25,6,5,8,
                63,15,-36,-16,85,-109,-9,-6,31,-5,-37,24,-27,-28,66,161,-12,
                27,4,-16,-147,-40,-104,-65,-7,22,6,37,79,28,-25,-5,105,31,
                48,-18,-2,-102,21,-31,0,31,-5,49,84,-12,-5,-117,-19,6,16,
                41,-44,43,42,-17,77,31,1,43,-40,-115,-149,-16,-6,19,28,45,
                -14,18,-5,-112,54,24,-79,65,-2,62,-226,-4,69,92,-5,-2,164,
                -13,0,-61,124,10,-22,32,-77,-38,-35,-10,-5,60,-10,3,15,29,
                22,3,109,4,-45,-23,-59,-127,-25,-173,-57,67,14,36,5,-73,-21,
                162,49,0,56,-21,-52,-57,59,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 984, -656 });
            expected_state.sMid = new Pointer<short>(new short[] { 55, -25 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_9()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            through_state.sMid = new Pointer<short>(new short[] { -31, 50 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-111,80,61,-70,3,14,-71,-259,128,-203,-53,-28,-19,-109,-45,
                52,-8,-98,-18,47,-29,-8,80,75,83,-60,81,111,10,36,34,15,
                -56,89,188,50,115,123,-112,-137,18,-1,23,-152,-165,-103,-41,-104,-113,
                -27,36,48,-98,46,-183,35,-107,41,-36,-272,28,-50,-45,-50,47,53,
                59,5,67,15,-97,67,10,11,10,-70,-13,77,86,26,-61,90,19,
                8,-56,15,15,12,-2,82,8,-57,9,-161,138,76,-133,-2,-74,62,
                67,-75,-90,-90,-176,-117,-116,-34,-49,53,-37,-35,-184,22,108,52,-82,
                -90,63,-6,63,-226,-14,-111,55,46,-11,-15,1,-160,-36,-94,-100,-111,
                -49,-29,34,-94,-43,-196,-123,-54,18,-189,32,-47,-202,-129,-54,13,103,
                -96,-105,44,-33,-18,46,-80,45,-97,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 705, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { -31,51,-117,86,66,-74,2,14,-82,-279,129,-218,-62,-32,-24,-119,-50,
                55,-10,-107,-21,50,-31,-8,88,85,90,-61,89,122,14,40,38,16,
                -58,99,207,61,128,133,-122,-150,17,0,22,-168,-184,-116,-49,-116,-125,
                -31,39,51,-104,44,-196,32,-114,41,-44,-295,23,-55,-51,-54,51,60,
                65,8,73,16,-103,71,13,12,10,-76,-14,85,95,29,-64,97,23,
                8,-60,15,17,13,0,89,9,-61,5,-171,148,82,-142,-7,-79,67,
                72,-82,-101,-103,-195,-133,-129,-40,-53,56,-40,-43,-200,22,119,57,-90,
                -98,66,-4,63,-244,-22,-119,58,51,-11,-16,-3,-174,-44,-105,-113,-123,
                -56,-32,34,-102,-53,-216,-139,-61,14,-204,30,-55,-223,-145,-61,15,110,
                -104,-115,45,-35,-19,48,-85,45,-97,0,49,-105,74,56,-66,4,14,
                -60,-239,127,-188,-44,-24,-14,-99,-40,49,-6,-89,-15,44,-27,-8,72,
                65,76,-59,73,100,6,32,30,14,-54,79,169,39,102,113,-102,-124,
                19,-2,24,-136,-146,-90,-33,-92,-101,-23,33,45,-92,48,-170,38,-100,
                41,-28,-249,33,-45,-39,-46,43,46,53,2,61,14,-91,63,7,10,
                10,-64,-12,69,77,23,-58,83,15,8,-52,15,13,11,-4,75,7,
                -53,13,-151,128,70,-124,3,-69,57,62,-68,-79,-77,-157,-101,-103,-28,
                -45,50,-34,-27,-168,22,97,47,-74,-82,60,-8,63,-208,-6,-103,52,
                41,-11,-14,5,-146,-28,-83,-87,-99,-42,-26,34,-86,-33,-176,-107,-47,
                22,-174,34,-39,-181,-113,-47,11,96,-88,-95,43,-31,-17};
            short[] expected_x2 =
            new short[] { 0,49,-105,74,56,-66,4,14,-60,-239,127,-188,-44,-24,-14,-99,-40,
                49,-6,-89,-15,44,-27,-8,72,65,76,-59,73,100,6,32,30,14,
                -54,79,169,39,102,113,-102,-124,19,-2,24,-136,-146,-90,-33,-92,-101,
                -23,33,45,-92,48,-170,38,-100,41,-28,-249,33,-45,-39,-46,43,46,
                53,2,61,14,-91,63,7,10,10,-64,-12,69,77,23,-58,83,15,
                8,-52,15,13,11,-4,75,7,-53,13,-151,128,70,-124,3,-69,57,
                62,-68,-79,-77,-157,-101,-103,-28,-45,50,-34,-27,-168,22,97,47,-74,
                -82,60,-8,63,-208,-6,-103,52,41,-11,-14,5,-146,-28,-83,-87,-99,
                -42,-26,34,-86,-33,-176,-107,-47,22,-174,34,-39,-181,-113,-47,11,96,
                -88,-95,43,-31,-17,44,-75,45,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { 45, -97 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_10()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 984, -656 });
            through_state.sMid = new Pointer<short>(new short[] { 55, -25 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,157,107,29,-106,-138,-61,3,53,14,-63,-55,15,57,-6,-120,
                37,88,3,-37,-1,7,63,30,11,-1,60,-186,41,8,2,54,104,
                -7,41,-47,100,81,-130,-19,-16,-23,-88,-62,8,116,-55,61,36,35,
                116,-62,-198,-59,-5,-13,-124,-135,20,109,90,38,43,15,-19,60,19,
                -19,-16,-24,32,79,-29,102,-35,-9,-37,-34,-28,163,12,-137,2,56,
                93,72,6,-25,-36,-11,-3,16,-64,-85,-57,-40,5,3,-27,-3,-50,
                148,65,19,11,27,-3,13,-44,68,22,-42,-5,-75,-12,43,-39,17,
                13,17,11,47,83,-144,-34,-5,-15,-13,-128,41,-55,-40,110,137,41,
                -39,-2,0,-2,17,-51,1,-144,123,-6,28,45,-74,-55,-12,-21,109,
                -1,-2,93,-85,-137,-59,-63,130,117,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 426, -1885 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { 55,-18,156,110,28,-106,-139,-63,3,52,13,-62,-54,14,55,-8,-114,
                34,85,4,-35,-2,8,61,30,11,1,51,-172,34,9,3,53,98,
                -3,37,-40,93,74,-118,-21,-16,-24,-83,-59,9,105,-46,55,35,35,
                104,-58,-182,-58,-6,-15,-115,-123,17,100,83,37,39,14,-15,53,18,
                -17,-15,-21,29,69,-21,88,-29,-9,-33,-31,-22,140,11,-118,0,50,
                82,63,6,-22,-31,-10,-2,12,-55,-74,-50,-35,4,2,-23,-4,-39,
                123,57,17,10,22,-2,10,-35,55,18,-34,-6,-61,-10,34,-31,13,
                11,14,10,39,65,-114,-29,-5,-12,-12,-102,30,-44,-31,89,111,34,
                -31,-2,0,-1,13,-40,-2,-113,96,-3,23,35,-59,-45,-11,-15,86,
                1,0,73,-68,-111,-50,-49,104,117,0,-32,158,104,30,-106,-137,-59,
                3,54,15,-64,-56,16,59,-4,-126,40,91,2,-39,0,6,65,30,
                11,-3,69,-200,48,7,1,55,110,-11,45,-54,107,88,-142,-17,-16,
                -22,-93,-65,7,127,-64,67,37,35,128,-66,-214,-60,-4,-11,-133,-147,
                23,118,97,39,47,16,-23,67,20,-21,-17,-27,35,89,-37,116,-41,
                -9,-41,-37,-34,186,13,-156,4,62,104,81,6,-28,-41,-12,-4,20,
                -73,-96,-64,-45,6,4,-31,-2,-61,173,73,21,12,32,-4,16,-53,
                81,26,-50,-4,-89,-14,52,-47,21,15,20,12,55,101,-174,-39,-5,
                -18,-14,-154,52,-66,-49,131,163,48,-47,-2,0,-3,21,-62,4,-175,
                150,-9,33,55,-89,-65,-13,-27,132,-3,-4,113,-102,-163};
            short[] expected_x2 =
            new short[] { 0,-32,158,104,30,-106,-137,-59,3,54,15,-64,-56,16,59,-4,-126,
                40,91,2,-39,0,6,65,30,11,-3,69,-200,48,7,1,55,110,
                -11,45,-54,107,88,-142,-17,-16,-22,-93,-65,7,127,-64,67,37,35,
                128,-66,-214,-60,-4,-11,-133,-147,23,118,97,39,47,16,-23,67,20,
                -21,-17,-27,35,89,-37,116,-41,-9,-41,-37,-34,186,13,-156,4,62,
                104,81,6,-28,-41,-12,-4,20,-73,-96,-64,-45,6,4,-31,-2,-61,
                173,73,21,12,32,-4,16,-53,81,26,-50,-4,-89,-14,52,-47,21,
                15,20,12,55,101,-174,-39,-5,-18,-14,-154,52,-66,-49,131,163,48,
                -47,-2,0,-3,21,-62,4,-175,150,-9,33,55,-89,-65,-13,-27,132,
                -3,-4,113,-102,-163,-68,-77,156,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 426, -1885 });
            expected_state.sMid = new Pointer<short>(new short[] { 130, 117 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_11()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            through_state.sMid = new Pointer<short>(new short[] { 45, -97 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-24,-25,53,-77,-85,-23,-90,-20,113,-144,113,62,-66,133,78,
                -48,70,15,-128,59,-61,64,-60,-225,45,-84,-89,-30,116,-2,-79,-19,
                -20,-93,40,-90,47,-11,-3,-72,59,68,-3,72,301,105,50,48,-22,
                -40,313,125,63,49,-12,-31,-41,-182,-69,62,0,69,-56,70,-68,-70,
                -85,-25,-87,-24,-19,-17,57,62,77,1,-60,-78,-17,-8,-9,-5,64,
                7,6,-1,-60,-8,-130,-21,48,-73,-77,46,-8,-16,52,-68,-12,55,
                -65,51,63,6,65,136,92,-36,-41,77,79,154,101,110,110,113,51,
                45,48,107,109,-12,39,42,98,-23,-34,-41,141,28,25,86,25,88,
                27,27,24,-41,13,-53,-60,-202,-25,-86,34,46,57,62,66,-58,-7,
                -69,54,-6,-3,-5,62,68,8,-50,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 705, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { 45,-105,-29,-26,55,-84,-94,-29,-98,-21,119,-151,121,68,-67,144,86,
                -49,75,15,-137,60,-63,67,-68,-244,42,-92,-99,-32,125,-1,-86,-23,
                -24,-100,39,-96,49,-11,-5,-77,64,75,0,84,330,121,57,53,-24,
                -37,341,143,72,54,-13,-35,-49,-199,-77,66,3,74,-58,73,-74,-79,
                -94,-31,-95,-28,-21,-18,63,70,85,1,-67,-86,-20,-9,-10,-4,69,
                9,7,-2,-65,-13,-141,-25,50,-80,-84,48,-8,-16,55,-73,-13,58,
                -68,55,69,9,73,151,102,-38,-44,84,91,171,115,124,124,126,59,
                51,55,119,120,-10,43,48,107,-24,-38,-42,152,34,30,94,31,96,
                32,30,26,-44,12,-58,-70,-221,-33,-93,36,52,64,70,72,-62,-10,
                -74,57,-5,-3,-4,69,75,9,-50,0,-89,-19,-24,51,-70,-76,-17,
                -82,-19,107,-137,105,56,-65,122,70,-47,65,15,-119,58,-59,61,-52,
                -206,48,-76,-79,-28,107,-3,-72,-15,-16,-86,41,-84,45,-11,-1,-67,
                54,61,-6,60,272,89,43,43,-20,-43,285,107,54,44,-11,-27,-33,
                -165,-61,58,-3,64,-54,67,-62,-61,-76,-19,-79,-20,-17,-16,51,54,
                69,1,-53,-70,-14,-7,-8,-6,59,5,5,0,-55,-3,-119,-17,46,
                -66,-70,44,-8,-16,49,-63,-11,52,-62,47,57,3,57,121,82,-34,
                -38,70,67,137,87,96,96,100,43,39,41,95,98,-14,35,36,89,
                -22,-30,-40,130,22,20,78,19,80,22,24,22,-38,14,-48,-50,-183,
                -17,-79,32,40,50,54,60,-54,-4,-64,51,-7,-3,-6};
            short[] expected_x2 =
            new short[] { 0,-89,-19,-24,51,-70,-76,-17,-82,-19,107,-137,105,56,-65,122,70,
                -47,65,15,-119,58,-59,61,-52,-206,48,-76,-79,-28,107,-3,-72,-15,
                -16,-86,41,-84,45,-11,-1,-67,54,61,-6,60,272,89,43,43,-20,
                -43,285,107,54,44,-11,-27,-33,-165,-61,58,-3,64,-54,67,-62,-61,
                -76,-19,-79,-20,-17,-16,51,54,69,1,-53,-70,-14,-7,-8,-6,59,
                5,5,0,-55,-3,-119,-17,46,-66,-70,44,-8,-16,49,-63,-11,52,
                -62,47,57,3,57,121,82,-34,-38,70,67,137,87,96,96,100,43,
                39,41,95,98,-14,35,36,89,-22,-30,-40,130,22,20,78,19,80,
                22,24,22,-38,14,-48,-50,-183,-17,-79,32,40,50,54,60,-54,-4,
                -64,51,-7,-3,-6,55,61,7,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { 8, -50 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_12()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 426, -1885 });
            through_state.sMid = new Pointer<short>(new short[] { 130, 117 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-32,-79,22,33,-100,-36,-61,-13,74,29,91,32,-66,26,67,
                -17,-6,-1,68,6,-66,25,12,-9,36,57,-46,-47,49,-31,-31,14,
                -79,-59,20,70,-14,-12,-74,-50,10,77,50,19,89,-13,-96,-40,-78,
                33,36,44,21,-40,-8,8,0,-28,-15,-16,26,131,27,1,78,46,
                -53,-87,-6,-17,-45,3,-37,87,-29,73,39,-28,-28,-15,141,56,-36,
                -35,-27,-30,52,-3,-28,110,53,38,-66,-107,47,-60,-22,98,-64,-87,
                -17,42,-94,68,65,-146,-59,35,-87,3,-29,90,-78,-30,72,15,60,
                30,-153,-40,48,21,71,-31,71,56,52,27,-38,-85,-12,63,142,-63,
                -64,54,28,-18,3,-44,47,-34,-24,32,-44,-59,-5,61,-27,-77,-59,
                22,27,-49,-7,-20,0,96,145,27,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { -1689, 656 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { 130,95,-25,-63,17,26,-80,-31,-50,-10,60,25,74,26,-53,21,55,
                -14,-5,-1,56,5,-55,21,10,-7,30,48,-38,-39,41,-26,-26,12,
                -66,-50,17,59,-12,-10,-63,-42,8,65,42,15,77,-11,-82,-32,-67,
                29,30,37,18,-35,-6,7,0,-24,-12,-14,21,115,21,-1,68,40,
                -46,-76,-3,-14,-40,5,-36,80,-30,66,34,-26,-24,-17,127,48,-34,
                -30,-23,-28,49,-4,-29,101,44,36,-59,-99,50,-57,-22,95,-60,-78,
                -14,44,-93,65,65,-138,-51,40,-84,8,-32,91,-77,-28,70,8,56,
                33,-147,-33,47,14,69,-37,68,48,46,26,-34,-80,-11,55,139,-66,
                -62,55,26,-19,6,-46,50,-34,-23,35,-42,-55,-5,61,-26,-71,-55,
                23,28,-49,-3,-19,-4,86,135,27,0,139,-39,-95,27,40,-120,-41,
                -72,-16,88,33,108,38,-79,31,79,-20,-7,-1,80,7,-77,29,14,
                -11,42,66,-54,-55,57,-36,-36,16,-92,-68,23,81,-16,-14,-85,-58,
                12,89,58,23,101,-15,-110,-48,-89,37,42,51,24,-45,-10,9,0,
                -32,-18,-18,31,147,33,3,88,52,-60,-98,-9,-20,-50,1,-38,94,
                -28,80,44,-30,-32,-13,155,64,-38,-40,-31,-32,55,-2,-27,119,62,
                40,-73,-115,44,-63,-22,101,-68,-96,-20,40,-95,71,65,-154,-67,30,
                -90,-2,-26,89,-79,-32,74,22,64,27,-159,-47,49,28,73,-25,74,
                64,58,28,-42,-90,-13,71,145,-60,-66,53,30,-17,0,-42,44,-34,
                -25,29,-46,-63,-5,61,-28,-83,-63,21,26,-49,-11,-21};
            short[] expected_x2 =
            new short[] { 0,139,-39,-95,27,40,-120,-41,-72,-16,88,33,108,38,-79,31,79,
                -20,-7,-1,80,7,-77,29,14,-11,42,66,-54,-55,57,-36,-36,16,
                -92,-68,23,81,-16,-14,-85,-58,12,89,58,23,101,-15,-110,-48,-89,
                37,42,51,24,-45,-10,9,0,-32,-18,-18,31,147,33,3,88,52,
                -60,-98,-9,-20,-50,1,-38,94,-28,80,44,-30,-32,-13,155,64,-38,
                -40,-31,-32,55,-2,-27,119,62,40,-73,-115,44,-63,-22,101,-68,-96,
                -20,40,-95,71,65,-154,-67,30,-90,-2,-26,89,-79,-32,74,22,64,
                27,-159,-47,49,28,73,-25,74,64,58,28,-42,-90,-13,71,145,-60,
                -66,53,30,-17,0,-42,44,-34,-25,29,-46,-63,-5,61,-28,-83,-63,
                21,26,-49,-11,-21,4,106,155,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { -1689, 656 });
            expected_state.sMid = new Pointer<short>(new short[] { 145, 27 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_MS_to_LR_13()
        {
            stereo_dec_state through_state = new stereo_dec_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            through_state.sMid = new Pointer<short>(new short[] { 8, -50 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Pointer<short> in_x1 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,-57,60,65,-102,-122,-19,-13,-71,44,-10,52,60,2,-54,-180,
                -24,-26,-86,-80,28,-22,-79,-86,-28,34,-72,36,-22,41,50,60,69,
                15,15,-52,-3,-60,-6,62,9,67,-104,-123,-21,-78,-24,-20,42,53,
                63,1,-62,-69,48,-64,-8,-66,-17,-10,-12,-70,-17,-75,44,-12,-14,
                -15,-73,-76,-139,-33,-90,30,91,45,-63,227,17,14,74,-20,16,66,
                -41,0,19,14,-45,17,-48,-163,-13,-76,-30,-81,36,-70,199,64,67,
                57,8,4,3,73,79,21,-38,17,-83,50,0,56,7,74,79,28,
                13,70,16,21,-25,18,8,68,-90,-107,52,7,-57,51,-54,-4,-1,
                52,-109,-8,-66,-13,-19,30,-11,-1,5,-114,-27,-79,-82,-33,37,87,
                3,-4,-13,-103,-12,-73,-15,-11,-70,-13108,-13108,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0});
            Pointer<short> in_x2 = Helpers.WrapWithArrayPointer<short>(
            new short[] { -13108,-13108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108});
            Pointer<int> in_pred_Q13 = Helpers.WrapWithArrayPointer<int>(
            new int[] { 705, 328 });
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            short[] expected_x1 =
            new short[] { 8,-55,-62,65,69,-112,-135,-23,-16,-76,46,-9,57,66,2,-62,-197,
                -30,-31,-95,-88,28,-25,-88,-95,-31,35,-76,37,-22,45,56,68,76,
                18,15,-56,-6,-65,-6,67,13,71,-114,-136,-27,-85,-28,-21,46,60,
                69,1,-69,-75,49,-68,-11,-72,-20,-11,-15,-76,-22,-81,46,-12,-16,
                -18,-81,-87,-153,-41,-98,33,100,49,-62,245,24,17,80,-20,18,71,
                -43,0,21,15,-48,16,-55,-178,-19,-83,-36,-88,36,-71,215,75,75,
                63,10,5,5,81,88,24,-40,16,-88,52,2,61,10,82,88,32,
                16,76,19,23,-26,19,11,72,-98,-117,54,7,-60,53,-57,-6,0,
                54,-117,-12,-72,-16,-20,32,-11,-1,3,-124,-33,-88,-91,-37,41,95,
                5,-5,-16,-112,-17,-80,-18,-14,-70,0,-45,-52,55,61,-92,-109,-15,
                -10,-66,42,-11,47,54,2,-46,-163,-18,-21,-77,-72,28,-19,-70,-77,
                -25,33,-68,35,-22,37,44,52,62,12,15,-48,0,-55,-6,57,5,
                63,-94,-110,-15,-71,-20,-19,38,46,57,1,-55,-63,47,-60,-5,-60,
                -14,-9,-9,-64,-12,-69,42,-12,-12,-12,-65,-65,-125,-25,-82,27,82,
                41,-64,209,10,11,68,-20,14,61,-39,0,17,13,-42,18,-41,-148,
                -7,-69,-24,-74,36,-69,183,53,59,51,6,3,1,65,70,18,-36,
                18,-78,48,-2,51,4,66,70,24,10,64,13,19,-24,17,5,64,
                -82,-97,50,7,-54,49,-51,-2,-2,50,-101,-4,-60,-10,-18,28,-11,
                -1,7,-104,-21,-70,-73,-29,33,79,1,-3,-10,-94,-7};
            short[] expected_x2 =
            new short[] { 0,-45,-52,55,61,-92,-109,-15,-10,-66,42,-11,47,54,2,-46,-163,
                -18,-21,-77,-72,28,-19,-70,-77,-25,33,-68,35,-22,37,44,52,62,
                12,15,-48,0,-55,-6,57,5,63,-94,-110,-15,-71,-20,-19,38,46,
                57,1,-55,-63,47,-60,-5,-60,-14,-9,-9,-64,-12,-69,42,-12,-12,
                -12,-65,-65,-125,-25,-82,27,82,41,-64,209,10,11,68,-20,14,61,
                -39,0,17,13,-42,18,-41,-148,-7,-69,-24,-74,36,-69,183,53,59,
                51,6,3,1,65,70,18,-36,18,-78,48,-2,51,4,66,70,24,
                10,64,13,19,-24,17,5,64,-82,-97,50,7,-54,49,-51,-2,-2,
                50,-101,-4,-60,-10,-18,28,-11,-1,7,-104,-21,-70,-73,-29,33,79,
                1,-3,-10,-94,-7,-66,-12,-8,0,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,
                -13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108,-13108};
            stereo_dec_state expected_state = new stereo_dec_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 705, 328 });
            expected_state.sMid = new Pointer<short>(new short[] { -11, -70 });
            expected_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            Stereo.silk_stereo_MS_to_LR(through_state, in_x1, in_x2, in_pred_Q13, in_fs_kHz, in_frame_length);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Helpers.AssertPointerDataEquals(expected_state.pred_prev_Q13, through_state.pred_prev_Q13);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_0()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 13103, 10885 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 0, 1, 0, 1 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 0;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 10014,8144,8961,7391,5744,5295,-1113,-20689,-20015,-17318,-13973,-12831,9348,27562,20027,19863,13964,
                13374,9026,8457,5388,5145,2460,2504,560,567,-822,-815,-1785,-1892,-2552,-2287,-2759,-2898,
                -3294,-3279,-3536,-3534,-3554,-3372,-3607,-3322,-3446,-3375,-3437,-3288,-3326,-3084,-3153,-3152,-3104,
                -3033,-3017,-2806,-2744,-2630,-2721,-2430,-2526,-2312,-2242,-2275,-2184,-1904,-1959,-1886,-2086,-1937,
                -1712,-1790,-1697,-1694,-1560,-1477,-1313,-1435,-1375,-1146,-950,-1099,-928,-980,-822,-906,-836,
                -820,-788,-704,-461,-658,-471,-494,-574,-480,-375,-321,-388,-243,-195,-151,-4,91,
                -57,70,59,-117,-97,-76,-33,162,170,97,141,240,139,115,72,426,248,
                252,247,289,484,405,410,468,408,255,327,469,286,329,359,540,437,530,
                622,417,305,457,497,371,373,357,410,408,478,504,483,346,328,495,442,
                573,616,606,347,588,525,451,362,374,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,8961,7391,5744,5295,-1113,-20689,-20015,-17317,-13975,-12826,9340,27659,20070,19753,13922,
                13176,9006,8576,5434,5130,2520,2438,640,475,-740,-736,-1844,-1800,-2480,-2334,-2900,-2797,
                -3159,-3200,-3509,-3477,-3729,-3306,-3535,-3552,-3560,-3354,-3489,-3278,-3279,-3252,-3128,-3215,-3112,
                -2832,-2962,-2869,-2877,-2653,-2590,-2553,-2473,-2472,-2281,-2301,-2132,-1947,-1944,-1936,-1872,-1791,
                -1796,-1745,-1449,-1421,-1446,-1405,-1417,-1357,-1270,-1123,-1150,-1165,-1035,-1157,-1018,-848,-755,
                -804,-709,-678,-536,-534,-423,-347,-370,-324,-339,-333,-278,-257,-142,-226,-358,-307,
                -259,-165,-33,-80,93,17,120,78,157,256,161,230,134,169,172,318,204,
                123,327,442,343,378,325,341,345,301,332,332,198,314,475,399,404,421,
                386,519,572,434,483,486,321,593,506,493,639,407,480,351,402,489,457,
                451,497,507,472,306,503,474,434,564,0,0}, 2);
            int in_total_rate_bps = 64700;
            int in_prev_speech_act_Q8 = 255;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 398, 469 });
            expected_state.sSide = new Pointer<short>(new short[] { -36, -95 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 303, 3, 54, 2 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 32;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 2;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 2;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 8961,7391,5744,5295,-1113,-20689,-20015,-17317,-13974,-12828,9344,27611,20049,19808,13943,13275,9016,
                8517,5411,5138,2490,2471,600,521,-781,-775,-1814,-1846,-2516,-2310,-2829,-2847,-3226,-3239,
                -3522,-3505,-3641,-3339,-3571,-3437,-3503,-3364,-3463,-3283,-3302,-3168,-3140,-3183,-3108,-2932,-2989,
                -2837,-2810,-2641,-2655,-2491,-2499,-2392,-2261,-2288,-2158,-1925,-1951,-1911,-1979,-1864,-1754,-1767,
                -1573,-1557,-1503,-1441,-1365,-1396,-1322,-1134,-1050,-1132,-981,-1068,-920,-877,-795,-812,-748,
                -691,-498,-596,-447,-420,-472,-402,-357,-327,-333,-250,-168,-188,-181,-108,-158,-47,
                13,-98,-2,-29,44,120,164,177,151,235,137,142,122,372,226,188,287,
                366,414,392,368,405,377,278,330,401,242,322,417,470,421,476,504,468,
                439,446,490,429,347,475,458,451,559,456,482,349,365,492,450,512,557,
                557,410,447,514,463,398,469,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,564,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 0;
            int[] expected_mid_side_rates_bps =
            new int[] { 63499, 1 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_1()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 398, 469 });
            through_state.sSide = new Pointer<short>(new short[] { -36, -95 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 303, 3, 54, 2 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 32;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 13103,10885,420,373,358,385,293,477,309,273,458,516,469,375,355,320,312,
                347,397,368,243,406,589,427,438,287,451,140,214,299,467,214,272,342,
                199,381,203,213,154,174,228,157,220,293,233,288,173,250,201,186,89,
                221,130,287,212,216,80,98,212,201,14,78,148,53,148,63,-8,200,
                93,270,142,107,33,2,284,55,111,174,199,66,116,-29,102,136,92,
                -18,110,-45,-28,33,-47,-76,-71,29,61,96,-91,-92,78,-39,-78,18,
                -6,-22,21,-16,161,34,81,11,-81,-99,37,65,29,-60,-76,-34,8,
                -80,-131,80,48,-55,-66,117,125,107,24,44,19,-144,22,-144,-23,94,
                -72,92,57,-149,-155,10,18,-113,-141,-171,-122,4,-183,-73,-43,92,75,
                99,70,19,-53,-19,-89,-56,59,-97,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,605,317,324,309,378,471,425,373,419,483,534,410,396,322,413,
                405,399,361,314,343,308,315,335,329,226,406,384,287,151,358,307,288,
                128,209,196,342,334,114,195,150,219,369,244,272,281,280,152,164,133,
                135,292,201,89,279,30,-17,128,171,247,151,132,-6,29,169,193,136,
                92,150,135,213,87,130,109,-92,69,57,216,58,15,67,108,27,52,
                16,51,87,122,105,32,5,11,4,-125,33,2,77,157,-110,-87,-123,
                -207,-93,-18,-31,-53,48,105,8,-48,71,108,38,73,-104,0,-28,-43,
                121,17,27,21,23,-25,-117,-28,-49,-22,-31,137,-114,-2,-13,-72,-4,
                18,-2,-58,-151,-128,46,-3,-145,256,131,-88,131,71,-159,10,-9,-211,
                -82,32,52,-71,-151,-147,-1,-27,-107,0,0}, 2);
            int in_total_rate_bps = 70516;
            int in_prev_speech_act_Q8 = 255;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 16, -102 });
            expected_state.sSide = new Pointer<short>(new short[] { 43, 5 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 64;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 2;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 3;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 513,345,341,347,336,474,367,323,439,500,502,393,376,321,363,376,398,
                365,279,375,449,371,387,308,339,273,299,293,309,286,290,315,164,295,
                200,278,244,144,212,154,220,331,239,280,227,265,177,175,111,178,211,
                244,151,248,55,41,170,186,131,115,140,24,89,116,93,168,93,210,
                139,160,60,66,197,-18,90,116,208,62,66,19,105,82,72,-1,81,
                21,47,69,-7,-35,-30,17,-32,65,-44,-7,118,-74,-82,-52,-106,-57,
                2,-23,54,41,93,10,-64,-14,73,52,51,-82,-38,-31,-17,21,-57,
                54,35,-16,-45,0,49,29,1,7,78,-129,10,-78,-47,45,-27,45,
                0,-150,-141,28,8,-129,58,-20,-105,68,-56,-116,-16,42,-68,9,51,
                36,-62,-85,-118,-28,16,-102,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-107,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 0;
            int[] expected_mid_side_rates_bps =
            new int[] { 69315, 1 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_2()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 16, -102 });
            through_state.sSide = new Pointer<short>(new short[] { 43, 5 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 64;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 398,469,44,69,160,22,-110,24,-31,-119,-170,32,-70,222,-59,-223,-172,
                29,20,-40,-73,24,-128,-90,-26,-52,35,50,-54,172,-48,65,-138,-116,
                -159,37,29,3,108,51,25,-65,30,-84,56,-34,11,-136,-50,83,91,
                39,-134,-22,39,-63,-33,-152,29,44,7,-42,-50,12,-48,-1,97,42,
                102,94,79,2,-51,6,-155,32,-28,21,33,-174,-58,-112,-158,-45,14,
                11,104,84,-87,-54,69,110,5,-55,-2,185,132,14,111,58,-59,-203,
                -147,54,-57,-192,40,169,50,48,100,-54,-81,-77,13,85,-110,-87,-42,
                60,-18,-113,101,246,-22,24,8,-88,-58,2,-1,3,-28,-63,-65,90,
                -62,-33,7,-18,32,203,-25,37,-24,-28,-75,149,-118,-67,27,1,-71,
                -109,1,7,65,-78,-162,-43,46,170,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,175,48,3,-158,-68,-46,-30,-60,77,3,-180,-80,58,7,23,
                83,-126,83,-55,-52,55,35,-94,11,-89,19,-108,-40,9,-77,-18,-101,
                -30,20,27,-71,-23,-23,-4,-72,-81,52,5,-154,-14,33,-70,180,106,
                59,-127,53,145,15,31,37,-13,-96,-90,74,-42,-101,-90,115,75,9,
                -83,10,-113,112,-17,-85,-43,-90,-11,58,63,90,38,58,150,27,-83,
                32,-22,-158,-66,44,-89,-11,9,3,-94,37,200,17,-26,-47,10,-48,
                -81,-18,54,-41,-108,35,-23,114,10,-143,3,17,0,142,-122,-42,52,
                41,-63,-80,77,-57,149,73,-64,-179,-7,-8,130,-21,-71,-84,-50,64,
                8,-70,-65,-48,53,131,56,-6,4,169,123,24,99,78,-87,-42,-209,
                -52,59,-177,-76,-1,38,-36,-19,38,0,0}, 2);
            int in_total_rate_bps = 64700;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 14, 104 });
            expected_state.sSide = new Pointer<short>(new short[] { 33, 66 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 2, 0, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 2;
            expected_ix[0, 1] = 0;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 3;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 110,59,82,-68,-89,-11,-30,-89,-46,18,-125,71,0,-108,-74,56,-53,
                22,-64,-14,-36,-27,-60,-20,-27,35,-81,66,-19,-6,-78,-108,-94,29,
                28,-34,43,14,11,-68,-25,-16,31,-94,-1,-51,-60,132,99,49,-130,
                16,92,-24,-1,-57,8,-26,-41,16,-46,-44,-69,57,86,26,10,52,
                -17,57,-34,-39,-99,-29,-19,40,48,-42,-10,-27,-4,-9,-34,22,41,
                -37,-76,-5,-10,50,7,-26,-48,111,166,16,43,6,-24,-125,-114,18,
                -1,-116,-34,102,14,81,55,-98,-39,-30,7,114,-116,-64,5,51,-40,
                -96,89,95,64,49,-28,-133,-32,-3,65,-9,-49,-73,-57,77,-27,-51,
                -29,-33,43,167,16,16,-10,71,24,87,-9,6,-30,-20,-140,-80,30,
                -85,-5,-39,-62,-39,14,104,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 63500, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_3()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 14, 104 });
            through_state.sSide = new Pointer<short>(new short[] { 33, 66 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 2, 0, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 16,-102,-3,39,125,62,27,-37,4,-25,-46,-83,-62,44,44,127,67,
                -101,69,99,-41,31,-126,-2,49,122,-17,38,89,108,10,-198,-125,-96,
                -199,5,27,-14,82,-75,-40,-13,-51,-54,2,84,248,73,89,117,18,
                -75,-56,49,92,-54,34,-101,-155,17,84,-78,151,55,69,189,-146,77,
                19,8,27,-71,-173,162,33,3,-22,-42,-20,-124,74,-14,-146,-72,-47,
                8,44,-6,-76,17,-21,134,-11,-51,62,-34,20,22,64,-83,10,148,
                2,34,-68,-44,-66,30,-27,-169,48,101,85,95,3,-81,-120,38,-87,
                3,-21,-16,80,11,-1,-56,6,210,140,-73,-37,93,-57,-208,-86,-191,
                -75,54,50,-46,53,48,-36,17,-24,192,127,2,-48,15,-41,-34,-36,
                14,-52,-61,72,98,-28,127,-89,-60,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,59,-114,52,50,195,-6,19,-94,12,261,83,166,-81,-142,-93,
                -59,120,-56,-2,103,62,-155,-137,-50,6,-42,-82,-29,-57,-36,13,40,
                -24,106,173,-90,-48,42,-151,-95,47,-111,-29,175,-8,24,91,21,90,
                -59,88,66,103,-11,-127,-34,58,12,26,188,-41,-56,-171,-108,117,105,
                -56,8,15,61,179,19,-72,-13,57,-5,-47,38,-18,68,32,-160,-30,
                53,-38,-4,168,85,-185,-159,-118,-47,-40,-18,-103,-10,-18,-107,39,189,
                167,-14,22,-110,24,1,-44,113,-40,-69,-45,39,33,14,66,112,-94,
                -51,-5,70,-64,-86,52,-3,-85,-81,185,91,106,-65,9,-76,-33,-16,
                -98,-96,-11,55,-10,102,93,-51,-7,-2,-24,111,59,6,-148,48,-34,
                -7,103,43,15,84,28,-141,-135,-27,0,0}, 2);
            int in_total_rate_bps = 70700;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -112, -43 });
            expected_state.sSide = new Pointer<short>(new short[] { 23, -16 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 2;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 2;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 28,-37,89,56,111,-21,12,-59,-17,89,11,105,-18,-7,-13,-80,95,
                22,-21,67,-32,-78,-44,36,-5,-2,4,40,-23,-117,-56,-28,-111,56,
                100,-52,17,-16,-95,-54,-2,-82,-13,130,120,49,90,69,54,-67,16,
                58,98,-32,-46,-67,-48,15,55,55,55,0,-51,41,-14,91,-18,8,
                21,-5,3,91,-19,-5,18,-23,-33,-43,28,27,-57,-116,-38,31,3,
                -5,46,51,-103,-12,-64,-49,11,-26,-41,6,23,-95,25,169,85,10,
                -23,-77,-21,16,-35,-28,4,16,20,67,18,-33,-27,75,-90,-24,-13,
                27,8,-37,26,-29,-39,65,163,9,35,14,-24,-142,-59,-103,-86,-21,
                20,5,22,75,29,-17,-15,95,52,57,6,11,-94,7,-35,4,26,
                -9,44,91,0,-7,-112,-43,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-27,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 69500, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_4()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -112, -43 });
            through_state.sSide = new Pointer<short>(new short[] { 23, -16 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 14,104,10,-29,83,74,95,-23,38,16,58,-50,-13,-14,-19,-147,-151,
                -8,37,29,48,-41,-47,-52,-86,64,-70,-45,-28,10,139,-162,-74,94,
                200,34,30,96,22,2,48,121,-79,15,22,-77,-85,-66,26,-29,30,
                44,-29,-162,130,45,-61,143,-17,41,4,-78,-202,-68,-197,-47,42,57,
                74,31,-47,-98,154,30,-87,51,38,34,-35,97,-95,132,211,134,-184,
                -272,-97,84,146,-50,1,20,-4,27,21,-11,53,22,48,-14,-18,-15,
                6,16,-62,29,28,-73,0,1,29,-10,93,-48,19,39,33,101,-159,
                -20,3,73,-103,-132,10,135,6,18,46,43,171,-38,-294,-106,22,-121,
                -225,-169,101,150,-48,30,68,66,7,107,-58,53,-27,67,-1,-1,-20,
                87,-77,-52,-23,-114,-38,161,35,-113,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,-2,80,18,-149,-29,116,-56,129,35,68,98,-74,-205,-161,81,
                -10,21,58,42,21,60,16,-138,-3,140,-77,135,25,-25,-234,-6,26,
                5,-18,-44,200,-9,-21,-157,95,149,-49,35,-65,-17,-18,-82,-7,81,
                -43,25,204,-39,18,87,63,73,-127,-86,-63,-46,-24,-134,-103,68,-11,
                -27,-46,-90,30,136,116,94,47,-67,-150,-87,4,44,151,44,-27,-9,
                -14,-80,-72,-33,97,-139,-159,31,92,-24,-227,-15,156,-20,-80,2,41,
                140,67,87,-8,87,-244,45,21,-26,111,127,52,58,-137,130,86,-43,
                -51,-33,-147,-86,-3,-15,77,-93,85,47,35,40,-56,-86,-59,-49,83,
                -2,-109,-85,51,242,53,6,-41,-45,15,123,-69,2,-90,54,146,-47,
                85,40,24,-51,31,-35,131,25,-135,0,0}, 2);
            int in_total_rate_bps = 70700;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 30, -124 });
            expected_state.sSide = new Pointer<short>(new short[] { 5, 11 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 3;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 0;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 4,26,51,-37,33,47,-9,73,47,9,43,-44,-112,-154,-35,-9,29,
                44,45,-10,7,-18,-112,31,35,-61,54,18,57,-198,-40,60,103,8,
                -7,148,7,-9,-54,108,35,-17,29,-71,-51,-42,-28,-18,56,1,-2,
                21,46,32,13,103,28,-43,-41,-70,-124,-46,-165,-75,55,23,24,-7,
                -68,-34,145,73,4,49,-14,-58,-61,51,-25,142,128,54,-96,-143,-88,
                6,57,24,-69,-69,14,60,-1,-119,19,89,14,-47,-8,13,73,42,
                13,11,58,-158,23,11,2,51,110,2,39,-49,82,94,-101,-35,-15,
                -37,-94,-67,-2,106,-43,52,47,39,106,-47,-190,-82,-13,-19,-113,-139,
                8,101,97,42,37,13,-19,61,33,-8,-12,-11,27,73,-33,86,-18,
                -14,-37,-41,-36,146,30,-124,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-135,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 69500, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_5()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 30, -124 });
            through_state.sSide = new Pointer<short>(new short[] { 5, 11 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { -112,-43,-12,37,204,106,3,74,7,-68,9,-60,-86,-47,-78,10,-25,
                16,-9,-22,-82,84,109,-22,-66,77,65,-15,-55,114,87,-25,-20,-52,
                -29,116,-99,47,44,-81,67,43,56,-73,-149,-36,-37,31,-134,-19,107,
                -91,24,118,72,-17,-6,-58,-37,86,22,-21,-51,146,25,23,64,-101,
                -82,86,-6,58,-38,-112,9,-62,-83,-68,-17,62,114,-19,-47,-29,15,
                -190,82,-66,-37,112,152,9,81,24,138,80,-21,-41,-103,-32,-7,-78,
                85,-96,-47,88,114,-63,-108,66,-25,87,43,-83,-113,-81,7,1,61,
                -93,-10,65,43,30,29,-12,90,-35,-5,-109,33,34,18,25,53,-126,
                -62,-69,-47,-26,-27,-40,93,-15,-16,113,172,-47,-73,8,-9,-3,-63,
                -57,46,99,74,40,82,-80,-87,126,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,-4,64,-13,71,32,-141,-88,38,13,122,-50,-130,-57,-131,9,
                -25,-52,-3,-19,193,68,55,111,5,-45,40,-51,-10,-15,-70,6,-92,
                -30,-38,32,3,-8,120,-19,47,115,-180,24,17,-17,-38,-106,74,-207,
                -9,167,157,58,-38,9,70,34,-32,-134,26,-209,49,-4,37,28,-32,
                -59,-130,-49,142,74,96,155,-84,-196,-71,-125,175,127,-6,-119,48,77,
                2,-192,-53,10,42,-109,154,-19,-144,-80,64,-16,32,129,170,15,-51,
                -49,100,55,-11,11,-24,9,13,-39,-159,-3,-60,-32,94,125,-14,-84,
                -38,-98,-73,109,99,40,177,-119,-143,-114,-62,18,63,104,36,-135,99,
                43,59,-10,-25,-19,95,174,75,49,56,-71,-62,-128,-34,-39,-88,67,
                -21,126,-150,60,28,-140,42,47,142,0,0}, 2);
            int in_total_rate_bps = 64492;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -20, 134 });
            expected_state.sSide = new Pointer<short>(new short[] { -67, -8 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 3, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 0, 2, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 0;
            expected_ix[0, 1] = 3;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 0;
            expected_ix[1, 1] = 2;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { -8,51,96,89,18,-33,-40,-15,11,31,-68,-88,-67,-60,-8,-4,-30,
                -12,-50,139,89,17,23,41,10,13,-53,52,36,-47,-7,-72,-29,39,
                -33,25,18,20,24,45,86,-126,-62,-9,-27,-3,-120,28,-50,-50,96,
                138,65,-27,2,6,-1,27,-56,3,-130,98,11,30,46,-66,-70,-22,
                -27,100,18,-8,82,-73,-139,-69,-71,119,121,-12,-83,10,46,-94,-55,
                -59,-13,77,22,82,31,-60,29,72,-18,-4,13,69,4,-64,18,2,
                4,39,63,-43,-49,40,-32,-36,20,-71,-72,7,66,-6,-11,-65,-54,
                -4,76,65,35,83,-14,-89,-59,-85,26,49,61,31,-41,-13,-9,-5,
                -28,-25,-23,28,134,30,17,85,51,-54,-100,-13,-24,-45,2,-39,86,
                -25,67,34,-29,-19,-20,134,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 63292, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_6()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -20, 134 });
            through_state.sSide = new Pointer<short>(new short[] { -67, -8 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 3, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 0, 2, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 30,-124,-24,-17,34,-118,-80,98,-4,46,223,119,29,-20,-127,38,-106,
                -40,109,-59,-92,12,134,-40,89,-32,-168,-42,-90,-118,-58,-120,115,-11,
                -21,140,-4,10,-19,-35,46,41,-30,-65,-80,2,-27,77,77,4,-19,
                59,114,180,-57,39,119,-24,-125,-119,-27,80,22,24,27,-124,2,-96,
                12,-37,-44,-116,10,75,-45,20,14,-28,199,131,37,-24,-54,-2,-54,
                60,107,-80,52,-85,-43,-3,-87,-48,0,-50,-13,80,9,-21,-35,-25,
                -114,88,-8,-59,-16,-93,-32,-71,88,132,-27,-121,102,93,119,-124,-124,
                -38,35,-94,112,-43,138,65,-105,-19,-24,-36,-64,72,112,30,42,-17,
                -42,-18,-109,115,1,-53,-23,64,8,-96,35,-19,58,-45,-5,253,101,
                -21,79,-77,-14,99,22,-9,-112,-124,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,186,-20,-112,52,-7,-9,-5,-103,-26,28,77,-101,-88,38,-6,
                -15,84,-50,-93,-91,-62,-125,22,155,-91,-119,115,-26,41,66,57,-120,
                -45,-4,33,106,98,-226,-130,41,74,197,17,131,159,52,8,-77,-166,
                -93,-1,82,-25,-177,-17,114,101,134,-64,7,-83,-84,39,43,-138,51,
                117,6,-119,-8,7,-35,-40,-29,-55,22,-6,161,51,147,22,-12,-141,
                27,11,77,78,6,-81,-92,-163,-185,-174,-6,22,72,114,36,80,127,
                -60,-61,-21,-55,-30,29,4,-131,68,122,-16,-90,43,-86,-68,-20,43,
                85,13,71,2,101,-99,-50,-44,-3,-80,21,7,39,-46,55,81,27,
                29,-80,58,44,-92,84,59,-188,9,78,166,28,-77,-29,91,25,17,
                27,64,4,-103,-77,-36,12,4,-61,0,0}, 2);
            int in_total_rate_bps = 70116;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -54, -92 });
            expected_state.sSide = new Pointer<short>(new short[] { -58, -31 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 4, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 4, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 0;
            expected_ix[0, 1] = 4;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 4;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 81,-18,-39,-33,-43,45,-4,-28,99,74,53,-60,-107,38,-56,-27,97,
                -54,-92,-39,36,-82,56,62,-129,-80,13,-72,-8,-27,86,-65,-33,68,
                15,58,40,-130,-42,41,22,66,-31,67,66,65,43,-36,-92,-17,57,
                131,-41,-69,51,45,-12,8,-45,44,-30,-30,33,-40,-68,-22,65,-15,
                -81,-62,9,20,-42,-4,-20,-3,97,146,44,62,-16,-7,-97,44,59,
                -1,65,-39,-62,-47,-125,-116,-87,-28,5,76,62,8,23,51,-87,14,
                -14,-57,-23,-32,-14,-101,78,127,-21,-105,73,4,26,-72,-40,24,24,
                -11,57,29,20,8,-74,-11,-52,-7,-28,56,33,43,62,5,-6,-49,
                -25,80,-45,16,18,-62,9,-9,101,5,-9,-37,43,139,59,3,72,
                -36,-58,11,-7,2,-54,-92,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-61,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 68916, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_7()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -54, -92 });
            through_state.sSide = new Pointer<short>(new short[] { -58, -31 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 4, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 4, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { -20,134,39,26,-173,184,-65,-1,137,21,8,-22,57,-144,34,4,-83,
                -144,62,4,45,-37,138,41,-79,93,-155,-83,55,30,-1,2,-52,40,
                -87,138,-2,56,64,-48,21,91,-13,-55,-326,-86,79,80,-50,71,242,
                20,11,-65,-124,-80,103,26,-24,22,51,82,37,-33,-28,-155,46,-19,
                -66,-143,-61,83,-36,68,2,14,255,123,30,67,-68,43,-12,-88,-10,
                -57,-92,18,39,-25,-6,-17,-7,-280,-173,45,44,22,57,189,21,-2,
                78,41,-179,-29,-40,103,-92,-103,-41,125,51,-63,7,94,-122,35,0,
                7,-95,-83,-113,55,183,122,-45,112,76,51,83,42,-76,-84,51,-93,
                3,29,151,-5,-191,-92,-67,-58,-66,62,-51,-53,89,48,67,26,31,
                65,-66,90,69,137,82,5,-85,-40,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,89,-16,-84,-44,113,10,45,-88,18,105,21,-44,-31,-2,113,
                55,-99,-12,-151,-44,88,-50,76,-82,26,55,-31,98,97,93,203,34,
                52,23,-17,-74,-177,38,-81,-131,-99,-74,5,-66,52,1,33,-12,-187,
                -7,47,-114,-141,167,-75,-119,11,40,121,32,-47,-39,54,74,196,112,
                -7,-52,-54,9,51,25,48,114,-77,14,-98,-51,14,-102,-122,70,30,
                -156,-46,46,12,-10,-11,-90,106,-1,-44,145,76,-57,-109,50,92,129,
                86,-151,-13,-58,103,-36,97,158,-63,-117,-247,-85,-48,-104,-96,-85,-16,
                172,98,4,175,215,-61,118,88,-74,-39,-43,78,22,-61,-198,69,48,
                136,108,54,11,93,-72,-57,84,-38,-50,-47,-11,-99,-152,-11,-3,97,
                -43,4,-46,-125,-185,-72,117,89,26,0,0}, 2);
            int in_total_rate_bps = 69908;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 2, -7 });
            expected_state.sSide = new Pointer<short>(new short[] { -87, -33 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 2, 0, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 0;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 2;
            expected_ix[1, 1] = 0;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 64,5,-128,70,24,5,91,-33,13,42,39,-94,2,1,15,-44,-18,
                -4,-53,-40,113,-4,-1,6,-64,-14,12,64,48,48,76,37,-17,81,
                -9,-9,-56,-5,-30,-20,-56,-64,-160,-76,66,41,-8,30,28,7,29,
                -89,-132,44,14,-46,-6,31,86,57,-5,-36,13,-40,121,47,-36,-97,
                -57,46,8,47,25,64,89,69,-34,8,-27,-29,-67,-9,10,-106,-69,
                32,26,-17,-8,-53,50,-140,-108,95,60,-17,-26,120,57,64,82,-55,
                -96,-43,32,34,3,28,-52,4,-98,-74,-20,-5,-109,-25,-8,90,2,
                -39,31,135,61,120,22,19,19,4,81,32,-68,-141,60,-22,70,69,
                103,3,-49,-82,-62,13,-52,6,-49,-32,-5,-52,28,12,64,11,-31,
                22,-28,-24,5,61,2,-7,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 68708, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_8()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 2, -7 });
            through_state.sSide = new Pointer<short>(new short[] { -87, -33 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 2, 0, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { -54,-92,-106,-53,-199,-53,13,49,48,49,9,-50,68,18,67,17,-96,
                -116,-82,-115,-42,79,108,-42,-86,172,32,97,115,123,-109,-157,-111,-55,
                -140,-61,-140,38,32,112,207,168,69,94,-107,61,65,45,141,5,7,
                -31,-207,-274,-195,-39,64,-7,92,14,-84,-5,-42,34,21,53,73,84,
                177,-72,87,-29,-173,-70,49,64,260,58,33,-48,-86,-85,-22,80,-32,
                114,-52,23,-10,17,-64,-90,-109,-58,-22,-74,-61,-21,84,49,49,4,
                -61,-69,51,2,-39,-14,-19,12,2,-122,-10,-81,66,69,11,112,27,
                -41,-85,-91,-51,180,-40,7,-125,-39,14,-2,153,215,112,74,-67,-18,
                84,-79,30,-100,76,138,135,70,9,-103,14,-114,-162,-22,21,-29,2,
                58,40,-107,-95,133,45,-117,127,69,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,-71,-35,228,160,68,-85,5,-22,-154,32,119,13,9,18,-2,
                62,14,-39,71,-54,-214,-23,-136,46,-93,62,3,7,92,161,61,-52,
                -20,35,81,1,-145,17,185,90,27,-50,-137,-130,-105,93,-30,-18,87,
                -52,13,-126,19,121,-69,-139,-123,50,67,-74,91,102,29,-91,105,36,
                -146,-60,-23,-29,31,110,98,-29,25,-72,11,35,59,-28,-55,-48,64,
                -46,-67,-17,-2,-107,-5,68,-35,-128,21,53,8,-57,-5,18,190,1,
                -63,203,-2,-40,40,-89,35,60,93,-6,-76,132,203,104,40,-52,-47,
                -13,131,-20,-134,-50,77,39,-109,-97,-103,-100,-59,-89,-79,-33,-95,-58,
                134,208,22,-62,33,97,-94,-23,-125,0,1,-2,18,87,3,10,-19,
                189,37,-77,-40,14,-134,-66,172,88,0,0}, 2);
            int in_total_rate_bps = 63716;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 150, 79 });
            expected_state.sSide = new Pointer<short>(new short[] { -22, -9 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 2, 2, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 2;
            expected_ix[0, 1] = 2;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 1;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { -88,-44,15,54,41,-18,27,14,-72,-9,94,16,38,18,-49,-27,-34,
                -77,15,13,-53,-32,-111,109,-30,80,59,65,-8,2,-25,-53,-80,-13,
                -29,20,-56,65,196,129,48,22,-122,-34,-20,69,56,-6,47,-41,-97,
                -200,-88,41,-2,-73,-15,32,-8,-39,25,68,25,-19,89,60,16,-66,
                32,-29,-71,20,74,18,143,-7,22,-6,-13,-56,-38,16,16,34,-59,
                3,-6,-45,-34,-11,-72,-93,0,-10,-26,-39,40,34,120,3,-62,67,
                25,-19,1,-51,8,36,48,-64,-43,26,135,87,26,30,-10,-27,23,
                -55,-92,65,19,23,-117,-68,-44,-51,47,63,17,21,-81,-38,109,65,
                26,-81,55,118,21,24,-58,-51,8,-58,-72,33,12,-9,-8,124,39,
                -92,-67,74,-44,-91,150,79,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,88,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 62516, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_9()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 150, 79 });
            through_state.sSide = new Pointer<short>(new short[] { -22, -9 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 2, 2, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 2,-7,-25,-119,-145,2,-53,-72,50,121,68,24,42,-75,-12,-31,-169,
                -56,-61,-151,-3,95,-28,39,39,-14,80,125,83,58,-16,-63,38,137,
                -45,-46,3,-127,10,103,15,-10,-36,20,-7,140,131,-52,-11,-109,-84,
                54,-25,66,-138,-44,98,100,-31,-103,8,14,25,-51,-142,-7,63,-55,
                77,30,-34,2,99,146,-5,-208,-203,-17,-111,16,46,133,41,80,102,
                -36,-21,27,99,-41,67,-19,119,86,-19,29,-90,32,-90,-59,33,-2,
                -71,-168,23,-18,193,-127,-1,-61,68,-38,-14,-49,-80,-83,68,-78,110,
                58,-53,116,142,58,-140,-55,-124,50,-105,-58,24,-18,70,12,39,-59,
                31,30,13,51,72,-45,-111,10,178,190,-7,6,-89,-37,-39,-45,14,
                -157,-67,-1,-116,-152,-171,-19,-8,46,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,59,88,-122,-46,-81,1,-25,111,54,99,-22,-115,-25,-218,-100,
                92,-60,0,69,-64,65,18,-38,92,101,1,-61,42,-43,-104,-48,-51,
                -26,158,79,-14,65,109,-68,117,-74,-141,-81,-73,-143,114,186,2,-67,
                133,116,113,42,-231,-109,78,50,81,158,-62,-66,37,-72,-132,-79,19,
                37,-84,118,89,-16,14,62,125,64,76,-13,-21,-173,-46,-93,98,-29,
                -100,21,-22,17,-42,-99,50,-61,-195,106,45,-17,-116,-55,0,84,127,
                28,75,64,53,-18,-15,5,-123,73,-149,-138,163,-132,-238,-39,-65,7,
                -33,99,57,27,145,133,286,196,-79,-106,-2,-86,-90,-49,11,45,-137,
                -93,17,4,12,-68,-59,-127,43,125,81,-25,54,14,-60,-14,180,132,
                30,-39,66,-9,21,-45,-41,118,-44,0,0}, 2);
            int in_total_rate_bps = 63404;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 55, 1 });
            expected_state.sSide = new Pointer<short>(new short[] { -63, 45 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 4, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 0;
            expected_ix[0, 1] = 4;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 0;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 17,-15,-133,-22,-67,-35,13,116,61,62,10,-95,-18,-124,-134,18,-60,
                -75,33,16,19,29,1,39,91,63,11,50,-29,-83,-5,43,-35,56,
                41,-70,38,106,-26,54,-55,-60,-44,34,-6,31,88,-53,-75,94,46,
                90,-48,-137,-5,89,10,-11,83,-24,-20,-7,-107,-69,-8,-18,57,-27,
                42,46,42,80,29,-41,-69,30,-62,-2,-63,44,-26,89,37,-68,0,
                3,58,-41,-16,16,29,-54,44,37,-53,-42,-72,-29,59,63,-21,-46,
                44,18,88,-71,2,-92,71,-93,-76,57,-106,-160,15,-71,59,13,23,
                87,85,102,-3,116,36,-14,-105,-30,-31,-54,11,12,42,-98,-31,24,
                9,32,2,-52,-119,27,152,136,-16,30,-37,-48,-26,68,73,-63,-53,
                33,-62,-65,-108,-30,55,1,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-44,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 62204, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_10()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 55, 1 });
            through_state.sSide = new Pointer<short>(new short[] { -63, 45 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 4, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 150,79,151,-58,-35,92,57,66,-49,115,86,5,3,71,-30,47,96,
                -104,-99,-100,96,147,17,-17,-118,-41,181,39,125,129,92,-101,-117,-150,
                38,201,-39,-48,34,-33,50,19,-2,-9,-31,-39,112,-56,40,-165,-40,
                -30,-91,-8,81,78,-110,-33,-21,112,227,-4,13,16,43,79,-141,-152,
                -12,-97,12,-31,-175,-56,52,66,-52,95,87,117,180,16,-74,0,-78,
                -98,-50,-46,7,100,117,-184,-7,-12,140,53,-58,7,41,154,-35,-80,
                -111,-121,-27,49,7,-62,-89,-30,-62,8,73,-96,-205,-59,137,160,93,
                -101,-39,70,117,2,-21,-4,-89,-29,-70,71,166,1,-44,60,93,139,
                -34,102,-32,-46,130,121,-18,-162,-45,-42,-230,-90,63,51,45,119,-22,
                4,-14,-46,19,-110,25,84,-99,17,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,-202,-23,-11,-92,-190,-12,151,122,127,69,-76,-15,-26,-52,20,
                3,-58,49,83,73,21,-150,-59,23,12,-104,29,-73,103,116,-39,58,
                -134,-109,-35,31,-41,69,91,40,39,-41,-31,33,-189,-71,18,-24,-43,
                51,-15,-27,-28,44,52,-50,-25,-10,-35,219,203,127,173,10,46,-27,
                35,-58,-36,104,-105,-95,-185,-6,172,-90,-208,-57,63,36,7,-132,180,
                6,12,-168,-38,50,-75,-165,-74,35,67,173,120,-135,-98,76,-34,-110,
                108,177,132,93,44,-32,77,4,10,-32,-23,-22,-149,-7,134,38,-17,
                26,1,34,68,-113,-30,-23,-141,136,-23,19,-89,124,117,24,-158,-159,
                -83,-98,-11,35,21,-97,36,-43,58,-44,-6,-53,-38,-9,21,142,98,
                23,-17,30,-21,74,156,234,113,-38,0,0}, 2);
            int in_total_rate_bps = 63124;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 7, -10 });
            expected_state.sSide = new Pointer<short>(new short[] { -106, 28 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 1;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 2;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { -25,-40,-23,0,-66,27,51,119,107,37,-36,28,-28,-2,58,-50,-78,
                -25,90,110,19,-83,-88,-9,97,-32,77,28,98,8,-78,-46,-48,46,
                -37,-8,-3,18,71,30,19,-25,-31,-3,-38,-63,29,-94,-41,11,-53,
                -17,27,61,-29,-41,-23,51,96,108,108,72,108,45,-47,-89,12,-77,
                -12,37,-140,-75,-66,30,60,3,-60,30,122,26,-33,-66,51,-46,-19,
                -107,-15,75,21,-174,-40,12,104,113,31,-64,-28,115,-34,-95,-1,28,
                53,71,26,-47,-6,-13,-26,-12,25,-59,-177,-33,136,99,38,-37,-19,
                52,93,-55,-25,-13,-115,54,-46,45,39,63,37,42,-32,-10,-58,2,
                -21,-5,76,12,9,-102,7,-43,-118,-71,13,21,33,131,38,14,-15,
                -8,-1,-18,91,159,7,-10,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-38,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 61924, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_11()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 7, -10 });
            through_state.sSide = new Pointer<short>(new short[] { -106, 28 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 55,1,-54,-95,-93,-50,145,22,0,156,-50,-127,-75,35,58,115,101,
                -16,-21,-22,-32,103,74,-14,-14,-17,-46,24,-52,-147,42,-3,-44,110,
                25,111,33,0,42,-206,-28,28,81,-44,-80,-59,120,-16,-133,-10,-57,
                25,-1,-91,-20,95,54,186,174,21,86,-60,-63,-219,-104,74,114,81,
                9,10,56,-70,-104,5,-2,-59,13,54,-39,80,-15,-104,42,-62,16,
                -94,-69,-21,-20,-34,48,71,33,-38,-203,25,53,-7,130,50,-82,-37,
                29,-5,-38,-66,-49,65,-79,123,132,-81,-14,-12,15,28,166,0,25,
                90,-243,34,44,-14,-100,86,-28,147,96,112,-76,25,64,-81,-44,12,
                129,-192,71,-64,-13,-50,52,-152,-10,-29,60,-92,-14,-13,-92,48,177,
                -11,-86,-130,91,104,-57,31,39,71,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,-64,-114,16,69,-12,-178,-32,69,-89,-130,-39,-158,-55,-24,17,
                123,144,-10,24,-51,150,-57,47,-51,-34,-38,21,-45,28,26,-4,-14,
                -75,-79,-11,-84,83,-51,-173,-85,-66,39,75,134,106,-84,-25,48,153,
                216,-89,-233,57,-73,-22,-146,-21,83,32,149,-52,22,63,-131,-70,176,
                59,28,32,63,-98,17,162,-3,-160,14,-60,3,38,60,58,-18,-84,
                3,-12,149,-78,1,-141,28,-78,-5,-2,142,45,12,97,6,-143,-213,
                -139,29,-96,36,192,156,102,156,97,-117,-93,-150,-41,26,15,-7,-53,
                21,-37,-10,-38,-37,54,126,-5,-5,-30,-78,107,145,78,44,-62,-10,
                -75,91,-177,-151,-34,-2,57,-80,9,-39,93,77,-40,13,134,-51,-146,
                -5,153,87,-48,-152,-28,3,-30,124,0,0}, 2);
            int in_total_rate_bps = 70428;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 5, 98 });
            expected_state.sSide = new Pointer<short>(new short[] { 35, -26 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 3, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 0;
            expected_ix[0, 1] = 3;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 3;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { -59,-104,-38,10,67,-78,-16,113,-69,-128,-57,-61,2,46,59,54,62,
                -16,-4,26,112,-35,17,-34,-40,-7,-15,-96,35,12,-24,48,-25,16,
                11,-42,63,-128,-100,-28,8,-2,-2,38,113,-50,-79,19,48,121,-45,
                -162,19,11,16,20,77,52,59,45,-57,-98,-20,-28,22,129,34,19,
                44,-3,-101,11,80,-31,-73,34,-49,42,12,-22,50,-40,-34,-45,-40,
                64,-49,-16,-46,50,-22,-21,-102,84,49,3,114,28,-112,-125,-55,12,
                -67,-15,72,111,12,140,115,-99,-53,-81,-13,27,91,-3,-14,56,-140,
                12,3,-25,-23,106,-16,71,33,17,16,85,71,-18,-53,1,27,-50,
                -53,-107,-23,-26,55,-116,0,-34,77,-7,-27,0,21,-1,16,-8,34,
                -21,22,-24,-42,17,5,98,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,124,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 69228, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_12()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 5, 98 });
            through_state.sSide = new Pointer<short>(new short[] { 35, -26 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 3, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 7,-10,-132,13,85,83,18,33,-130,31,183,-39,-20,20,30,-141,-184,
                -114,-95,69,-40,-107,61,228,-13,39,74,184,-82,84,-29,-59,-146,-40,
                -27,-102,72,50,180,90,-75,76,29,26,112,-65,-12,56,-13,-19,-125,
                -63,-46,13,67,-40,-32,73,42,-157,-117,-83,-164,-60,153,-58,22,119,
                34,45,99,-2,-30,22,-38,26,-38,-57,-97,87,43,128,31,-37,-98,
                -154,-27,13,80,61,23,108,-30,-93,-5,24,97,27,7,-40,-95,145,
                102,95,-11,-53,-52,-110,-182,-205,-22,45,6,-81,31,78,-28,46,56,
                13,50,40,-4,-70,45,114,-71,88,16,14,38,24,-15,37,19,4,
                -16,-26,-68,-18,33,-2,21,-50,159,-78,-73,-67,-35,-10,-51,99,42,
                -61,54,-12,0,183,118,-177,-135,17,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,1,-108,-45,-5,74,14,-37,-3,115,35,58,-18,-17,-69,96,
                71,-11,73,-36,35,64,-88,-27,1,-20,-171,-13,-113,63,10,41,42,
                -122,-102,3,-64,-2,5,51,104,-126,-67,113,119,-91,12,185,-131,18,
                29,-133,111,-18,0,19,31,105,55,89,104,135,-18,9,-17,-72,-50,
                -4,29,-92,-64,-14,-37,-64,44,137,20,-86,-136,-71,20,29,10,-145,
                12,39,-62,-37,57,-122,-17,-31,-4,104,-28,99,101,17,15,-27,-67,
                17,57,120,-5,-14,105,-15,-70,19,97,78,-53,10,-195,-46,-121,-18,
                -23,-26,-21,-14,108,-47,-19,-35,-108,4,-31,28,48,-26,28,169,-11,
                74,55,-84,24,-34,-61,-116,-30,33,71,27,17,-133,82,29,94,-111,
                -75,49,-4,-8,-140,45,94,97,51,0,0}, 2);
            int in_total_rate_bps = 70284;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -19, 34 });
            expected_state.sSide = new Pointer<short>(new short[] { -116, -17 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 2, 3, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 2;
            expected_ix[0, 1] = 3;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 2;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { -65,-47,20,39,46,24,-83,14,149,-2,19,1,7,-105,-44,-21,-53,
                71,-38,-36,63,70,-20,20,27,7,-47,-14,17,-24,-52,1,-74,-102,
                38,-7,89,48,-12,90,-48,-20,113,27,-51,34,86,-75,-53,-17,-89,
                62,25,-20,-6,52,74,-51,-14,11,-14,-39,81,-37,-25,35,15,37,
                4,-33,-22,-7,-51,35,50,-18,-91,-24,-14,74,30,-13,-121,-71,6,
                -24,22,59,-49,46,-30,-48,50,-2,98,64,12,-12,-61,39,60,76,
                55,-29,-33,-2,-98,-137,-1,71,42,-67,21,-58,-37,-37,19,-5,12,
                10,-9,19,-1,48,-53,-10,10,-8,33,36,-20,33,94,-3,29,15,
                -76,3,0,-31,-47,-40,96,-3,-23,-25,-84,36,-11,97,-34,-68,52,
                -8,-4,22,82,-41,-19,34,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 69084, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_13()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -19, 34 });
            through_state.sSide = new Pointer<short>(new short[] { -116, -17 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 2, 3, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 5,98,-24,-39,-38,-10,-10,6,-107,65,99,-50,-36,32,-109,-105,74,
                58,63,228,60,-9,-100,-30,53,70,111,-42,-144,-111,32,8,46,-39,
                19,-22,-32,63,160,26,-32,59,-63,-136,117,87,-34,-94,-20,-47,64,
                189,-42,-97,-207,-91,-10,14,31,116,-14,41,177,-135,56,-71,47,27,
                -21,23,58,90,-19,13,-23,-184,34,10,-23,-159,10,-2,-162,2,31,
                -30,-25,-32,22,-27,65,57,-15,-107,-110,14,-29,2,182,36,61,74,
                -56,-60,34,-7,76,156,52,-175,-62,-78,89,177,60,-15,-63,75,-23,
                -1,-42,-152,-173,19,-32,-79,-19,112,46,47,-19,94,-41,-2,-44,160,
                -134,-52,125,-115,-74,54,133,3,80,55,42,106,-188,-98,-66,-100,35,
                109,23,-75,85,-41,29,-63,-142,-55,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,109,53,-1,-116,-69,69,163,-70,72,93,-94,-302,-178,-17,63,
                121,74,155,130,-66,-118,43,-82,-63,-78,22,49,75,76,74,-7,-54,
                50,2,-81,75,27,2,10,42,-135,18,116,-98,-13,-27,-54,-47,-18,
                33,20,-15,-39,18,130,-93,-46,-80,-8,77,150,-52,64,-34,-167,-8,
                -73,144,122,-65,-88,-111,-252,-5,88,-1,-102,43,-78,163,43,-7,-8,
                138,89,1,54,11,-47,-149,121,27,34,-62,101,80,96,-45,36,13,
                -40,-81,-10,25,144,-130,-129,43,-46,54,-15,-70,63,-30,-12,170,186,
                105,-143,-86,99,4,47,-108,-158,95,118,-95,-79,-101,34,-82,-109,-125,
                77,-32,53,50,-18,55,15,-48,-134,-243,-70,104,110,60,-22,52,20,
                -4,-117,20,-218,-132,-60,99,-71,86,0,0}, 2);
            int in_total_rate_bps = 64140;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { -106, 16 });
            expected_state.sSide = new Pointer<short>(new short[] { -35, -70 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 4, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 0;
            expected_ix[0, 1] = 4;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 1;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 43,7,-19,-63,-39,38,28,-2,86,22,-65,-135,-143,-61,69,90,69,
                192,95,-37,-109,7,-14,4,17,-10,-47,-18,54,41,20,-46,35,-10,
                -56,69,94,14,-11,51,-99,-59,117,-5,-23,-60,-37,-47,23,111,-11,
                -56,-123,-36,60,-39,-7,18,-11,59,164,-93,60,-52,-60,10,-47,84,
                90,13,-53,-49,-137,-94,61,5,-62,-58,-34,81,-59,-2,12,54,32,
                -15,38,-8,9,-46,53,-40,-38,-24,36,41,139,-4,49,44,-48,-70,
                12,9,110,13,-38,-66,-54,-12,37,54,62,-22,-37,123,82,52,-92,
                -119,-37,12,8,-93,-88,104,82,-24,-49,-3,-3,-42,-76,18,-28,-42,
                89,-32,-46,55,74,-22,-27,-94,-14,105,-39,-19,-44,-24,28,53,-47,
                -27,-66,-86,-15,18,-106,16,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 62940, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_14()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { -106, 16 });
            through_state.sSide = new Pointer<short>(new short[] { -35, -70 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 10000;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 4, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { -19,34,-15,51,158,106,55,-1,-77,-87,-28,141,2,3,-45,99,-117,
                -163,-133,-138,8,29,-3,-11,18,9,47,87,18,-4,-29,130,-33,130,
                137,99,69,-10,0,62,-110,-20,53,-55,-3,31,-35,130,142,-4,-65,
                -118,-159,-42,-135,127,-122,37,-82,-58,36,-57,91,212,90,-103,-119,-79,
                -65,-51,61,-62,64,-72,-68,135,-18,-62,39,-10,4,16,19,56,154,
                -117,108,14,46,102,-5,20,-162,-107,16,-55,150,158,-167,-96,74,156,
                7,-15,-30,-167,176,79,-131,-63,-81,-26,59,-68,-75,65,55,-2,-67,
                8,128,75,-134,-25,117,62,66,-13,-39,20,133,6,-50,70,121,-101,
                -41,74,-22,-62,-59,-73,-112,-35,8,13,78,-9,7,40,47,-156,-150,
                44,-10,-94,-27,-51,-84,-22,60,65,-9925,-8169}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,210,53,132,31,137,1,-188,34,49,129,84,62,28,-37,94,
                114,11,-39,-88,-90,-143,36,36,34,-67,65,-80,13,-21,-44,167,71,
                -52,-155,57,-81,-90,-121,74,88,103,80,-93,-92,47,50,6,-190,65,
                -55,49,52,51,-108,-135,-54,100,83,-34,-55,-8,42,53,19,-97,232,
                80,-73,62,73,30,-6,2,-22,-80,21,-121,-33,14,-3,-122,-35,39,
                -34,165,35,40,83,98,22,-81,52,104,-41,-89,-72,-50,-1,-27,111,
                52,-79,-104,1,-6,-151,-1,52,4,21,-11,-132,-45,58,202,51,82,
                -44,-1,8,6,-120,-44,-123,-149,51,-164,-18,59,17,43,144,79,-4,
                -45,-90,5,37,-84,-159,134,139,116,-82,13,43,-125,16,-30,-37,88,
                147,80,15,-29,60,-106,-138,17,-52,0,0}, 2);
            int in_total_rate_bps = 69860;
            int in_prev_speech_act_Q8 = 2;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            expected_state.sMid = new Pointer<short>(new short[] { 39, 7 });
            expected_state.sSide = new Pointer<short>(new short[] { 22, 59 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 313, 5, 55, 3 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 0;
            expected_state.silent_side_len = 10000;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 1, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 1, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 1;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 2;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 98,52,145,69,96,0,-132,-26,11,135,43,33,-8,31,-11,-24,-61,
                -88,-40,-30,-73,13,27,22,-10,76,-31,5,-25,43,67,101,43,-28,
                63,-45,-45,-29,-18,34,78,13,-48,-30,6,90,74,-97,0,-86,-55,
                5,-42,10,-128,-8,9,13,1,-56,42,127,72,-42,-108,77,8,-62,
                62,6,47,-39,-33,57,-49,-20,-41,-21,9,7,-51,11,97,-75,137,
                25,43,93,47,21,-121,-27,60,-48,31,43,-108,-48,24,134,30,-47,
                -67,-83,85,-36,-66,-5,-38,-2,24,-100,-60,62,129,25,8,-18,64,
                42,-64,-72,37,-30,-41,19,-101,1,96,12,-3,107,100,-52,-43,-8,
                -8,-12,-71,-116,11,52,62,-34,46,17,-59,28,9,-96,-31,96,35,
                -39,-28,5,-95,-80,39,7,-9925,-8169,-6315,-5879,645,20133,19715,16908,14130,11856,
                9526,8531,1563,-18300,-18193,-15615,-13048,-10828,-8916,-7356,-5798,-5265,990,20464,20149,17206,14395,
                11976,9826,8039,6362,5649,-913,-20401,-19995,-17207,-14479,-12110,-9700,-8571,-1831,17915,17949,15385,
                12952,10631,8680,6972,5519,5085,-1318,-20892,-20383,-17363,-14720,-12166,-10023,-8270,-6355,-5841,588,
                20331,19769,16888,14130,11717,9795,8001,6277,5706,-788,-20295,-19875,-17067,-14196,-11765,-9419,-8552,
                -1614,18196,18070,15392,12948,10723,8844,7203,5626,5219,-1146,-20735,-20371,-17275,-14504,-11848,-9892,
                -8091,-6329,-5626,741,20318,19939,16992,14327,11822,9920,8158,6372,5911,-617,-20107,-19795,-17006,
                -14201,-11687,-9448,-8426,-1640,18306,18280,15683,13066,10804,9000,7329,5740,5244,-1124,-20610,-20131,
                -17151,-14483,-11830,-9833,-8095,-6257,-5610,891,20370,19989,17137,14447,12065,10000,8116,6363,5938,
                -700,-20222,-19675,-16877,-14124,-11719,-9505,-8333,-1442,18360,18332,15547,13103,10885};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,-52,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 1;
            int[] expected_mid_side_rates_bps =
            new int[] { 68660, 0 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_15()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 0, 0 });
            through_state.sMid = new Pointer<short>(new short[] { 0, 0 });
            through_state.sSide = new Pointer<short>(new short[] { 0, 0 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 0, 1, 0, 1 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 0;
            through_state.silent_side_len = 0;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,0,0,0,0,4,-78,38,112,90,
                -164,-57,109,-93,26,-72,1,-35,-76,-13,61,-17,-3,152,90,205,-40,
                -81,35,-116,-11,35,55,45,-64,23,8,63,-24,-72,-49,-20,-48,-24,
                -25,-51,-116,-195,-15,-152,-93,-56,-34,88,200,84,2,9,35,-57,122,
                -18,52,-84,64,179,-77,-76,15,-7,22,112,39,21,130,78,-90,-97,
                -82,-45,72,13,43,-62,-81,43,5,23,9,27,-21,19,92,-128,88,
                29,118,-40,34,71,-83,-76,57,-35,80,-19,37,-3,83,14,17,222,
                33,-88,-158,8,-40,61,85,9,-67,-123,-178,-94,-27,-69,-11,9,28,
                -60,-10,80,57,8,103,107,14,-60,-121,35,-68,41,-102,-4,-84,47,
                93,15,42,50,-25,107,-46,-129,123,0,0}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,0,0,0,0,0,0,1,-3,6,-14,62,46,-183,-40,-18,
                32,56,36,-71,-10,151,-44,-4,-73,-90,29,76,125,-6,23,17,-95,
                86,9,-102,-94,-46,9,-73,71,151,38,53,-126,100,65,154,-122,-98,
                -16,-103,-50,-25,9,-105,-20,96,-45,-77,146,184,34,59,-80,-123,-8,
                -121,71,35,-16,-65,120,36,-62,-15,-29,-39,36,-57,1,79,-19,-17,
                43,66,-24,43,28,21,-109,41,-33,-165,-62,124,6,112,37,51,47,
                45,-145,-23,-59,63,-40,136,-22,-33,-49,25,13,-48,-32,4,-23,12,
                -48,50,238,-23,-42,-73,-212,-24,64,45,-104,-93,-30,4,-49,45,87,
                -11,76,65,80,48,84,62,-11,52,63,-117,94,-46,9,-33,-68,-56,
                62,-72,-275,-7,15,47,-115,67,211,0,0}, 2);
            int in_total_rate_bps = 64700;
            int in_prev_speech_act_Q8 = 0;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { 984, -656 });
            expected_state.sMid = new Pointer<short>(new short[] { -31, 167 });
            expected_state.sSide = new Pointer<short>(new short[] { -98, -44 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 0, 1, 0, 1 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 16384;
            expected_state.silent_side_len = 0;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 3;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 0;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 0,0,0,0,0,0,1,-1,3,-7,33,-16,-72,36,36,-66,0,
                73,-82,8,40,-21,-19,-74,-51,45,30,61,73,57,111,-67,3,22,
                -109,-52,-5,32,-14,4,87,23,58,-75,14,8,67,-85,-61,-20,-77,
                -83,-110,-3,-128,-56,20,-39,6,173,134,18,34,-22,-90,57,-69,62,
                -24,24,57,22,-20,-23,-11,-3,37,38,-18,66,79,-54,-57,-19,11,
                24,28,36,-20,-95,42,-14,-71,-26,76,-7,66,65,-38,68,37,-13,
                -31,-12,67,-61,30,18,-34,16,3,25,-25,26,9,-3,117,-7,-19,
                40,-7,-41,-6,-63,-7,-1,-39,-141,-93,-28,-32,-30,27,58,-35,33,
                73,69,28,94,85,2,-4,-29,-41,13,-2,-46,-18,-76,-4,78,-28,
                -116,22,-5,77,-80,-31,167,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            short[] expected_x2 =
            new short[] { 0,0,0,0,0,0,0,0,0,0,-3,-6,12,9,7,-13,-8,
                6,-2,3,-19,4,-2,0,8,4,-11,-15,18,7,24,6,-22,5,
                -2,13,12,7,18,-22,-21,-6,3,17,-30,-22,-31,14,15,0,11,
                -12,-35,-2,-10,-15,-33,2,37,12,-26,-10,-12,30,16,37,25,-3,
                -34,22,68,-56,-33,23,3,15,46,1,22,41,1,-24,-25,-40,-37,
                32,-11,6,-28,8,4,14,69,26,-34,-13,-36,22,-73,17,-7,106,
                -6,37,6,-21,-88,34,-2,57,-20,12,19,53,4,15,99,35,-66,
                -186,15,1,68,145,19,-63,-80,-36,3,5,-35,19,-18,-28,-27,-43,
                6,-13,-24,8,22,11,-55,-91,76,-79,45,-55,18,-9,52,19,45,
                157,33,-23,34,32,-101,211,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 0;
            int[] expected_mid_side_rates_bps =
            new int[] { 31750, 31750 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }

        [TestMethod]
        public void Test_silk_stereo_LR_to_MS_16()
        {
            stereo_enc_state through_state = new stereo_enc_state();
            through_state.pred_prev_Q13 = new Pointer<short>(new short[] { 984, -656 });
            through_state.sMid = new Pointer<short>(new short[] { -31, 167 });
            through_state.sSide = new Pointer<short>(new short[] { -98, -44 });
            through_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 0, 1, 0, 1 });
            through_state.smth_width_Q14 = 16384;
            through_state.width_prev_Q14 = 16384;
            through_state.silent_side_len = 0;
            through_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            through_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 3, 2 });
            through_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 0, 2 });
            through_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            through_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            through_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            Pointer<short> in_x1 = new Pointer<short>(
            new short[] { 0,0,39,-16,-27,-22,-82,-156,-132,21,180,-35,-53,138,38,-12,13,
                -70,-43,-13,-115,-10,-6,105,88,-80,50,-24,-66,80,5,-84,27,68,
                -29,-92,79,111,-51,-102,71,157,95,-77,-77,-81,-84,105,45,-34,108,
                87,25,-97,38,11,-65,90,38,5,-15,-53,-122,70,37,28,-113,-114,
                -30,16,79,-30,21,112,5,-239,-159,30,167,-69,-61,91,55,-18,-20,
                -42,71,12,-43,202,46,165,-9,-39,29,-87,-11,-41,-106,-78,159,13,
                -34,-31,-43,19,-67,-90,-28,23,139,22,-98,-58,-70,133,-110,100,110,
                108,-162,-76,-164,-88,-32,-114,117,20,89,127,47,107,-65,-128,105,-23,
                118,113,-22,-11,5,15,133,-4,57,-153,-235,-134,-19,-38,13,135,25,
                55,-20,-117,-138,146,54,-171,60,74,0,0}, 2);
            Pointer<short> in_x2 = new Pointer<short>(
            new short[] { 0,0,133,22,-41,-112,-27,-15,-47,-49,4,44,121,-52,-138,-31,11,
                -21,-29,-43,249,94,14,93,29,129,2,85,122,-45,-165,-54,-182,-54,
                103,-33,102,76,-99,-13,-75,-181,-166,-156,107,-104,101,96,-8,66,-53,
                10,93,-59,-73,-65,4,-96,-34,-18,4,80,122,58,-3,115,37,-4,
                81,63,-19,125,-16,-69,-10,29,-61,-44,9,-175,62,-109,-72,-96,-90,
                -70,-3,44,-6,63,249,41,37,32,67,-29,-104,-46,5,65,-12,10,
                70,33,-63,-50,-37,-49,-20,96,-71,91,138,12,-87,-152,-20,22,116,
                110,1,67,-16,-53,133,24,-52,35,-81,-43,-17,-101,-48,67,25,-24,
                105,9,-3,59,-151,136,-15,56,89,50,-141,49,119,-90,-104,-56,-55,
                -104,19,85,-6,-37,17,0,-129,-122,0,0}, 2);
            int in_total_rate_bps = 64700;
            int in_prev_speech_act_Q8 = 3;
            int in_toMono = 0;
            int in_fs_kHz = 16;
            int in_frame_length = 160;
            stereo_enc_state expected_state = new stereo_enc_state();
            expected_state.pred_prev_Q13 = new Pointer<short>(new short[] { -656, 656 });
            expected_state.sMid = new Pointer<short>(new short[] { -34, -24 });
            expected_state.sSide = new Pointer<short>(new short[] { 95, 98 });
            expected_state.mid_side_amp_Q0 = new Pointer<int>(new int[] { 0, 1, 0, 1 });
            expected_state.smth_width_Q14 = 16384;
            expected_state.width_prev_Q14 = 16384;
            expected_state.silent_side_len = 0;
            expected_state.predIx = Pointer.Malloc<Pointer<Pointer<sbyte>>>(SilkConstants.MAX_FRAMES_PER_PACKET);
            expected_state.predIx[0] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[0][0] = new Pointer<sbyte>(new sbyte[] { 1, 2, 2 });
            expected_state.predIx[0][1] = new Pointer<sbyte>(new sbyte[] { 1, 4, 2 });
            expected_state.predIx[1] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[1][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[1][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2] = Pointer.Malloc<Pointer<sbyte>>(2);
            expected_state.predIx[2][0] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.predIx[2][1] = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            expected_state.mid_only_flags = new Pointer<sbyte>(new sbyte[] { 0, 0, 0 });
            sbyte[,] expected_ix = new sbyte[2, 3];
            expected_ix[0, 0] = 1;
            expected_ix[0, 1] = 2;
            expected_ix[0, 2] = 2;
            expected_ix[1, 0] = 1;
            expected_ix[1, 1] = 4;
            expected_ix[1, 2] = 2;
            short[] expected_x1 =
            new short[] { 86,3,-34,-67,-54,-85,-89,-14,92,5,34,43,-50,-21,12,-45,-36,
                -28,67,42,4,99,59,25,26,31,28,18,-80,-69,-77,7,37,-62,
                91,94,-75,-57,-2,-12,-35,-116,15,-92,9,101,19,16,28,49,59,
                -78,-17,-27,-30,-3,2,-6,-5,14,0,64,17,72,-38,-59,26,40,
                30,48,3,22,-2,-105,-110,-7,88,-122,1,-9,-8,-57,-55,-56,34,
                28,-24,133,148,103,14,-3,48,-58,-57,-43,-50,-6,74,12,18,1,
                -53,-15,-52,-69,-24,60,34,57,20,-23,-78,-9,-65,61,113,109,-80,
                -4,-90,-70,51,-45,33,28,4,42,15,3,-56,-30,65,-23,112,61,
                -12,24,-73,76,59,26,73,-51,-188,-42,50,-64,-45,40,-15,-24,0,
                -16,-72,55,36,-85,-34,-24,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            short[] expected_x2 =
            new short[] { -50,-20,8,46,-24,-68,-41,35,90,-42,-88,96,87,11,3,-24,-6,
                14,-182,-53,-13,6,28,-105,23,-55,-95,64,85,-13,106,62,-65,-31,
                -11,18,23,-43,74,169,133,40,-89,12,-92,5,26,-51,80,38,-34,
                -19,57,38,-34,93,36,12,-9,-66,-122,5,19,-43,-75,-54,-55,-24,
                49,-78,19,91,8,-133,-48,37,78,55,-61,100,64,40,35,15,36,
                -16,-17,68,-102,61,-23,-35,-20,-28,47,3,-54,-71,84,3,-52,-32,
                11,34,-15,-19,-3,-37,106,-35,-118,-35,11,141,-42,38,-4,-4,-77,
                -74,-72,-15,-86,-66,84,-7,86,84,32,103,-6,-96,36,5,3,52,
                -7,-38,83,-63,74,-28,-19,-101,-41,-92,-73,29,60,93,41,81,-20,
                -102,-62,89,17,-82,94,-122,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0};
            sbyte expected_mid_only_flag = 0;
            int[] expected_mid_side_rates_bps =
            new int[] { 31750, 31750 };
            Pointer<Pointer<sbyte>> out_ix = Arrays.InitTwoDimensionalArrayPointer<sbyte>(2, 3);
            BoxedValue<sbyte> out_midOnlyFlag = new BoxedValue<sbyte>();
            Pointer<int> out_mid_side_rates = Pointer.Malloc<int>(2);
            Stereo.silk_stereo_LR_to_MS(through_state, in_x1, in_x2, out_ix, out_midOnlyFlag, out_mid_side_rates, in_total_rate_bps, in_prev_speech_act_Q8, in_toMono, in_fs_kHz, in_frame_length);
            Assert.AreEqual(expected_mid_only_flag, out_midOnlyFlag.Val);
            Helpers.AssertArrayDataEquals(expected_mid_side_rates_bps, out_mid_side_rates);
            Helpers.AssertArrayDataEquals(expected_x1, in_x1);
            Helpers.AssertArrayDataEquals(expected_x2, in_x2);
            Assert.AreEqual(expected_ix[0, 0], out_ix[0][0]);
            Assert.AreEqual(expected_ix[0, 1], out_ix[0][1]);
            Assert.AreEqual(expected_ix[0, 2], out_ix[0][2]);
            Assert.AreEqual(expected_ix[1, 0], out_ix[1][0]);
            Assert.AreEqual(expected_ix[1, 1], out_ix[1][1]);
            Assert.AreEqual(expected_ix[1, 2], out_ix[1][2]);
        }
    }
}
