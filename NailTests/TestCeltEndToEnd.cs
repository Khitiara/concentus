using Concentus.Common;
using Concentus.Common.CPlusPlus;
using Concentus.Celt;
using Concentus.Celt.Structs;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NailTests
{
    [TestClass]
    public class TestCeltEndToEnd
    {
        [TestMethod]
        public void Test20MsSample()
        {
            short[] samples = { 4522, 4188, 2984, 3264, 4813, 5527,
                4007, 1472, -522, -1561, -1794, -1466,
                -693, 51, -463, -2173, -3494, -3394,
                -2548, -2024, -1871, -1615, -789, 775,
                2233, 3624, 4811, 4779, 3149, 447,
                -2112, -3456, -3967, -4589, -5189, -5017,
                -3443, -1140, 2331, 7637, 14121, 18202,
                17864, 13800, 9378, 6530, 3893, -516,
                -5096, -7583, -8249, -8551, -9340, -9202,
                -7535, -5734, -6061, -7597, -7657, -5131,
                -1916, 827, 3005, 5416, 6830, 6346,
                4075, 1700, -153, -2363, -5717, -8960,
                -10241, -9042, -6776, -5145, -4357, -3989,
                -3378, -3279, -3244, -2446, -849, 594,
                966, 987, 2420, 5570, 8435, 7951,
                3851, -1199, -4880, -6659, -7930, -8861,
                -8346, -6352, -4052, -2203, -613, 2198,
                5243, 6500, 5103, 3217, 2739, 3710,
                4557, 5240, 6488, 7824, 7279, 3973,
                -29, -2077, -2067, -2212, -3784, -4775,
                -3326, -813, 1011, 2330, 4173, 5691,
                5170, 2250, -122, 404, 3291, 5317,
                5424, 4605, 3947, 3482, 2225, 144,
                -1785, -3698, -5939, -8105, -8694, -6921,
                -3585, -1046, -414, -592, -474, 48,
                160, -443, -1062, -1497, -2569, -3673,
                -3719, -1914, 182, 1022, 323, -278,
                107, 1880, 5243, 10568, 15963, 18443,
                16906, 13103, 9739, 7637, 5146, 1263,
                -2634, -5080, -6271, -7124, -7497, -6658,
                -4810, -4290, -5904, -7622, -7085, -4787,
                -1736, 728, 3147, 5250, 5440, 3530,
                1292, -159, -1360, -3432, -6204, -7735,
                -6945, -4601, -2837, -2406, -2749, -3301,
                -3989, -4400, -3646, -1271, 1492, 2955,
                2965, 2946, 4351, 6722, 7293, 4309,
                -1040, -5803, -8091, -8338, -7903, -7222,
                -5677, -4184, -3794, -4204, -3711, -1560,
                743, 1365, 516, 619, 2847, 6309,
                9005, 10165, 9789, 7683, 3535, -1041,
                -3639, -3194, -1698, -1685, -2928, -2872,
                -1225, 298, 465, 482, 763, 608,
                -868, -2149, -921, 3137, 7242, 8863,
                7700, 5319, 2818, 412, -1870, -3515,
                -4275, -4825, -5599, -5753, -3922, -653,
                1958, 2086, 33, -1863, -2341, -1822,
                -1357, -939, -166, 284, -298, -1083,
                -792, 477, 875, -546, -1879, -645,
                4076, 10008, 15052, 17353, 16914, 14356,
                11391, 8363, 5843, 3576, 1587, -524,
                -2559, -4184, -4784, -4836, -4676, -5762,
                -7611, -8805, -7796, -5140, -1781, 871,
                2568, 3593, 3564, 2127, -234, -1920,
                -2336, -2815, 0, 0, 0, 0};

            CELTEncoder encoder = new CELTEncoder();
            int error = celt_encoder.celt_encoder_init(encoder, 48000, 1, 0);
            encoder.signalling = 0;

            Pointer<byte> outbuf = Pointer.Malloc<byte>(1000);

            ec_ctx entropyCoder = new ec_ctx();
            EntropyCoder.ec_enc_init(entropyCoder, outbuf, 1000);

            byte[] output = new byte[1000];

            int[] intSamples = new int[samples.Length];
            for (int c = 0; c < intSamples.Length; c++)
            {
                intSamples[c] = samples[c];
            }
            
            celt_encoder.celt_encode_with_ec(encoder, intSamples.GetPointer(), 120, output.GetPointer(), 2, entropyCoder);
            Assert.AreEqual(0, error);
        }
    }
}
